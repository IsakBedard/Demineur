

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Nov 30 20:07:19 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec,minocg
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2,minocg
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1,minocg
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1,minocg
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1,minocg
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2,minocg
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,minocg
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,minocg
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,minocg
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,minocg
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,minocg
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,minocg
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,minocg
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,minocg
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,minocg
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 2.10
    44                           ; Generated 31/07/2019 GMT
    45                           ; 
    46                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F45K20 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataBANK0
    79  006FF2                     __pidataBANK0:
    80                           	opt callstack 0
    81                           
    82                           ;initializer for _randx
    83  006FF2  0001               	dw	1
    84  006FF4  0000               	dw	0
    85                           
    86                           	psect	idataBANK1
    87  00711C                     __pidataBANK1:
    88                           	opt callstack 0
    89                           
    90                           ;initializer for _matCGRAM
    91  00711C  08                 	db	8
    92  00711D  04                 	db	4
    93  00711E  04                 	db	4
    94  00711F  0A                 	db	10
    95  007120  11                 	db	17
    96  007121  1F                 	db	31
    97  007122  11                 	db	17
    98  007123  00                 	db	0
    99  007124  1F                 	db	31
   100  007125  1B                 	db	27
   101  007126  11                 	db	17
   102  007127  11                 	db	17
   103  007128  11                 	db	17
   104  007129  11                 	db	17
   105  00712A  1B                 	db	27
   106  00712B  1F                 	db	31
   107  00712C  00                 	db	0
   108  00712D  15                 	db	21
   109  00712E  0E                 	db	14
   110  00712F  1F                 	db	31
   111  007130  1F                 	db	31
   112  007131  0E                 	db	14
   113  007132  15                 	db	21
   114  007133  00                 	db	0
   115  007134  0E                 	db	14
   116  007135  11                 	db	17
   117  007136  15                 	db	21
   118  007137  15                 	db	21
   119  007138  15                 	db	21
   120  007139  0E                 	db	14
   121  00713A  15                 	db	21
   122  00713B  04                 	db	4
   123  00713C  04                 	db	4
   124  00713D  04                 	db	4
   125  00713E  04                 	db	4
   126  00713F  04                 	db	4
   127  007140  0E                 	db	14
   128  007141  0E                 	db	14
   129  007142  1B                 	db	27
   130  007143  11                 	db	17
   131  007144  04                 	db	4
   132  007145  0A                 	db	10
   133  007146  0E                 	db	14
   134  007147  11                 	db	17
   135  007148  1F                 	db	31
   136  007149  10                 	db	16
   137  00714A  0E                 	db	14
   138  00714B  00                 	db	0
   139  00714C  08                 	db	8
   140  00714D  04                 	db	4
   141  00714E  0E                 	db	14
   142  00714F  01                 	db	1
   143  007150  0F                 	db	15
   144  007151  11                 	db	17
   145  007152  0F                 	db	15
   146  007153  00                 	db	0
   147  007154  04                 	db	4
   148  007155  0A                 	db	10
   149  007156  0E                 	db	14
   150  007157  01                 	db	1
   151  007158  0F                 	db	15
   152  007159  11                 	db	17
   153  00715A  0F                 	db	15
   154  00715B  00                 	db	0
   155  0000                     _TRISCbits	set	3988
   156  0000                     _PORTAbits	set	3968
   157  0000                     _PORTD	set	3971
   158  0000                     _ANSELbits	set	3966
   159  0000                     _TRISA	set	3986
   160  0000                     _ANSEL	set	3966
   161  0000                     _TRISB	set	3987
   162  0000                     _ANSELH	set	3967
   163  0000                     _TRISD	set	3989
   164  0000                     _TMR1	set	4046
   165  0000                     _RCREG	set	4014
   166  0000                     _TXREG	set	4013
   167  0000                     _RCSTAbits	set	4011
   168  0000                     _TXSTAbits	set	4012
   169  0000                     _BAUDCONbits	set	4024
   170  0000                     _SPBRG	set	4015
   171  0000                     _SPBRGH	set	4016
   172  0000                     _ADRESH	set	4036
   173  0000                     _ADCON2bits	set	4032
   174  0000                     _ADCON1	set	4033
   175  0000                     _ADCON0bits	set	4034
   176  0000                     _T1CONbits	set	4045
   177  0000                     _RCIF	set	31989
   178                           
   179                           ; #config settings
   180  0000                     
   181                           	psect	cinit
   182  0072F0                     __pcinit:
   183                           	opt callstack 0
   184  0072F0                     start_initialization:
   185                           	opt callstack 0
   186  0072F0                     __initialization:
   187                           	opt callstack 0
   188                           
   189                           ; Initialize objects allocated to BANK1 (64 bytes)
   190                           ; load TBLPTR registers with __pidataBANK1
   191  0072F0  0E1C               	movlw	low __pidataBANK1
   192  0072F2  6EF6               	movwf	tblptrl,c
   193  0072F4  0E71               	movlw	high __pidataBANK1
   194  0072F6  6EF7               	movwf	tblptrh,c
   195  0072F8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   196  0072FA  6EF8               	movwf	tblptru,c
   197  0072FC  EE01  F054         	lfsr	0,__pdataBANK1
   198  007300  EE10 F040          	lfsr	1,64
   199  007304                     copy_data0:
   200  007304  0009               	tblrd		*+
   201  007306  CFF5 FFEE          	movff	tablat,postinc0
   202  00730A  50E5               	movf	postdec1,w,c
   203  00730C  50E1               	movf	fsr1l,w,c
   204  00730E  E1FA               	bnz	copy_data0
   205                           
   206                           ; Initialize objects allocated to BANK0 (4 bytes)
   207                           ; load TBLPTR registers with __pidataBANK0
   208  007310  0EF2               	movlw	low __pidataBANK0
   209  007312  6EF6               	movwf	tblptrl,c
   210  007314  0E6F               	movlw	high __pidataBANK0
   211  007316  6EF7               	movwf	tblptrh,c
   212  007318  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   213  00731A  6EF8               	movwf	tblptru,c
   214  00731C  EE00  F0D6         	lfsr	0,__pdataBANK0
   215  007320  EE10 F004          	lfsr	1,4
   216  007324                     copy_data1:
   217  007324  0009               	tblrd		*+
   218  007326  CFF5 FFEE          	movff	tablat,postinc0
   219  00732A  50E5               	movf	postdec1,w,c
   220  00732C  50E1               	movf	fsr1l,w,c
   221  00732E  E1FA               	bnz	copy_data1
   222                           
   223                           ; Clear objects allocated to BANK1 (84 bytes)
   224  007330  EE01  F000         	lfsr	0,__pbssBANK1
   225  007334  0E54               	movlw	84
   226  007336                     clear_0:
   227  007336  6AEE               	clrf	postinc0,c
   228  007338  06E8               	decf	wreg,f,c
   229  00733A  E1FD               	bnz	clear_0
   230                           
   231                           ; Clear objects allocated to BANK0 (84 bytes)
   232  00733C  EE00  F060         	lfsr	0,__pbssBANK0
   233  007340  0E54               	movlw	84
   234  007342                     clear_1:
   235  007342  6AEE               	clrf	postinc0,c
   236  007344  06E8               	decf	wreg,f,c
   237  007346  E1FD               	bnz	clear_1
   238  007348                     end_of_initialization:
   239                           	opt callstack 0
   240  007348                     __end_of__initialization:
   241                           	opt callstack 0
   242  007348  0100               	movlb	0
   243  00734A  EFA7  F039         	goto	_main	;jump to C main() function
   244                           
   245                           	psect	bssBANK0
   246  000060                     __pbssBANK0:
   247                           	opt callstack 0
   248  000060                     _m_tabMines:
   249                           	opt callstack 0
   250  000060                     	ds	84
   251                           
   252                           	psect	dataBANK0
   253  0000D6                     __pdataBANK0:
   254                           	opt callstack 0
   255  0000D6                     _randx:
   256                           	opt callstack 0
   257  0000D6                     	ds	4
   258                           
   259                           	psect	bssBANK1
   260  000100                     __pbssBANK1:
   261                           	opt callstack 0
   262  000100                     _m_tabVue:
   263                           	opt callstack 0
   264  000100                     	ds	84
   265                           
   266                           	psect	dataBANK1
   267  000154                     __pdataBANK1:
   268                           	opt callstack 0
   269  000154                     _matCGRAM:
   270                           	opt callstack 0
   271  000154                     	ds	64
   272                           
   273                           	psect	cstackBANK0
   274  0000B4                     __pcstackBANK0:
   275                           	opt callstack 0
   276  0000B4                     ??_initTabVue:
   277  0000B4                     ??_getAnalog:
   278  0000B4                     ??_lcd_ecrireDonnees:
   279  0000B4                     ??_lcd_busy:
   280  0000B4                     ?___wmul:
   281                           	opt callstack 0
   282  0000B4                     ?___lmul:
   283                           	opt callstack 0
   284  0000B4                     ___wmul@multiplier:
   285                           	opt callstack 0
   286  0000B4                     srand@x:
   287                           	opt callstack 0
   288  0000B4                     ___lmul@multiplier:
   289                           	opt callstack 0
   290                           
   291                           ; 4 bytes @ 0x0
   292  0000B4                     	ds	1
   293  0000B5                     getAnalog@canal:
   294                           	opt callstack 0
   295  0000B5                     lcd_ecrireDonnees@donnee:
   296                           	opt callstack 0
   297  0000B5                     lcd_busy@adresse:
   298                           	opt callstack 0
   299                           
   300                           ; 1 bytes @ 0x1
   301  0000B5                     	ds	1
   302  0000B6                     ??_lcd_resetSequence:
   303  0000B6                     initTabVue@j:
   304                           	opt callstack 0
   305  0000B6                     lcd_wrCom@commande:
   306                           	opt callstack 0
   307  0000B6                     lcd_wrData@caractere:
   308                           	opt callstack 0
   309  0000B6                     ___wmul@multiplicand:
   310                           	opt callstack 0
   311                           
   312                           ; 2 bytes @ 0x2
   313  0000B6                     	ds	1
   314  0000B7                     ??_lcd_initCGRam:
   315  0000B7                     initTabVue@i:
   316                           	opt callstack 0
   317  0000B7                     lcd_gotoXY@y:
   318                           	opt callstack 0
   319  0000B7                     lcd_ecritChar@car:
   320                           	opt callstack 0
   321                           
   322                           ; 1 bytes @ 0x3
   323  0000B7                     	ds	1
   324  0000B8                     lcd_gotoXY@x:
   325                           	opt callstack 0
   326  0000B8                     lcd_ecritChar@posRam:
   327                           	opt callstack 0
   328  0000B8                     ___wmul@product:
   329                           	opt callstack 0
   330  0000B8                     ___lmul@multiplicand:
   331                           	opt callstack 0
   332                           
   333                           ; 4 bytes @ 0x4
   334  0000B8                     	ds	1
   335  0000B9                     lcd_initCGRam@i:
   336                           	opt callstack 0
   337  0000B9                     deplace@x:
   338                           	opt callstack 0
   339  0000B9                     lcd_putMessage@chaine:
   340                           	opt callstack 0
   341                           
   342                           ; 2 bytes @ 0x5
   343  0000B9                     	ds	1
   344  0000BA                     lcd_initCGRam@j:
   345                           	opt callstack 0
   346  0000BA                     calculToucheCombien@ligne:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x6
   350  0000BA                     	ds	1
   351  0000BB                     lcd_putMessage@j:
   352                           	opt callstack 0
   353  0000BB                     deplace@y:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0x7
   357  0000BB                     	ds	1
   358  0000BC                     afficheTabVue@i:
   359                           	opt callstack 0
   360  0000BC                     calculToucheCombien@colonne:
   361                           	opt callstack 0
   362  0000BC                     ___lmul@product:
   363                           	opt callstack 0
   364                           
   365                           ; 4 bytes @ 0x8
   366  0000BC                     	ds	1
   367  0000BD                     ??_deplace:
   368                           
   369                           ; 1 bytes @ 0x9
   370  0000BD                     	ds	1
   371  0000BE                     ??_calculToucheCombien:
   372  0000BE                     deplace@analogX:
   373                           	opt callstack 0
   374                           
   375                           ; 1 bytes @ 0xA
   376  0000BE                     	ds	1
   377  0000BF                     deplace@analogY:
   378                           	opt callstack 0
   379                           
   380                           ; 1 bytes @ 0xB
   381  0000BF                     	ds	1
   382  0000C0                     ?_rand:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0xC
   386  0000C0                     	ds	1
   387  0000C1                     calculToucheCombien@nbMines:
   388                           	opt callstack 0
   389                           
   390                           ; 1 bytes @ 0xD
   391  0000C1                     	ds	1
   392  0000C2                     ?___awmod:
   393                           	opt callstack 0
   394  0000C2                     calculToucheCombien@i:
   395                           	opt callstack 0
   396  0000C2                     ___awmod@dividend:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0xE
   400  0000C2                     	ds	2
   401  0000C4                     calculToucheCombien@j:
   402                           	opt callstack 0
   403  0000C4                     ___awmod@divisor:
   404                           	opt callstack 0
   405                           
   406                           ; 2 bytes @ 0x10
   407  0000C4                     	ds	2
   408  0000C6                     ??_metToucheCombien:
   409  0000C6                     ___awmod@counter:
   410                           	opt callstack 0
   411                           
   412                           ; 1 bytes @ 0x12
   413  0000C6                     	ds	1
   414  0000C7                     ___awmod@sign:
   415                           	opt callstack 0
   416                           
   417                           ; 1 bytes @ 0x13
   418  0000C7                     	ds	1
   419  0000C8                     rempliMines@nb:
   420                           	opt callstack 0
   421                           
   422                           ; 2 bytes @ 0x14
   423  0000C8                     	ds	1
   424  0000C9                     metToucheCombien@i:
   425                           	opt callstack 0
   426                           
   427                           ; 1 bytes @ 0x15
   428  0000C9                     	ds	1
   429  0000CA                     ??_rempliMines:
   430  0000CA                     metToucheCombien@j:
   431                           	opt callstack 0
   432                           
   433                           ; 1 bytes @ 0x16
   434  0000CA                     	ds	3
   435  0000CD                     rempliMines@x:
   436                           	opt callstack 0
   437                           
   438                           ; 1 bytes @ 0x19
   439  0000CD                     	ds	1
   440  0000CE                     rempliMines@y:
   441                           	opt callstack 0
   442                           
   443                           ; 1 bytes @ 0x1A
   444  0000CE                     	ds	1
   445  0000CF                     rempliMines@i:
   446                           	opt callstack 0
   447                           
   448                           ; 1 bytes @ 0x1B
   449  0000CF                     	ds	1
   450  0000D0                     rempliMines@j:
   451                           	opt callstack 0
   452                           
   453                           ; 1 bytes @ 0x1C
   454  0000D0                     	ds	1
   455  0000D1                     ??_main:
   456                           
   457                           ; 1 bytes @ 0x1D
   458  0000D1                     	ds	1
   459  0000D2                     main@posX:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x1E
   463  0000D2                     	ds	2
   464  0000D4                     main@posY:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x20
   468  0000D4                     	ds	2
   469                           
   470 ;;
   471 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   472 ;;
   473 ;; *************** function _main *****************
   474 ;; Defined at:
   475 ;;		line 50 in file "main.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;		None
   478 ;; Auto vars:     Size  Location     Type
   479 ;;  posY            2   32[BANK0 ] PTR unsigned char 
   480 ;;		 -> RAM(1535), 
   481 ;;  posX            2   30[BANK0 ] PTR unsigned char 
   482 ;;		 -> RAM(1535), 
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   492 ;;      Params:         0       0       0       0       0       0       0
   493 ;;      Locals:         0       4       0       0       0       0       0
   494 ;;      Temps:          0       1       0       0       0       0       0
   495 ;;      Totals:         0       5       0       0       0       0       0
   496 ;;Total ram usage:        5 bytes
   497 ;; Hardware stack levels required when called:    6
   498 ;; This function calls:
   499 ;;		_afficheTabVue
   500 ;;		_deplace
   501 ;;		_initTabVue
   502 ;;		_initialisation
   503 ;;		_lcd_init
   504 ;;		_metToucheCombien
   505 ;;		_rempliMines
   506 ;; This function is called by:
   507 ;;		Startup code after reset
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text0
   512  00734E                     __ptext0:
   513                           	opt callstack 0
   514  00734E                     _main:
   515                           	opt callstack 25
   516  00734E                     
   517                           ;main.c: 52: char* posX = 10;
   518  00734E  0E0A               	movlw	10
   519  007350  0100               	movlb	0	; force () banked
   520  007352  6FD2               	movwf	main@posX& (0+255),b
   521  007354  0E00               	movlw	0
   522  007356  6FD3               	movwf	(main@posX+1)& (0+255),b
   523                           
   524                           ;main.c: 53: char* posY = 2;
   525  007358  0E02               	movlw	2
   526  00735A  0100               	movlb	0	; force () banked
   527  00735C  6FD4               	movwf	main@posY& (0+255),b
   528  00735E  0E00               	movlw	0
   529  007360  6FD5               	movwf	(main@posY+1)& (0+255),b
   530  007362                     
   531                           ; BSR set to: 0
   532                           ;main.c: 55: initialisation();
   533  007362  EC74  F038         	call	_initialisation	;wreg free
   534  007366                     
   535                           ;main.c: 56: lcd_init();
   536  007366  EC1C  F038         	call	_lcd_init	;wreg free
   537  00736A                     
   538                           ;main.c: 57: initTabVue();
   539  00736A  EC06  F03B         	call	_initTabVue	;wreg free
   540  00736E                     
   541                           ;main.c: 58: rempliMines(15);
   542  00736E  0E00               	movlw	0
   543  007370  0100               	movlb	0	; force () banked
   544  007372  6FC9               	movwf	(rempliMines@nb+1)& (0+255),b
   545  007374  0E0F               	movlw	15
   546  007376  6FC8               	movwf	rempliMines@nb& (0+255),b
   547  007378  ECB5  F03B         	call	_rempliMines	;wreg free
   548  00737C                     
   549                           ;main.c: 59: metToucheCombien();
   550  00737C  EC63  F03C         	call	_metToucheCombien	;wreg free
   551  007380                     
   552                           ;main.c: 60: afficheTabVue();
   553  007380  EC4B  F039         	call	_afficheTabVue	;wreg free
   554  007384                     l2134:
   555                           
   556                           ;main.c: 63: {;main.c: 64: deplace(&posX, &posY);
   557  007384  0ED2               	movlw	low main@posX
   558  007386  0100               	movlb	0	; force () banked
   559  007388  6FB9               	movwf	deplace@x& (0+255),b
   560  00738A  0E00               	movlw	high main@posX
   561  00738C  6FBA               	movwf	(deplace@x+1)& (0+255),b
   562  00738E  0ED4               	movlw	low main@posY
   563  007390  0100               	movlb	0	; force () banked
   564  007392  6FBB               	movwf	deplace@y& (0+255),b
   565  007394  0E00               	movlw	high main@posY
   566  007396  6FBC               	movwf	(deplace@y+1)& (0+255),b
   567  007398  EC12  F03D         	call	_deplace	;wreg free
   568  00739C                     
   569                           ;main.c: 65: _delay((unsigned long)((100)*(1000000/4000.0)));
   570  00739C  0E21               	movlw	33
   571  00739E  0100               	movlb	0	; force () banked
   572  0073A0  6FD1               	movwf	??_main& (0+255),b
   573  0073A2  0E76               	movlw	118
   574  0073A4                     u1277:
   575  0073A4  2EE8               	decfsz	wreg,f,c
   576  0073A6  D7FE               	bra	u1277
   577  0073A8  2FD1               	decfsz	??_main& (0+255),f,b
   578  0073AA  D7FC               	bra	u1277
   579  0073AC  F000               	nop	
   580  0073AE  EFC2  F039         	goto	l2134
   581  0073B2  EF00  F000         	goto	start
   582  0073B6                     __end_of_main:
   583                           	opt callstack 0
   584                           
   585 ;; *************** function _rempliMines *****************
   586 ;; Defined at:
   587 ;;		line 119 in file "main.c"
   588 ;; Parameters:    Size  Location     Type
   589 ;;  nb              2   20[BANK0 ] int 
   590 ;; Auto vars:     Size  Location     Type
   591 ;;  j               1   28[BANK0 ] unsigned char 
   592 ;;  i               1   27[BANK0 ] unsigned char 
   593 ;;  y               1   26[BANK0 ] unsigned char 
   594 ;;  x               1   25[BANK0 ] unsigned char 
   595 ;; Return value:  Size  Location     Type
   596 ;;                  1    wreg      void 
   597 ;; Registers used:
   598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   599 ;; Tracked objects:
   600 ;;		On entry : 0/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   604 ;;      Params:         0       2       0       0       0       0       0
   605 ;;      Locals:         0       4       0       0       0       0       0
   606 ;;      Temps:          0       3       0       0       0       0       0
   607 ;;      Totals:         0       9       0       0       0       0       0
   608 ;;Total ram usage:        9 bytes
   609 ;; Hardware stack levels used:    1
   610 ;; Hardware stack levels required when called:    2
   611 ;; This function calls:
   612 ;;		___awmod
   613 ;;		_rand
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text1
   620  00776A                     __ptext1:
   621                           	opt callstack 0
   622  00776A                     _rempliMines:
   623                           	opt callstack 28
   624  00776A                     
   625                           ;main.c: 121: char x, y;;main.c: 123: for (char i = 0; i < 4; i++) {
   626  00776A  0E00               	movlw	0
   627  00776C  0100               	movlb	0	; force () banked
   628  00776E  6FCF               	movwf	rempliMines@i& (0+255),b
   629  007770                     
   630                           ; BSR set to: 0
   631  007770  0E03               	movlw	3
   632  007772  0100               	movlb	0	; force () banked
   633  007774  65CF               	cpfsgt	rempliMines@i& (0+255),b
   634  007776  EFBF  F03B         	goto	u941
   635  00777A  EFC1  F03B         	goto	u940
   636  00777E                     u941:
   637  00777E  EFC3  F03B         	goto	l2012
   638  007782                     u940:
   639  007782  EF54  F03C         	goto	l2036
   640  007786                     l2012:
   641                           
   642                           ; BSR set to: 0
   643                           ;main.c: 124: for (char j = 0; j < 20; j++) {
   644  007786  0E00               	movlw	0
   645  007788  0100               	movlb	0	; force () banked
   646  00778A  6FD0               	movwf	rempliMines@j& (0+255),b
   647  00778C                     
   648                           ; BSR set to: 0
   649  00778C  0E13               	movlw	19
   650  00778E  0100               	movlb	0	; force () banked
   651  007790  65D0               	cpfsgt	rempliMines@j& (0+255),b
   652  007792  EFCD  F03B         	goto	u951
   653  007796  EFCF  F03B         	goto	u950
   654  00779A                     u951:
   655  00779A  EFD1  F03B         	goto	l2018
   656  00779E                     u950:
   657  00779E  EFF4  F03B         	goto	l2024
   658  0077A2                     l2018:
   659                           
   660                           ; BSR set to: 0
   661                           ;main.c: 125: m_tabMines[i][j] = ' ';
   662  0077A2  0100               	movlb	0	; force () banked
   663  0077A4  51CF               	movf	rempliMines@i& (0+255),w,b
   664  0077A6  0D15               	mullw	21
   665  0077A8  0E60               	movlw	low _m_tabMines
   666  0077AA  0100               	movlb	0	; force () banked
   667  0077AC  6FCA               	movwf	??_rempliMines& (0+255),b
   668  0077AE  0E00               	movlw	high _m_tabMines
   669  0077B0  6FCB               	movwf	(??_rempliMines+1)& (0+255),b
   670  0077B2  50F3               	movf	243,w,c
   671  0077B4  27CA               	addwf	??_rempliMines& (0+255),f,b
   672  0077B6  50F4               	movf	244,w,c
   673  0077B8  23CB               	addwfc	(??_rempliMines+1)& (0+255),f,b
   674  0077BA  0100               	movlb	0	; force () banked
   675  0077BC  51D0               	movf	rempliMines@j& (0+255),w,b
   676  0077BE  0100               	movlb	0	; force () banked
   677  0077C0  25CA               	addwf	??_rempliMines& (0+255),w,b
   678  0077C2  6ED9               	movwf	fsr2l,c
   679  0077C4  0100               	movlb	0	; force () banked
   680  0077C6  0E00               	movlw	0
   681  0077C8  0100               	movlb	0	; force () banked
   682  0077CA  21CB               	addwfc	(??_rempliMines+1)& (0+255),w,b
   683  0077CC  6EDA               	movwf	fsr2h,c
   684  0077CE  0E20               	movlw	32
   685  0077D0  6EDF               	movwf	indf2,c
   686  0077D2                     
   687                           ; BSR set to: 0
   688  0077D2  0100               	movlb	0	; force () banked
   689  0077D4  2BD0               	incf	rempliMines@j& (0+255),f,b
   690  0077D6                     
   691                           ; BSR set to: 0
   692  0077D6  0E13               	movlw	19
   693  0077D8  0100               	movlb	0	; force () banked
   694  0077DA  65D0               	cpfsgt	rempliMines@j& (0+255),b
   695  0077DC  EFF2  F03B         	goto	u961
   696  0077E0  EFF4  F03B         	goto	u960
   697  0077E4                     u961:
   698  0077E4  EFD1  F03B         	goto	l2018
   699  0077E8                     u960:
   700  0077E8                     l2024:
   701                           
   702                           ; BSR set to: 0
   703  0077E8  0100               	movlb	0	; force () banked
   704  0077EA  2BCF               	incf	rempliMines@i& (0+255),f,b
   705  0077EC                     
   706                           ; BSR set to: 0
   707  0077EC  0E03               	movlw	3
   708  0077EE  0100               	movlb	0	; force () banked
   709  0077F0  65CF               	cpfsgt	rempliMines@i& (0+255),b
   710  0077F2  EFFD  F03B         	goto	u971
   711  0077F6  EFFF  F03B         	goto	u970
   712  0077FA                     u971:
   713  0077FA  EFC3  F03B         	goto	l2012
   714  0077FE                     u970:
   715  0077FE  EF54  F03C         	goto	l2036
   716  007802                     l2028:
   717                           
   718                           ; BSR set to: 0
   719                           ;main.c: 129: x = rand() % 20;
   720  007802  EC20  F039         	call	_rand	;wreg free
   721  007806  C0C0  F0C2         	movff	?_rand,___awmod@dividend
   722  00780A  C0C1  F0C3         	movff	?_rand+1,___awmod@dividend+1
   723  00780E  0E00               	movlw	0
   724  007810  0100               	movlb	0	; force () banked
   725  007812  6FC5               	movwf	(___awmod@divisor+1)& (0+255),b
   726  007814  0E14               	movlw	20
   727  007816  6FC4               	movwf	___awmod@divisor& (0+255),b
   728  007818  EC5C  F03B         	call	___awmod	;wreg free
   729  00781C  0100               	movlb	0	; force () banked
   730  00781E  51C2               	movf	?___awmod& (0+255),w,b
   731  007820  0100               	movlb	0	; force () banked
   732  007822  6FCD               	movwf	rempliMines@x& (0+255),b
   733                           
   734                           ;main.c: 130: y = rand() % 4;
   735  007824  EC20  F039         	call	_rand	;wreg free
   736  007828  0100               	movlb	0	; force () banked
   737  00782A  51C0               	movf	?_rand& (0+255),w,b
   738  00782C  0B03               	andlw	3
   739  00782E  0100               	movlb	0	; force () banked
   740  007830  6FCE               	movwf	rempliMines@y& (0+255),b
   741  007832                     
   742                           ; BSR set to: 0
   743                           ;main.c: 131: if (m_tabMines[y][x] != 2) {
   744  007832  0100               	movlb	0	; force () banked
   745  007834  51CE               	movf	rempliMines@y& (0+255),w,b
   746  007836  0D15               	mullw	21
   747  007838  0E60               	movlw	low _m_tabMines
   748  00783A  0100               	movlb	0	; force () banked
   749  00783C  6FCA               	movwf	??_rempliMines& (0+255),b
   750  00783E  0E00               	movlw	high _m_tabMines
   751  007840  6FCB               	movwf	(??_rempliMines+1)& (0+255),b
   752  007842  50F3               	movf	243,w,c
   753  007844  27CA               	addwf	??_rempliMines& (0+255),f,b
   754  007846  50F4               	movf	244,w,c
   755  007848  23CB               	addwfc	(??_rempliMines+1)& (0+255),f,b
   756  00784A  0100               	movlb	0	; force () banked
   757  00784C  51CD               	movf	rempliMines@x& (0+255),w,b
   758  00784E  0100               	movlb	0	; force () banked
   759  007850  25CA               	addwf	??_rempliMines& (0+255),w,b
   760  007852  6ED9               	movwf	fsr2l,c
   761  007854  0100               	movlb	0	; force () banked
   762  007856  0E00               	movlw	0
   763  007858  0100               	movlb	0	; force () banked
   764  00785A  21CB               	addwfc	(??_rempliMines+1)& (0+255),w,b
   765  00785C  6EDA               	movwf	fsr2h,c
   766  00785E  0E02               	movlw	2
   767  007860  18DE               	xorwf	postinc2,w,c
   768  007862  B4D8               	btfsc	status,2,c
   769  007864  EF36  F03C         	goto	u981
   770  007868  EF38  F03C         	goto	u980
   771  00786C                     u981:
   772  00786C  EF54  F03C         	goto	l2036
   773  007870                     u980:
   774  007870                     
   775                           ; BSR set to: 0
   776                           ;main.c: 132: m_tabMines[y][x] = 2;
   777  007870  0100               	movlb	0	; force () banked
   778  007872  51CE               	movf	rempliMines@y& (0+255),w,b
   779  007874  0D15               	mullw	21
   780  007876  0E60               	movlw	low _m_tabMines
   781  007878  0100               	movlb	0	; force () banked
   782  00787A  6FCA               	movwf	??_rempliMines& (0+255),b
   783  00787C  0E00               	movlw	high _m_tabMines
   784  00787E  6FCB               	movwf	(??_rempliMines+1)& (0+255),b
   785  007880  50F3               	movf	243,w,c
   786  007882  27CA               	addwf	??_rempliMines& (0+255),f,b
   787  007884  50F4               	movf	244,w,c
   788  007886  23CB               	addwfc	(??_rempliMines+1)& (0+255),f,b
   789  007888  0100               	movlb	0	; force () banked
   790  00788A  51CD               	movf	rempliMines@x& (0+255),w,b
   791  00788C  0100               	movlb	0	; force () banked
   792  00788E  25CA               	addwf	??_rempliMines& (0+255),w,b
   793  007890  6ED9               	movwf	fsr2l,c
   794  007892  0100               	movlb	0	; force () banked
   795  007894  0E00               	movlw	0
   796  007896  0100               	movlb	0	; force () banked
   797  007898  21CB               	addwfc	(??_rempliMines+1)& (0+255),w,b
   798  00789A  6EDA               	movwf	fsr2h,c
   799  00789C  0E02               	movlw	2
   800  00789E  6EDF               	movwf	indf2,c
   801  0078A0                     
   802                           ; BSR set to: 0
   803                           ;main.c: 133: nb--;
   804  0078A0  0100               	movlb	0	; force () banked
   805  0078A2  07C8               	decf	rempliMines@nb& (0+255),f,b
   806  0078A4  A0D8               	btfss	status,0,c
   807  0078A6  07C9               	decf	(rempliMines@nb+1)& (0+255),f,b
   808  0078A8                     l2036:
   809                           
   810                           ; BSR set to: 0
   811  0078A8  0100               	movlb	0	; force () banked
   812  0078AA  BFC9               	btfsc	(rempliMines@nb+1)& (0+255),7,b
   813  0078AC  EF62  F03C         	goto	u990
   814  0078B0  51C9               	movf	(rempliMines@nb+1)& (0+255),w,b
   815  0078B2  E106               	bnz	u991
   816  0078B4  05C8               	decf	rempliMines@nb& (0+255),w,b
   817  0078B6  B0D8               	btfsc	status,0,c
   818  0078B8  EF60  F03C         	goto	u991
   819  0078BC  EF62  F03C         	goto	u990
   820  0078C0                     u991:
   821  0078C0  EF01  F03C         	goto	l2028
   822  0078C4                     u990:
   823  0078C4                     
   824                           ; BSR set to: 0
   825  0078C4  0012               	return		;funcret
   826  0078C6                     __end_of_rempliMines:
   827                           	opt callstack 0
   828                           
   829 ;; *************** function _rand *****************
   830 ;; Defined at:
   831 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;                  2   12[BANK0 ] int 
   838 ;; Registers used:
   839 ;;		wreg, status,2, status,0, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   845 ;;      Params:         0       2       0       0       0       0       0
   846 ;;      Locals:         0       0       0       0       0       0       0
   847 ;;      Temps:          0       0       0       0       0       0       0
   848 ;;      Totals:         0       2       0       0       0       0       0
   849 ;;Total ram usage:        2 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    1
   852 ;; This function calls:
   853 ;;		___lmul
   854 ;; This function is called by:
   855 ;;		_rempliMines
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           	psect	text2
   860  007240                     __ptext2:
   861                           	opt callstack 0
   862  007240                     _rand:
   863                           	opt callstack 28
   864  007240  C0D6  F0B4         	movff	_randx,___lmul@multiplier
   865  007244  C0D7  F0B5         	movff	_randx+1,___lmul@multiplier+1
   866  007248  C0D8  F0B6         	movff	_randx+2,___lmul@multiplier+2
   867  00724C  C0D9  F0B7         	movff	_randx+3,___lmul@multiplier+3
   868  007250  0E6D               	movlw	109
   869  007252  0100               	movlb	0	; () banked
   870  007254  6FB8               	movwf	___lmul@multiplicand& (0+255),b
   871  007256  0E4E               	movlw	78
   872  007258  6FB9               	movwf	(___lmul@multiplicand+1)& (0+255),b
   873  00725A  0EC6               	movlw	198
   874  00725C  6FBA               	movwf	(___lmul@multiplicand+2)& (0+255),b
   875  00725E  0E41               	movlw	65
   876  007260  6FBB               	movwf	(___lmul@multiplicand+3)& (0+255),b
   877  007262  EC46  F03A         	call	___lmul	;wreg free
   878  007266  C0B4  F0D6         	movff	?___lmul,_randx
   879  00726A  C0B5  F0D7         	movff	?___lmul+1,_randx+1
   880  00726E  C0B6  F0D8         	movff	?___lmul+2,_randx+2
   881  007272  C0B7  F0D9         	movff	?___lmul+3,_randx+3
   882  007276  0E39               	movlw	57
   883  007278  0100               	movlb	0	; () banked
   884  00727A  27D6               	addwf	_randx& (0+255),f,b
   885  00727C  0E30               	movlw	48
   886  00727E  23D7               	addwfc	(_randx+1)& (0+255),f,b
   887  007280  0E00               	movlw	0
   888  007282  23D8               	addwfc	(_randx+2)& (0+255),f,b
   889  007284  0E00               	movlw	0
   890  007286  23D9               	addwfc	(_randx+3)& (0+255),f,b
   891  007288                     
   892                           ; BSR set to: 0
   893  007288  0EFF               	movlw	255
   894  00728A  15D8               	andwf	(_randx+2)& (0+255),w,b
   895  00728C  6FC0               	movwf	?_rand& (0+255),b
   896  00728E  0E7F               	movlw	127
   897  007290  15D9               	andwf	(_randx+3)& (0+255),w,b
   898  007292  6FC1               	movwf	(?_rand+1)& (0+255),b
   899  007294                     
   900                           ; BSR set to: 0
   901  007294  0012               	return		;funcret
   902  007296                     __end_of_rand:
   903                           	opt callstack 0
   904                           
   905 ;; *************** function ___lmul *****************
   906 ;; Defined at:
   907 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;  multiplier      4    0[BANK0 ] unsigned long 
   910 ;;  multiplicand    4    4[BANK0 ] unsigned long 
   911 ;; Auto vars:     Size  Location     Type
   912 ;;  product         4    8[BANK0 ] unsigned long 
   913 ;; Return value:  Size  Location     Type
   914 ;;                  4    0[BANK0 ] unsigned long 
   915 ;; Registers used:
   916 ;;		wreg, status,2, status,0
   917 ;; Tracked objects:
   918 ;;		On entry : 0/0
   919 ;;		On exit  : 0/0
   920 ;;		Unchanged: 0/0
   921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   922 ;;      Params:         0       8       0       0       0       0       0
   923 ;;      Locals:         0       4       0       0       0       0       0
   924 ;;      Temps:          0       0       0       0       0       0       0
   925 ;;      Totals:         0      12       0       0       0       0       0
   926 ;;Total ram usage:       12 bytes
   927 ;; Hardware stack levels used:    1
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_rand
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text3
   936  00748C                     __ptext3:
   937                           	opt callstack 0
   938  00748C                     ___lmul:
   939                           	opt callstack 28
   940  00748C  0E00               	movlw	0
   941  00748E  0100               	movlb	0	; () banked
   942  007490  6FBC               	movwf	___lmul@product& (0+255),b
   943  007492  0E00               	movlw	0
   944  007494  6FBD               	movwf	(___lmul@product+1)& (0+255),b
   945  007496  0E00               	movlw	0
   946  007498  6FBE               	movwf	(___lmul@product+2)& (0+255),b
   947  00749A  0E00               	movlw	0
   948  00749C  6FBF               	movwf	(___lmul@product+3)& (0+255),b
   949  00749E                     l1790:
   950                           
   951                           ; BSR set to: 0
   952  00749E  A1B4               	btfss	___lmul@multiplier& (0+255),0,b
   953  0074A0  EF54  F03A         	goto	u701
   954  0074A4  EF56  F03A         	goto	u700
   955  0074A8                     u701:
   956  0074A8  EF5E  F03A         	goto	l1794
   957  0074AC                     u700:
   958  0074AC                     
   959                           ; BSR set to: 0
   960  0074AC  51B8               	movf	___lmul@multiplicand& (0+255),w,b
   961  0074AE  27BC               	addwf	___lmul@product& (0+255),f,b
   962  0074B0  51B9               	movf	(___lmul@multiplicand+1)& (0+255),w,b
   963  0074B2  23BD               	addwfc	(___lmul@product+1)& (0+255),f,b
   964  0074B4  51BA               	movf	(___lmul@multiplicand+2)& (0+255),w,b
   965  0074B6  23BE               	addwfc	(___lmul@product+2)& (0+255),f,b
   966  0074B8  51BB               	movf	(___lmul@multiplicand+3)& (0+255),w,b
   967  0074BA  23BF               	addwfc	(___lmul@product+3)& (0+255),f,b
   968  0074BC                     l1794:
   969                           
   970                           ; BSR set to: 0
   971  0074BC  90D8               	bcf	status,0,c
   972  0074BE  37B8               	rlcf	___lmul@multiplicand& (0+255),f,b
   973  0074C0  37B9               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
   974  0074C2  37BA               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
   975  0074C4  37BB               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
   976  0074C6                     
   977                           ; BSR set to: 0
   978  0074C6  90D8               	bcf	status,0,c
   979  0074C8  33B7               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
   980  0074CA  33B6               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
   981  0074CC  33B5               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
   982  0074CE  33B4               	rrcf	___lmul@multiplier& (0+255),f,b
   983  0074D0  51B4               	movf	___lmul@multiplier& (0+255),w,b
   984  0074D2  11B5               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
   985  0074D4  11B6               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
   986  0074D6  11B7               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
   987  0074D8  A4D8               	btfss	status,2,c
   988  0074DA  EF71  F03A         	goto	u711
   989  0074DE  EF73  F03A         	goto	u710
   990  0074E2                     u711:
   991  0074E2  EF4F  F03A         	goto	l1790
   992  0074E6                     u710:
   993  0074E6                     
   994                           ; BSR set to: 0
   995  0074E6  C0BC  F0B4         	movff	___lmul@product,?___lmul
   996  0074EA  C0BD  F0B5         	movff	___lmul@product+1,?___lmul+1
   997  0074EE  C0BE  F0B6         	movff	___lmul@product+2,?___lmul+2
   998  0074F2  C0BF  F0B7         	movff	___lmul@product+3,?___lmul+3
   999  0074F6                     
  1000                           ; BSR set to: 0
  1001  0074F6  0012               	return		;funcret
  1002  0074F8                     __end_of___lmul:
  1003                           	opt callstack 0
  1004                           
  1005 ;; *************** function ___awmod *****************
  1006 ;; Defined at:
  1007 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  dividend        2   14[BANK0 ] int 
  1010 ;;  divisor         2   16[BANK0 ] int 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  sign            1   19[BANK0 ] unsigned char 
  1013 ;;  counter         1   18[BANK0 ] unsigned char 
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  2   14[BANK0 ] int 
  1016 ;; Registers used:
  1017 ;;		wreg, status,2, status,0
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1023 ;;      Params:         0       4       0       0       0       0       0
  1024 ;;      Locals:         0       2       0       0       0       0       0
  1025 ;;      Temps:          0       0       0       0       0       0       0
  1026 ;;      Totals:         0       6       0       0       0       0       0
  1027 ;;Total ram usage:        6 bytes
  1028 ;; Hardware stack levels used:    1
  1029 ;; This function calls:
  1030 ;;		Nothing
  1031 ;; This function is called by:
  1032 ;;		_rempliMines
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text4
  1037  0076B8                     __ptext4:
  1038                           	opt callstack 0
  1039  0076B8                     ___awmod:
  1040                           	opt callstack 29
  1041  0076B8  0E00               	movlw	0
  1042  0076BA  0100               	movlb	0	; () banked
  1043  0076BC  6FC7               	movwf	___awmod@sign& (0+255),b
  1044  0076BE                     
  1045                           ; BSR set to: 0
  1046  0076BE  BFC3               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  1047  0076C0  EF66  F03B         	goto	u840
  1048  0076C4  EF64  F03B         	goto	u841
  1049  0076C8                     u841:
  1050  0076C8  EF6C  F03B         	goto	l1930
  1051  0076CC                     u840:
  1052  0076CC                     
  1053                           ; BSR set to: 0
  1054  0076CC  6DC2               	negf	___awmod@dividend& (0+255),b
  1055  0076CE  1FC3               	comf	(___awmod@dividend+1)& (0+255),f,b
  1056  0076D0  B0D8               	btfsc	status,0,c
  1057  0076D2  2BC3               	incf	(___awmod@dividend+1)& (0+255),f,b
  1058  0076D4                     
  1059                           ; BSR set to: 0
  1060  0076D4  0E01               	movlw	1
  1061  0076D6  6FC7               	movwf	___awmod@sign& (0+255),b
  1062  0076D8                     l1930:
  1063                           
  1064                           ; BSR set to: 0
  1065  0076D8  BFC5               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  1066  0076DA  EF73  F03B         	goto	u850
  1067  0076DE  EF71  F03B         	goto	u851
  1068  0076E2                     u851:
  1069  0076E2  EF77  F03B         	goto	l1934
  1070  0076E6                     u850:
  1071  0076E6                     
  1072                           ; BSR set to: 0
  1073  0076E6  6DC4               	negf	___awmod@divisor& (0+255),b
  1074  0076E8  1FC5               	comf	(___awmod@divisor+1)& (0+255),f,b
  1075  0076EA  B0D8               	btfsc	status,0,c
  1076  0076EC  2BC5               	incf	(___awmod@divisor+1)& (0+255),f,b
  1077  0076EE                     l1934:
  1078                           
  1079                           ; BSR set to: 0
  1080  0076EE  51C4               	movf	___awmod@divisor& (0+255),w,b
  1081  0076F0  11C5               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1082  0076F2  B4D8               	btfsc	status,2,c
  1083  0076F4  EF7E  F03B         	goto	u861
  1084  0076F8  EF80  F03B         	goto	u860
  1085  0076FC                     u861:
  1086  0076FC  EFA4  F03B         	goto	l1950
  1087  007700                     u860:
  1088  007700                     
  1089                           ; BSR set to: 0
  1090  007700  0E01               	movlw	1
  1091  007702  6FC6               	movwf	___awmod@counter& (0+255),b
  1092  007704  EF88  F03B         	goto	l1940
  1093  007708                     l1938:
  1094                           
  1095                           ; BSR set to: 0
  1096  007708  90D8               	bcf	status,0,c
  1097  00770A  37C4               	rlcf	___awmod@divisor& (0+255),f,b
  1098  00770C  37C5               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1099  00770E  2BC6               	incf	___awmod@counter& (0+255),f,b
  1100  007710                     l1940:
  1101                           
  1102                           ; BSR set to: 0
  1103  007710  AFC5               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1104  007712  EF8D  F03B         	goto	u871
  1105  007716  EF8F  F03B         	goto	u870
  1106  00771A                     u871:
  1107  00771A  EF84  F03B         	goto	l1938
  1108  00771E                     u870:
  1109  00771E                     l1942:
  1110                           
  1111                           ; BSR set to: 0
  1112  00771E  51C4               	movf	___awmod@divisor& (0+255),w,b
  1113  007720  5DC2               	subwf	___awmod@dividend& (0+255),w,b
  1114  007722  51C5               	movf	(___awmod@divisor+1)& (0+255),w,b
  1115  007724  59C3               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1116  007726  A0D8               	btfss	status,0,c
  1117  007728  EF98  F03B         	goto	u881
  1118  00772C  EF9A  F03B         	goto	u880
  1119  007730                     u881:
  1120  007730  EF9E  F03B         	goto	l1946
  1121  007734                     u880:
  1122  007734                     
  1123                           ; BSR set to: 0
  1124  007734  51C4               	movf	___awmod@divisor& (0+255),w,b
  1125  007736  5FC2               	subwf	___awmod@dividend& (0+255),f,b
  1126  007738  51C5               	movf	(___awmod@divisor+1)& (0+255),w,b
  1127  00773A  5BC3               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1128  00773C                     l1946:
  1129                           
  1130                           ; BSR set to: 0
  1131  00773C  90D8               	bcf	status,0,c
  1132  00773E  33C5               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1133  007740  33C4               	rrcf	___awmod@divisor& (0+255),f,b
  1134  007742                     
  1135                           ; BSR set to: 0
  1136  007742  2FC6               	decfsz	___awmod@counter& (0+255),f,b
  1137  007744  EF8F  F03B         	goto	l1942
  1138  007748                     l1950:
  1139                           
  1140                           ; BSR set to: 0
  1141  007748  51C7               	movf	___awmod@sign& (0+255),w,b
  1142  00774A  B4D8               	btfsc	status,2,c
  1143  00774C  EFAA  F03B         	goto	u891
  1144  007750  EFAC  F03B         	goto	u890
  1145  007754                     u891:
  1146  007754  EFB0  F03B         	goto	l1954
  1147  007758                     u890:
  1148  007758                     
  1149                           ; BSR set to: 0
  1150  007758  6DC2               	negf	___awmod@dividend& (0+255),b
  1151  00775A  1FC3               	comf	(___awmod@dividend+1)& (0+255),f,b
  1152  00775C  B0D8               	btfsc	status,0,c
  1153  00775E  2BC3               	incf	(___awmod@dividend+1)& (0+255),f,b
  1154  007760                     l1954:
  1155                           
  1156                           ; BSR set to: 0
  1157  007760  C0C2  F0C2         	movff	___awmod@dividend,?___awmod
  1158  007764  C0C3  F0C3         	movff	___awmod@dividend+1,?___awmod+1
  1159  007768                     
  1160                           ; BSR set to: 0
  1161  007768  0012               	return		;funcret
  1162  00776A                     __end_of___awmod:
  1163                           	opt callstack 0
  1164                           
  1165 ;; *************** function _metToucheCombien *****************
  1166 ;; Defined at:
  1167 ;;		line 147 in file "main.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  j               1   22[BANK0 ] unsigned char 
  1172 ;;  i               1   21[BANK0 ] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      void 
  1175 ;; Registers used:
  1176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1182 ;;      Params:         0       0       0       0       0       0       0
  1183 ;;      Locals:         0       2       0       0       0       0       0
  1184 ;;      Temps:          0       3       0       0       0       0       0
  1185 ;;      Totals:         0       5       0       0       0       0       0
  1186 ;;Total ram usage:        5 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:    2
  1189 ;; This function calls:
  1190 ;;		_calculToucheCombien
  1191 ;; This function is called by:
  1192 ;;		_main
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           	psect	text5
  1197  0078C6                     __ptext5:
  1198                           	opt callstack 0
  1199  0078C6                     _metToucheCombien:
  1200                           	opt callstack 28
  1201  0078C6                     
  1202                           ;main.c: 149: for (char i = 0; i < 4; i++) {
  1203  0078C6  0E00               	movlw	0
  1204  0078C8  0100               	movlb	0	; force () banked
  1205  0078CA  6FC9               	movwf	metToucheCombien@i& (0+255),b
  1206  0078CC                     
  1207                           ; BSR set to: 0
  1208  0078CC  0E03               	movlw	3
  1209  0078CE  0100               	movlb	0	; force () banked
  1210  0078D0  65C9               	cpfsgt	metToucheCombien@i& (0+255),b
  1211  0078D2  EF6D  F03C         	goto	u1001
  1212  0078D6  EF6F  F03C         	goto	u1000
  1213  0078DA                     u1001:
  1214  0078DA  EF71  F03C         	goto	l2044
  1215  0078DE                     u1000:
  1216  0078DE  EF11  F03D         	goto	l96
  1217  0078E2                     l2044:
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 150: for (char j = 0; j < 20; j++) {
  1221  0078E2  0E00               	movlw	0
  1222  0078E4  0100               	movlb	0	; force () banked
  1223  0078E6  6FCA               	movwf	metToucheCombien@j& (0+255),b
  1224  0078E8                     
  1225                           ; BSR set to: 0
  1226  0078E8  0E13               	movlw	19
  1227  0078EA  0100               	movlb	0	; force () banked
  1228  0078EC  65CA               	cpfsgt	metToucheCombien@j& (0+255),b
  1229  0078EE  EF7B  F03C         	goto	u1011
  1230  0078F2  EF7D  F03C         	goto	u1010
  1231  0078F6                     u1011:
  1232  0078F6  EF7F  F03C         	goto	l2050
  1233  0078FA                     u1010:
  1234  0078FA  EF06  F03D         	goto	l2062
  1235  0078FE                     l2050:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 151: if (m_tabMines[i][j] != 2)
  1239  0078FE  0100               	movlb	0	; force () banked
  1240  007900  51C9               	movf	metToucheCombien@i& (0+255),w,b
  1241  007902  0D15               	mullw	21
  1242  007904  0E60               	movlw	low _m_tabMines
  1243  007906  0100               	movlb	0	; force () banked
  1244  007908  6FC6               	movwf	??_metToucheCombien& (0+255),b
  1245  00790A  0E00               	movlw	high _m_tabMines
  1246  00790C  6FC7               	movwf	(??_metToucheCombien+1)& (0+255),b
  1247  00790E  50F3               	movf	243,w,c
  1248  007910  27C6               	addwf	??_metToucheCombien& (0+255),f,b
  1249  007912  50F4               	movf	244,w,c
  1250  007914  23C7               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1251  007916  0100               	movlb	0	; force () banked
  1252  007918  51CA               	movf	metToucheCombien@j& (0+255),w,b
  1253  00791A  0100               	movlb	0	; force () banked
  1254  00791C  25C6               	addwf	??_metToucheCombien& (0+255),w,b
  1255  00791E  6ED9               	movwf	fsr2l,c
  1256  007920  0100               	movlb	0	; force () banked
  1257  007922  0E00               	movlw	0
  1258  007924  0100               	movlb	0	; force () banked
  1259  007926  21C7               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1260  007928  6EDA               	movwf	fsr2h,c
  1261  00792A  0E02               	movlw	2
  1262  00792C  18DE               	xorwf	postinc2,w,c
  1263  00792E  B4D8               	btfsc	status,2,c
  1264  007930  EF9C  F03C         	goto	u1021
  1265  007934  EF9E  F03C         	goto	u1020
  1266  007938                     u1021:
  1267  007938  EFC4  F03C         	goto	l2054
  1268  00793C                     u1020:
  1269  00793C                     
  1270                           ; BSR set to: 0
  1271                           ;main.c: 152: m_tabMines[i][j] = calculToucheCombien(i, j) + 48;
  1272  00793C  C0C9  F0BA         	movff	metToucheCombien@i,calculToucheCombien@ligne
  1273  007940  0100               	movlb	0	; force () banked
  1274  007942  6BBB               	clrf	(calculToucheCombien@ligne+1)& (0+255),b
  1275  007944  C0CA  F0BC         	movff	metToucheCombien@j,calculToucheCombien@colonne
  1276  007948  0100               	movlb	0	; force () banked
  1277  00794A  6BBD               	clrf	(calculToucheCombien@colonne+1)& (0+255),b
  1278  00794C  ECCF  F03D         	call	_calculToucheCombien	;wreg free
  1279  007950  0100               	movlb	0	; force () banked
  1280  007952  6FC6               	movwf	??_metToucheCombien& (0+255),b
  1281  007954  0E30               	movlw	48
  1282  007956  27C6               	addwf	??_metToucheCombien& (0+255),f,b
  1283  007958  0100               	movlb	0	; force () banked
  1284  00795A  51C9               	movf	metToucheCombien@i& (0+255),w,b
  1285  00795C  0D15               	mullw	21
  1286  00795E  0E60               	movlw	low _m_tabMines
  1287  007960  0100               	movlb	0	; force () banked
  1288  007962  6FC7               	movwf	(??_metToucheCombien+1)& (0+255),b
  1289  007964  0E00               	movlw	high _m_tabMines
  1290  007966  6FC8               	movwf	(??_metToucheCombien+2)& (0+255),b
  1291  007968  50F3               	movf	243,w,c
  1292  00796A  27C7               	addwf	(??_metToucheCombien+1)& (0+255),f,b
  1293  00796C  50F4               	movf	244,w,c
  1294  00796E  23C8               	addwfc	(??_metToucheCombien+2)& (0+255),f,b
  1295  007970  0100               	movlb	0	; force () banked
  1296  007972  51CA               	movf	metToucheCombien@j& (0+255),w,b
  1297  007974  0100               	movlb	0	; force () banked
  1298  007976  25C7               	addwf	(??_metToucheCombien+1)& (0+255),w,b
  1299  007978  6ED9               	movwf	fsr2l,c
  1300  00797A  0100               	movlb	0	; force () banked
  1301  00797C  0E00               	movlw	0
  1302  00797E  0100               	movlb	0	; force () banked
  1303  007980  21C8               	addwfc	(??_metToucheCombien+2)& (0+255),w,b
  1304  007982  6EDA               	movwf	fsr2h,c
  1305  007984  C0C6  FFDF         	movff	??_metToucheCombien,indf2
  1306  007988                     l2054:
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 153: if (m_tabMines[i][j] == '0')
  1310  007988  0100               	movlb	0	; force () banked
  1311  00798A  51C9               	movf	metToucheCombien@i& (0+255),w,b
  1312  00798C  0D15               	mullw	21
  1313  00798E  0E60               	movlw	low _m_tabMines
  1314  007990  0100               	movlb	0	; force () banked
  1315  007992  6FC6               	movwf	??_metToucheCombien& (0+255),b
  1316  007994  0E00               	movlw	high _m_tabMines
  1317  007996  6FC7               	movwf	(??_metToucheCombien+1)& (0+255),b
  1318  007998  50F3               	movf	243,w,c
  1319  00799A  27C6               	addwf	??_metToucheCombien& (0+255),f,b
  1320  00799C  50F4               	movf	244,w,c
  1321  00799E  23C7               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1322  0079A0  0100               	movlb	0	; force () banked
  1323  0079A2  51CA               	movf	metToucheCombien@j& (0+255),w,b
  1324  0079A4  0100               	movlb	0	; force () banked
  1325  0079A6  25C6               	addwf	??_metToucheCombien& (0+255),w,b
  1326  0079A8  6ED9               	movwf	fsr2l,c
  1327  0079AA  0100               	movlb	0	; force () banked
  1328  0079AC  0E00               	movlw	0
  1329  0079AE  0100               	movlb	0	; force () banked
  1330  0079B0  21C7               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1331  0079B2  6EDA               	movwf	fsr2h,c
  1332  0079B4  0E30               	movlw	48
  1333  0079B6  18DE               	xorwf	postinc2,w,c
  1334  0079B8  A4D8               	btfss	status,2,c
  1335  0079BA  EFE1  F03C         	goto	u1031
  1336  0079BE  EFE3  F03C         	goto	u1030
  1337  0079C2                     u1031:
  1338  0079C2  EFFB  F03C         	goto	l2058
  1339  0079C6                     u1030:
  1340  0079C6                     
  1341                           ; BSR set to: 0
  1342                           ;main.c: 154: m_tabMines[i][j] = ' ';
  1343  0079C6  0100               	movlb	0	; force () banked
  1344  0079C8  51C9               	movf	metToucheCombien@i& (0+255),w,b
  1345  0079CA  0D15               	mullw	21
  1346  0079CC  0E60               	movlw	low _m_tabMines
  1347  0079CE  0100               	movlb	0	; force () banked
  1348  0079D0  6FC6               	movwf	??_metToucheCombien& (0+255),b
  1349  0079D2  0E00               	movlw	high _m_tabMines
  1350  0079D4  6FC7               	movwf	(??_metToucheCombien+1)& (0+255),b
  1351  0079D6  50F3               	movf	243,w,c
  1352  0079D8  27C6               	addwf	??_metToucheCombien& (0+255),f,b
  1353  0079DA  50F4               	movf	244,w,c
  1354  0079DC  23C7               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1355  0079DE  0100               	movlb	0	; force () banked
  1356  0079E0  51CA               	movf	metToucheCombien@j& (0+255),w,b
  1357  0079E2  0100               	movlb	0	; force () banked
  1358  0079E4  25C6               	addwf	??_metToucheCombien& (0+255),w,b
  1359  0079E6  6ED9               	movwf	fsr2l,c
  1360  0079E8  0100               	movlb	0	; force () banked
  1361  0079EA  0E00               	movlw	0
  1362  0079EC  0100               	movlb	0	; force () banked
  1363  0079EE  21C7               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1364  0079F0  6EDA               	movwf	fsr2h,c
  1365  0079F2  0E20               	movlw	32
  1366  0079F4  6EDF               	movwf	indf2,c
  1367  0079F6                     l2058:
  1368                           
  1369                           ; BSR set to: 0
  1370  0079F6  0100               	movlb	0	; force () banked
  1371  0079F8  2BCA               	incf	metToucheCombien@j& (0+255),f,b
  1372  0079FA                     
  1373                           ; BSR set to: 0
  1374  0079FA  0E13               	movlw	19
  1375  0079FC  0100               	movlb	0	; force () banked
  1376  0079FE  65CA               	cpfsgt	metToucheCombien@j& (0+255),b
  1377  007A00  EF04  F03D         	goto	u1041
  1378  007A04  EF06  F03D         	goto	u1040
  1379  007A08                     u1041:
  1380  007A08  EF7F  F03C         	goto	l2050
  1381  007A0C                     u1040:
  1382  007A0C                     l2062:
  1383                           
  1384                           ; BSR set to: 0
  1385  007A0C  0100               	movlb	0	; force () banked
  1386  007A0E  2BC9               	incf	metToucheCombien@i& (0+255),f,b
  1387  007A10                     
  1388                           ; BSR set to: 0
  1389  007A10  0E03               	movlw	3
  1390  007A12  0100               	movlb	0	; force () banked
  1391  007A14  65C9               	cpfsgt	metToucheCombien@i& (0+255),b
  1392  007A16  EF0F  F03D         	goto	u1051
  1393  007A1A  EF11  F03D         	goto	u1050
  1394  007A1E                     u1051:
  1395  007A1E  EF71  F03C         	goto	l2044
  1396  007A22                     u1050:
  1397  007A22                     l96:
  1398                           
  1399                           ; BSR set to: 0
  1400  007A22  0012               	return		;funcret
  1401  007A24                     __end_of_metToucheCombien:
  1402                           	opt callstack 0
  1403                           
  1404 ;; *************** function _calculToucheCombien *****************
  1405 ;; Defined at:
  1406 ;;		line 164 in file "main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  ligne           2    6[BANK0 ] int 
  1409 ;;  colonne         2    8[BANK0 ] int 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;  j               2   16[BANK0 ] int 
  1412 ;;  i               2   14[BANK0 ] int 
  1413 ;;  nbMines         1   13[BANK0 ] unsigned char 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      unsigned char 
  1416 ;; Registers used:
  1417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1423 ;;      Params:         0       4       0       0       0       0       0
  1424 ;;      Locals:         0       5       0       0       0       0       0
  1425 ;;      Temps:          0       3       0       0       0       0       0
  1426 ;;      Totals:         0      12       0       0       0       0       0
  1427 ;;Total ram usage:       12 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    1
  1430 ;; This function calls:
  1431 ;;		___wmul
  1432 ;; This function is called by:
  1433 ;;		_metToucheCombien
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text6
  1438  007B9E                     __ptext6:
  1439                           	opt callstack 0
  1440  007B9E                     _calculToucheCombien:
  1441                           	opt callstack 28
  1442  007B9E                     
  1443                           ;main.c: 166: int i = ligne - 1;
  1444  007B9E  0EFF               	movlw	255
  1445  007BA0  0100               	movlb	0	; force () banked
  1446  007BA2  25BA               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1447  007BA4  0100               	movlb	0	; force () banked
  1448  007BA6  6FC2               	movwf	calculToucheCombien@i& (0+255),b
  1449  007BA8  0EFF               	movlw	255
  1450  007BAA  0100               	movlb	0	; force () banked
  1451  007BAC  21BB               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1452  007BAE  0100               	movlb	0	; force () banked
  1453  007BB0  6FC3               	movwf	(calculToucheCombien@i+1)& (0+255),b
  1454                           
  1455                           ;main.c: 167: int j = colonne - 1;
  1456  007BB2  0EFF               	movlw	255
  1457  007BB4  0100               	movlb	0	; force () banked
  1458  007BB6  25BC               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1459  007BB8  0100               	movlb	0	; force () banked
  1460  007BBA  6FC4               	movwf	calculToucheCombien@j& (0+255),b
  1461  007BBC  0EFF               	movlw	255
  1462  007BBE  0100               	movlb	0	; force () banked
  1463  007BC0  21BD               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1464  007BC2  0100               	movlb	0	; force () banked
  1465  007BC4  6FC5               	movwf	(calculToucheCombien@j+1)& (0+255),b
  1466  007BC6                     
  1467                           ; BSR set to: 0
  1468                           ;main.c: 168: char nbMines = 0;
  1469  007BC6  0E00               	movlw	0
  1470  007BC8  0100               	movlb	0	; force () banked
  1471  007BCA  6FC1               	movwf	calculToucheCombien@nbMines& (0+255),b
  1472  007BCC                     
  1473                           ; BSR set to: 0
  1474                           ;main.c: 170: if (i < 0)
  1475  007BCC  0100               	movlb	0	; force () banked
  1476  007BCE  BFC3               	btfsc	(calculToucheCombien@i+1)& (0+255),7,b
  1477  007BD0  EFEE  F03D         	goto	u720
  1478  007BD4  EFEC  F03D         	goto	u721
  1479  007BD8                     u721:
  1480  007BD8  EFF3  F03D         	goto	l1816
  1481  007BDC                     u720:
  1482  007BDC                     
  1483                           ; BSR set to: 0
  1484                           ;main.c: 171: i = 0;
  1485  007BDC  0E00               	movlw	0
  1486  007BDE  0100               	movlb	0	; force () banked
  1487  007BE0  6FC3               	movwf	(calculToucheCombien@i+1)& (0+255),b
  1488  007BE2  0E00               	movlw	0
  1489  007BE4  6FC2               	movwf	calculToucheCombien@i& (0+255),b
  1490  007BE6                     l1816:
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 172: if (j < 0)
  1494  007BE6  0100               	movlb	0	; force () banked
  1495  007BE8  BFC5               	btfsc	(calculToucheCombien@j+1)& (0+255),7,b
  1496  007BEA  EFFB  F03D         	goto	u730
  1497  007BEE  EFF9  F03D         	goto	u731
  1498  007BF2                     u731:
  1499  007BF2  EF71  F03E         	goto	l1832
  1500  007BF6                     u730:
  1501  007BF6                     
  1502                           ; BSR set to: 0
  1503                           ;main.c: 173: j = 0;
  1504  007BF6  0E00               	movlw	0
  1505  007BF8  0100               	movlb	0	; force () banked
  1506  007BFA  6FC5               	movwf	(calculToucheCombien@j+1)& (0+255),b
  1507  007BFC  0E00               	movlw	0
  1508  007BFE  6FC4               	movwf	calculToucheCombien@j& (0+255),b
  1509  007C00  EF71  F03E         	goto	l1832
  1510  007C04                     l1820:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;main.c: 176: for (j = j = colonne - 1; (j <= (colonne + 1))&&(j < 20); j++) {
  1514  007C04  0EFF               	movlw	255
  1515  007C06  0100               	movlb	0	; force () banked
  1516  007C08  25BC               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1517  007C0A  0100               	movlb	0	; force () banked
  1518  007C0C  6FC4               	movwf	calculToucheCombien@j& (0+255),b
  1519  007C0E  0EFF               	movlw	255
  1520  007C10  0100               	movlb	0	; force () banked
  1521  007C12  21BD               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1522  007C14  0100               	movlb	0	; force () banked
  1523  007C16  6FC5               	movwf	(calculToucheCombien@j+1)& (0+255),b
  1524  007C18  C0C4  F0C4         	movff	calculToucheCombien@j,calculToucheCombien@j
  1525  007C1C  C0C5  F0C5         	movff	calculToucheCombien@j+1,calculToucheCombien@j+1
  1526  007C20  EF42  F03E         	goto	l1826
  1527  007C24                     l1822:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;main.c: 177: if (m_tabMines[i][j] == 2)
  1531  007C24  C0C2  F0B4         	movff	calculToucheCombien@i,___wmul@multiplier
  1532  007C28  C0C3  F0B5         	movff	calculToucheCombien@i+1,___wmul@multiplier+1
  1533  007C2C  0E00               	movlw	0
  1534  007C2E  0100               	movlb	0	; force () banked
  1535  007C30  6FB7               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1536  007C32  0E15               	movlw	21
  1537  007C34  6FB6               	movwf	___wmul@multiplicand& (0+255),b
  1538  007C36  EC30  F038         	call	___wmul	;wreg free
  1539  007C3A  0E60               	movlw	low _m_tabMines
  1540  007C3C  0100               	movlb	0	; force () banked
  1541  007C3E  6FBE               	movwf	??_calculToucheCombien& (0+255),b
  1542  007C40  0E00               	movlw	high _m_tabMines
  1543  007C42  6FBF               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1544  007C44  0100               	movlb	0	; force () banked
  1545  007C46  51B4               	movf	?___wmul& (0+255),w,b
  1546  007C48  0100               	movlb	0	; force () banked
  1547  007C4A  27BE               	addwf	??_calculToucheCombien& (0+255),f,b
  1548  007C4C  0100               	movlb	0	; force () banked
  1549  007C4E  51B5               	movf	(?___wmul+1)& (0+255),w,b
  1550  007C50  0100               	movlb	0	; force () banked
  1551  007C52  23BF               	addwfc	(??_calculToucheCombien+1)& (0+255),f,b
  1552  007C54  0100               	movlb	0	; force () banked
  1553  007C56  51C4               	movf	calculToucheCombien@j& (0+255),w,b
  1554  007C58  0100               	movlb	0	; force () banked
  1555  007C5A  25BE               	addwf	??_calculToucheCombien& (0+255),w,b
  1556  007C5C  6ED9               	movwf	fsr2l,c
  1557  007C5E  0100               	movlb	0	; force () banked
  1558  007C60  51C5               	movf	(calculToucheCombien@j+1)& (0+255),w,b
  1559  007C62  0100               	movlb	0	; force () banked
  1560  007C64  21BF               	addwfc	(??_calculToucheCombien+1)& (0+255),w,b
  1561  007C66  6EDA               	movwf	fsr2h,c
  1562  007C68  0E02               	movlw	2
  1563  007C6A  18DE               	xorwf	postinc2,w,c
  1564  007C6C  A4D8               	btfss	status,2,c
  1565  007C6E  EF3B  F03E         	goto	u741
  1566  007C72  EF3D  F03E         	goto	u740
  1567  007C76                     u741:
  1568  007C76  EF3F  F03E         	goto	l105
  1569  007C7A                     u740:
  1570  007C7A                     
  1571                           ; BSR set to: 0
  1572                           ;main.c: 178: nbMines++;
  1573  007C7A  0100               	movlb	0	; force () banked
  1574  007C7C  2BC1               	incf	calculToucheCombien@nbMines& (0+255),f,b
  1575  007C7E                     l105:
  1576                           
  1577                           ; BSR set to: 0
  1578  007C7E  0100               	movlb	0	; force () banked
  1579  007C80  4BC4               	infsnz	calculToucheCombien@j& (0+255),f,b
  1580  007C82  2BC5               	incf	(calculToucheCombien@j+1)& (0+255),f,b
  1581  007C84                     l1826:
  1582                           
  1583                           ; BSR set to: 0
  1584  007C84  0E01               	movlw	1
  1585  007C86  0100               	movlb	0	; force () banked
  1586  007C88  25BC               	addwf	calculToucheCombien@colonne& (0+255),w,b
  1587  007C8A  0100               	movlb	0	; force () banked
  1588  007C8C  6FBE               	movwf	??_calculToucheCombien& (0+255),b
  1589  007C8E  0E00               	movlw	0
  1590  007C90  0100               	movlb	0	; force () banked
  1591  007C92  21BD               	addwfc	(calculToucheCombien@colonne+1)& (0+255),w,b
  1592  007C94  0100               	movlb	0	; force () banked
  1593  007C96  6FBF               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1594  007C98  0100               	movlb	0	; force () banked
  1595  007C9A  51C4               	movf	calculToucheCombien@j& (0+255),w,b
  1596  007C9C  0100               	movlb	0	; force () banked
  1597  007C9E  5DBE               	subwf	??_calculToucheCombien& (0+255),w,b
  1598  007CA0  51BF               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1599  007CA2  0A80               	xorlw	128
  1600  007CA4  6FC0               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1601  007CA6  0100               	movlb	0	; force () banked
  1602  007CA8  51C5               	movf	(calculToucheCombien@j+1)& (0+255),w,b
  1603  007CAA  0A80               	xorlw	128
  1604  007CAC  0100               	movlb	0	; force () banked
  1605  007CAE  59C0               	subwfb	(??_calculToucheCombien+2)& (0+255),w,b
  1606  007CB0  A0D8               	btfss	status,0,c
  1607  007CB2  EF5D  F03E         	goto	u751
  1608  007CB6  EF5F  F03E         	goto	u750
  1609  007CBA                     u751:
  1610  007CBA  EF6E  F03E         	goto	l1830
  1611  007CBE                     u750:
  1612  007CBE                     
  1613                           ; BSR set to: 0
  1614  007CBE  0100               	movlb	0	; force () banked
  1615  007CC0  BFC5               	btfsc	(calculToucheCombien@j+1)& (0+255),7,b
  1616  007CC2  EF6C  F03E         	goto	u761
  1617  007CC6  51C5               	movf	(calculToucheCombien@j+1)& (0+255),w,b
  1618  007CC8  E109               	bnz	u760
  1619  007CCA  0E14               	movlw	20
  1620  007CCC  5DC4               	subwf	calculToucheCombien@j& (0+255),w,b
  1621  007CCE  A0D8               	btfss	status,0,c
  1622  007CD0  EF6C  F03E         	goto	u761
  1623  007CD4  EF6E  F03E         	goto	u760
  1624  007CD8                     u761:
  1625  007CD8  EF12  F03E         	goto	l1822
  1626  007CDC                     u760:
  1627  007CDC                     l1830:
  1628                           
  1629                           ; BSR set to: 0
  1630  007CDC  0100               	movlb	0	; force () banked
  1631  007CDE  4BC2               	infsnz	calculToucheCombien@i& (0+255),f,b
  1632  007CE0  2BC3               	incf	(calculToucheCombien@i+1)& (0+255),f,b
  1633  007CE2                     l1832:
  1634                           
  1635                           ; BSR set to: 0
  1636  007CE2  0E01               	movlw	1
  1637  007CE4  0100               	movlb	0	; force () banked
  1638  007CE6  25BA               	addwf	calculToucheCombien@ligne& (0+255),w,b
  1639  007CE8  0100               	movlb	0	; force () banked
  1640  007CEA  6FBE               	movwf	??_calculToucheCombien& (0+255),b
  1641  007CEC  0E00               	movlw	0
  1642  007CEE  0100               	movlb	0	; force () banked
  1643  007CF0  21BB               	addwfc	(calculToucheCombien@ligne+1)& (0+255),w,b
  1644  007CF2  0100               	movlb	0	; force () banked
  1645  007CF4  6FBF               	movwf	(??_calculToucheCombien+1)& (0+255),b
  1646  007CF6  0100               	movlb	0	; force () banked
  1647  007CF8  51C2               	movf	calculToucheCombien@i& (0+255),w,b
  1648  007CFA  0100               	movlb	0	; force () banked
  1649  007CFC  5DBE               	subwf	??_calculToucheCombien& (0+255),w,b
  1650  007CFE  51BF               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1651  007D00  0A80               	xorlw	128
  1652  007D02  6FC0               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1653  007D04  0100               	movlb	0	; force () banked
  1654  007D06  51C3               	movf	(calculToucheCombien@i+1)& (0+255),w,b
  1655  007D08  0A80               	xorlw	128
  1656  007D0A  0100               	movlb	0	; force () banked
  1657  007D0C  59C0               	subwfb	(??_calculToucheCombien+2)& (0+255),w,b
  1658  007D0E  A0D8               	btfss	status,0,c
  1659  007D10  EF8C  F03E         	goto	u771
  1660  007D14  EF8E  F03E         	goto	u770
  1661  007D18                     u771:
  1662  007D18  EF9D  F03E         	goto	l1836
  1663  007D1C                     u770:
  1664  007D1C                     
  1665                           ; BSR set to: 0
  1666  007D1C  0100               	movlb	0	; force () banked
  1667  007D1E  BFC3               	btfsc	(calculToucheCombien@i+1)& (0+255),7,b
  1668  007D20  EF9B  F03E         	goto	u781
  1669  007D24  51C3               	movf	(calculToucheCombien@i+1)& (0+255),w,b
  1670  007D26  E109               	bnz	u780
  1671  007D28  0E04               	movlw	4
  1672  007D2A  5DC2               	subwf	calculToucheCombien@i& (0+255),w,b
  1673  007D2C  A0D8               	btfss	status,0,c
  1674  007D2E  EF9B  F03E         	goto	u781
  1675  007D32  EF9D  F03E         	goto	u780
  1676  007D36                     u781:
  1677  007D36  EF02  F03E         	goto	l1820
  1678  007D3A                     u780:
  1679  007D3A                     l1836:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;main.c: 179: };main.c: 180: };main.c: 181: return nbMines;
  1683  007D3A  0100               	movlb	0	; force () banked
  1684  007D3C  51C1               	movf	calculToucheCombien@nbMines& (0+255),w,b
  1685  007D3E                     
  1686                           ; BSR set to: 0
  1687  007D3E  0012               	return		;funcret
  1688  007D40                     __end_of_calculToucheCombien:
  1689                           	opt callstack 0
  1690                           
  1691 ;; *************** function ___wmul *****************
  1692 ;; Defined at:
  1693 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1696 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;  product         2    4[BANK0 ] unsigned int 
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  2    0[BANK0 ] unsigned int 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0, prodl, prodh
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1708 ;;      Params:         0       4       0       0       0       0       0
  1709 ;;      Locals:         0       2       0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0       0       0
  1711 ;;      Totals:         0       6       0       0       0       0       0
  1712 ;;Total ram usage:        6 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_calculToucheCombien
  1718 ;;		_enleveTuilesAutour
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text7
  1723  007060                     __ptext7:
  1724                           	opt callstack 0
  1725  007060                     ___wmul:
  1726                           	opt callstack 28
  1727  007060  0100               	movlb	0	; () banked
  1728  007062  51B4               	movf	___wmul@multiplier& (0+255),w,b
  1729  007064  03B6               	mulwf	___wmul@multiplicand& (0+255),b
  1730  007066  CFF3 F0B8          	movff	prodl,___wmul@product
  1731  00706A  CFF4 F0B9          	movff	prodh,___wmul@product+1
  1732  00706E  51B4               	movf	___wmul@multiplier& (0+255),w,b
  1733  007070  03B7               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1734  007072  50F3               	movf	243,w,c
  1735  007074  27B9               	addwf	(___wmul@product+1)& (0+255),f,b
  1736  007076  51B5               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1737  007078  03B6               	mulwf	___wmul@multiplicand& (0+255),b
  1738  00707A  50F3               	movf	243,w,c
  1739  00707C  27B9               	addwf	(___wmul@product+1)& (0+255),f,b
  1740  00707E                     
  1741                           ; BSR set to: 0
  1742  00707E  C0B8  F0B4         	movff	___wmul@product,?___wmul
  1743  007082  C0B9  F0B5         	movff	___wmul@product+1,?___wmul+1
  1744  007086                     
  1745                           ; BSR set to: 0
  1746  007086  0012               	return		;funcret
  1747  007088                     __end_of___wmul:
  1748                           	opt callstack 0
  1749                           
  1750 ;; *************** function _lcd_init *****************
  1751 ;; Defined at:
  1752 ;;		line 258 in file "Lcd4Lignes.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1766 ;;      Params:         0       0       0       0       0       0       0
  1767 ;;      Locals:         0       0       0       0       0       0       0
  1768 ;;      Temps:          0       0       0       0       0       0       0
  1769 ;;      Totals:         0       0       0       0       0       0       0
  1770 ;;Total ram usage:        0 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; Hardware stack levels required when called:    5
  1773 ;; This function calls:
  1774 ;;		_lcd_initCGRam
  1775 ;;		_lcd_resetSequence
  1776 ;;		_lcd_wrCom
  1777 ;; This function is called by:
  1778 ;;		_main
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text8
  1783  007038                     __ptext8:
  1784                           	opt callstack 0
  1785  007038                     _lcd_init:
  1786                           	opt callstack 25
  1787  007038                     
  1788                           ;Lcd4Lignes.c: 261: lcd_resetSequence();
  1789  007038  ECDB  F039         	call	_lcd_resetSequence	;wreg free
  1790                           
  1791                           ;Lcd4Lignes.c: 262: lcd_wrCom(0x28);
  1792  00703C  0E28               	movlw	40
  1793  00703E  EC10  F03A         	call	_lcd_wrCom
  1794                           
  1795                           ;Lcd4Lignes.c: 263: lcd_wrCom(0x0F);
  1796  007042  0E0F               	movlw	15
  1797  007044  EC10  F03A         	call	_lcd_wrCom
  1798                           
  1799                           ;Lcd4Lignes.c: 264: lcd_wrCom(0x01);
  1800  007048  0E01               	movlw	1
  1801  00704A  EC10  F03A         	call	_lcd_wrCom
  1802                           
  1803                           ;Lcd4Lignes.c: 265: lcd_wrCom(0x06);
  1804  00704E  0E06               	movlw	6
  1805  007050  EC10  F03A         	call	_lcd_wrCom
  1806                           
  1807                           ;Lcd4Lignes.c: 266: lcd_wrCom(0x80);
  1808  007054  0E80               	movlw	128
  1809  007056  EC10  F03A         	call	_lcd_wrCom
  1810  00705A                     
  1811                           ;Lcd4Lignes.c: 267: lcd_initCGRam();
  1812  00705A  ECB5  F03A         	call	_lcd_initCGRam	;wreg free
  1813  00705E  0012               	return		;funcret
  1814  007060                     __end_of_lcd_init:
  1815                           	opt callstack 0
  1816                           
  1817 ;; *************** function _lcd_resetSequence *****************
  1818 ;; Defined at:
  1819 ;;		line 221 in file "Lcd4Lignes.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		wreg, status,2, status,0, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1833 ;;      Params:         0       0       0       0       0       0       0
  1834 ;;      Locals:         0       0       0       0       0       0       0
  1835 ;;      Temps:          0       1       0       0       0       0       0
  1836 ;;      Totals:         0       1       0       0       0       0       0
  1837 ;;Total ram usage:        1 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    1
  1840 ;; This function calls:
  1841 ;;		_lcd_ecrireDonnees
  1842 ;;		_lcd_strobeEnableBit
  1843 ;; This function is called by:
  1844 ;;		_lcd_init
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text9
  1849  0073B6                     __ptext9:
  1850                           	opt callstack 0
  1851  0073B6                     _lcd_resetSequence:
  1852                           	opt callstack 28
  1853  0073B6                     
  1854                           ;Lcd4Lignes.c: 226: TRISD = 0b00000000;
  1855  0073B6  0E00               	movlw	0
  1856  0073B8  6E95               	movwf	149,c	;volatile
  1857  0073BA                     
  1858                           ;Lcd4Lignes.c: 228: _delay((unsigned long)((40)*(1000000/4000.0)));
  1859  0073BA  0E0D               	movlw	13
  1860  0073BC  0100               	movlb	0	; force () banked
  1861  0073BE  6FB6               	movwf	??_lcd_resetSequence& (0+255),b
  1862  0073C0  0EFB               	movlw	251
  1863  0073C2                     u1287:
  1864  0073C2  2EE8               	decfsz	wreg,f,c
  1865  0073C4  D7FE               	bra	u1287
  1866  0073C6  2FB6               	decfsz	??_lcd_resetSequence& (0+255),f,b
  1867  0073C8  D7FC               	bra	u1287
  1868  0073CA  F000 F000          	nop2	
  1869  0073CE                     
  1870                           ;Lcd4Lignes.c: 229: PORTAbits.RA0 = 0;
  1871  0073CE  9080               	bcf	128,0,c	;volatile
  1872  0073D0                     
  1873                           ;Lcd4Lignes.c: 230: PORTAbits.RA1 = 0;
  1874  0073D0  9280               	bcf	128,1,c	;volatile
  1875  0073D2                     
  1876                           ;Lcd4Lignes.c: 232: lcd_ecrireDonnees(0x03);
  1877  0073D2  0E03               	movlw	3
  1878  0073D4  EC0E  F038         	call	_lcd_ecrireDonnees
  1879  0073D8                     
  1880                           ;Lcd4Lignes.c: 233: lcd_strobeEnableBit();
  1881  0073D8  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  1882  0073DC                     
  1883                           ;Lcd4Lignes.c: 234: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1884  0073DC  0E03               	movlw	3
  1885  0073DE                     u1297:
  1886  0073DE  2EE8               	decfsz	wreg,f,c
  1887  0073E0  D7FE               	bra	u1297
  1888  0073E2  F000               	nop	
  1889  0073E4                     
  1890                           ;Lcd4Lignes.c: 237: lcd_ecrireDonnees(0x03);
  1891  0073E4  0E03               	movlw	3
  1892  0073E6  EC0E  F038         	call	_lcd_ecrireDonnees
  1893  0073EA                     
  1894                           ;Lcd4Lignes.c: 238: lcd_strobeEnableBit();
  1895  0073EA  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  1896  0073EE                     
  1897                           ;Lcd4Lignes.c: 239: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1898  0073EE  0E03               	movlw	3
  1899  0073F0                     u1307:
  1900  0073F0  2EE8               	decfsz	wreg,f,c
  1901  0073F2  D7FE               	bra	u1307
  1902  0073F4  F000               	nop	
  1903  0073F6                     
  1904                           ;Lcd4Lignes.c: 241: lcd_ecrireDonnees(0x03);
  1905  0073F6  0E03               	movlw	3
  1906  0073F8  EC0E  F038         	call	_lcd_ecrireDonnees
  1907  0073FC                     
  1908                           ;Lcd4Lignes.c: 242: lcd_strobeEnableBit();
  1909  0073FC  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  1910  007400                     
  1911                           ;Lcd4Lignes.c: 243: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1912  007400  0E03               	movlw	3
  1913  007402                     u1317:
  1914  007402  2EE8               	decfsz	wreg,f,c
  1915  007404  D7FE               	bra	u1317
  1916  007406  F000               	nop	
  1917  007408                     
  1918                           ;Lcd4Lignes.c: 245: lcd_ecrireDonnees(0x02);
  1919  007408  0E02               	movlw	2
  1920  00740A  EC0E  F038         	call	_lcd_ecrireDonnees
  1921  00740E                     
  1922                           ;Lcd4Lignes.c: 246: lcd_strobeEnableBit();
  1923  00740E  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  1924  007412                     
  1925                           ;Lcd4Lignes.c: 247: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1926  007412  0E03               	movlw	3
  1927  007414                     u1327:
  1928  007414  2EE8               	decfsz	wreg,f,c
  1929  007416  D7FE               	bra	u1327
  1930  007418  F000               	nop	
  1931  00741A                     
  1932                           ;Lcd4Lignes.c: 249: TRISD = 0b00001111;
  1933  00741A  0E0F               	movlw	15
  1934  00741C  6E95               	movwf	149,c	;volatile
  1935  00741E  0012               	return		;funcret
  1936  007420                     __end_of_lcd_resetSequence:
  1937                           	opt callstack 0
  1938                           
  1939 ;; *************** function _lcd_initCGRam *****************
  1940 ;; Defined at:
  1941 ;;		line 417 in file "Lcd4Lignes.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  j               1    6[BANK0 ] unsigned char 
  1946 ;;  i               1    5[BANK0 ] unsigned char 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1956 ;;      Params:         0       0       0       0       0       0       0
  1957 ;;      Locals:         0       2       0       0       0       0       0
  1958 ;;      Temps:          0       2       0       0       0       0       0
  1959 ;;      Totals:         0       4       0       0       0       0       0
  1960 ;;Total ram usage:        4 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    4
  1963 ;; This function calls:
  1964 ;;		_lcd_curseurHome
  1965 ;;		_lcd_wrCom
  1966 ;;		_lcd_wrData
  1967 ;; This function is called by:
  1968 ;;		_lcd_init
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text10
  1973  00756A                     __ptext10:
  1974                           	opt callstack 0
  1975  00756A                     _lcd_initCGRam:
  1976                           	opt callstack 25
  1977  00756A                     
  1978                           ;Lcd4Lignes.c: 419: char i,j;;Lcd4Lignes.c: 421: lcd_wrCom(0x40);
  1979  00756A  0E40               	movlw	64
  1980  00756C  EC10  F03A         	call	_lcd_wrCom
  1981  007570                     
  1982                           ;Lcd4Lignes.c: 422: for(i=0;i<8;i++)
  1983  007570  0E00               	movlw	0
  1984  007572  0100               	movlb	0	; force () banked
  1985  007574  6FB9               	movwf	lcd_initCGRam@i& (0+255),b
  1986  007576                     
  1987                           ; BSR set to: 0
  1988  007576  0E07               	movlw	7
  1989  007578  0100               	movlb	0	; force () banked
  1990  00757A  65B9               	cpfsgt	lcd_initCGRam@i& (0+255),b
  1991  00757C  EFC2  F03A         	goto	u801
  1992  007580  EFC4  F03A         	goto	u800
  1993  007584                     u801:
  1994  007584  EFC6  F03A         	goto	l1904
  1995  007588                     u800:
  1996  007588  EF03  F03B         	goto	l1920
  1997  00758C                     l1904:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;Lcd4Lignes.c: 423: {;Lcd4Lignes.c: 424: for(j=0;j<8;j++)
  2001  00758C  0E00               	movlw	0
  2002  00758E  0100               	movlb	0	; force () banked
  2003  007590  6FBA               	movwf	lcd_initCGRam@j& (0+255),b
  2004  007592                     
  2005                           ; BSR set to: 0
  2006  007592  0E07               	movlw	7
  2007  007594  0100               	movlb	0	; force () banked
  2008  007596  65BA               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2009  007598  EFD0  F03A         	goto	u811
  2010  00759C  EFD2  F03A         	goto	u810
  2011  0075A0                     u811:
  2012  0075A0  EFD4  F03A         	goto	l1910
  2013  0075A4                     u810:
  2014  0075A4  EFF8  F03A         	goto	l1916
  2015  0075A8                     l1910:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;Lcd4Lignes.c: 425: lcd_wrData(matCGRAM[i][j]);
  2019  0075A8  0100               	movlb	0	; force () banked
  2020  0075AA  51B9               	movf	lcd_initCGRam@i& (0+255),w,b
  2021  0075AC  0D08               	mullw	8
  2022  0075AE  0E54               	movlw	low _matCGRAM
  2023  0075B0  0100               	movlb	0	; force () banked
  2024  0075B2  6FB7               	movwf	??_lcd_initCGRam& (0+255),b
  2025  0075B4  0E01               	movlw	high _matCGRAM
  2026  0075B6  6FB8               	movwf	(??_lcd_initCGRam+1)& (0+255),b
  2027  0075B8  50F3               	movf	243,w,c
  2028  0075BA  27B7               	addwf	??_lcd_initCGRam& (0+255),f,b
  2029  0075BC  50F4               	movf	244,w,c
  2030  0075BE  23B8               	addwfc	(??_lcd_initCGRam+1)& (0+255),f,b
  2031  0075C0  0100               	movlb	0	; force () banked
  2032  0075C2  51BA               	movf	lcd_initCGRam@j& (0+255),w,b
  2033  0075C4  0100               	movlb	0	; force () banked
  2034  0075C6  25B7               	addwf	??_lcd_initCGRam& (0+255),w,b
  2035  0075C8  6ED9               	movwf	fsr2l,c
  2036  0075CA  0100               	movlb	0	; force () banked
  2037  0075CC  0E00               	movlw	0
  2038  0075CE  0100               	movlb	0	; force () banked
  2039  0075D0  21B8               	addwfc	(??_lcd_initCGRam+1)& (0+255),w,b
  2040  0075D2  6EDA               	movwf	fsr2h,c
  2041  0075D4  50DF               	movf	indf2,w,c
  2042  0075D6  EC5A  F038         	call	_lcd_wrData
  2043  0075DA  0100               	movlb	0	; force () banked
  2044  0075DC  2BBA               	incf	lcd_initCGRam@j& (0+255),f,b
  2045  0075DE                     
  2046                           ; BSR set to: 0
  2047  0075DE  0E07               	movlw	7
  2048  0075E0  0100               	movlb	0	; force () banked
  2049  0075E2  65BA               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2050  0075E4  EFF6  F03A         	goto	u821
  2051  0075E8  EFF8  F03A         	goto	u820
  2052  0075EC                     u821:
  2053  0075EC  EFD4  F03A         	goto	l1910
  2054  0075F0                     u820:
  2055  0075F0                     l1916:
  2056                           
  2057                           ; BSR set to: 0
  2058  0075F0  0100               	movlb	0	; force () banked
  2059  0075F2  2BB9               	incf	lcd_initCGRam@i& (0+255),f,b
  2060  0075F4                     
  2061                           ; BSR set to: 0
  2062  0075F4  0E07               	movlw	7
  2063  0075F6  0100               	movlb	0	; force () banked
  2064  0075F8  65B9               	cpfsgt	lcd_initCGRam@i& (0+255),b
  2065  0075FA  EF01  F03B         	goto	u831
  2066  0075FE  EF03  F03B         	goto	u830
  2067  007602                     u831:
  2068  007602  EFC6  F03A         	goto	l1904
  2069  007606                     u830:
  2070  007606                     l1920:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;Lcd4Lignes.c: 426: };Lcd4Lignes.c: 427: lcd_curseurHome();
  2074  007606  EC02  F038         	call	_lcd_curseurHome	;wreg free
  2075  00760A  0012               	return		;funcret
  2076  00760C                     __end_of_lcd_initCGRam:
  2077                           	opt callstack 0
  2078                           
  2079 ;; *************** function _lcd_curseurHome *****************
  2080 ;; Defined at:
  2081 ;;		line 288 in file "Lcd4Lignes.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2, status,0, cstack
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2095 ;;      Params:         0       0       0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0
  2098 ;;      Totals:         0       0       0       0       0       0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    3
  2102 ;; This function calls:
  2103 ;;		_lcd_wrCom
  2104 ;; This function is called by:
  2105 ;;		_lcd_initCGRam
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text11
  2110  007004                     __ptext11:
  2111                           	opt callstack 0
  2112  007004                     _lcd_curseurHome:
  2113                           	opt callstack 25
  2114  007004                     
  2115                           ;Lcd4Lignes.c: 290: lcd_wrCom(0x02);
  2116  007004  0E02               	movlw	2
  2117  007006  EC10  F03A         	call	_lcd_wrCom
  2118  00700A  0012               	return		;funcret
  2119  00700C                     __end_of_lcd_curseurHome:
  2120                           	opt callstack 0
  2121                           
  2122 ;; *************** function _initialisation *****************
  2123 ;; Defined at:
  2124 ;;		line 74 in file "main.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2138 ;;      Params:         0       0       0       0       0       0       0
  2139 ;;      Locals:         0       0       0       0       0       0       0
  2140 ;;      Temps:          0       0       0       0       0       0       0
  2141 ;;      Totals:         0       0       0       0       0       0       0
  2142 ;;Total ram usage:        0 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    1
  2145 ;; This function calls:
  2146 ;;		_srand
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text12
  2153  0070E8                     __ptext12:
  2154                           	opt callstack 0
  2155  0070E8                     _initialisation:
  2156                           	opt callstack 29
  2157  0070E8                     
  2158                           ;main.c: 76: TRISD = 0;
  2159  0070E8  0E00               	movlw	0
  2160  0070EA  6E95               	movwf	149,c	;volatile
  2161                           
  2162                           ;main.c: 77: ANSELH = 0;
  2163  0070EC  0E00               	movlw	0
  2164  0070EE  6E7F               	movwf	127,c	;volatile
  2165  0070F0                     
  2166                           ;main.c: 78: TRISB = 0xFF;
  2167  0070F0  6893               	setf	147,c	;volatile
  2168                           
  2169                           ;main.c: 79: ANSEL = 0;
  2170  0070F2  0E00               	movlw	0
  2171  0070F4  6E7E               	movwf	126,c	;volatile
  2172                           
  2173                           ;main.c: 80: TRISA = 0;
  2174  0070F6  0E00               	movlw	0
  2175  0070F8  6E92               	movwf	146,c	;volatile
  2176  0070FA                     
  2177                           ;main.c: 84: T1CONbits.TMR1ON = 1;
  2178  0070FA  80CD               	bsf	205,0,c	;volatile
  2179  0070FC                     
  2180                           ;main.c: 85: srand(TMR1);
  2181  0070FC  CFCE F0B4          	movff	4046,srand@x	;volatile
  2182  007100  CFCF F0B5          	movff	4047,srand@x+1	;volatile
  2183  007104  EC06  F038         	call	_srand	;wreg free
  2184  007108                     
  2185                           ;main.c: 87: ANSELbits.ANS7 = 1;
  2186  007108  8E7E               	bsf	126,7,c	;volatile
  2187  00710A                     
  2188                           ;main.c: 88: ADCON0bits.ADON = 1;
  2189  00710A  80C2               	bsf	194,0,c	;volatile
  2190  00710C                     
  2191                           ;main.c: 89: ADCON1 = 0;
  2192  00710C  0E00               	movlw	0
  2193  00710E  6EC1               	movwf	193,c	;volatile
  2194  007110                     
  2195                           ;main.c: 90: ADCON2bits.ADFM = 0;
  2196  007110  9EC0               	bcf	192,7,c	;volatile
  2197  007112                     
  2198                           ;main.c: 91: ADCON2bits.ACQT = 0;
  2199  007112  0EC7               	movlw	-57
  2200  007114  16C0               	andwf	192,f,c	;volatile
  2201  007116                     
  2202                           ;main.c: 92: ADCON2bits.ADCS = 0;
  2203  007116  0EF8               	movlw	-8
  2204  007118  16C0               	andwf	192,f,c	;volatile
  2205  00711A  0012               	return		;funcret
  2206  00711C                     __end_of_initialisation:
  2207                           	opt callstack 0
  2208                           
  2209 ;; *************** function _srand *****************
  2210 ;; Defined at:
  2211 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  x               2    0[BANK0 ] unsigned int 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		status,2
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2225 ;;      Params:         0       2       0       0       0       0       0
  2226 ;;      Locals:         0       0       0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0
  2228 ;;      Totals:         0       2       0       0       0       0       0
  2229 ;;Total ram usage:        2 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; This function calls:
  2232 ;;		Nothing
  2233 ;; This function is called by:
  2234 ;;		_initialisation
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text13
  2239  00700C                     __ptext13:
  2240                           	opt callstack 0
  2241  00700C                     _srand:
  2242                           	opt callstack 29
  2243  00700C  C0B4  F0D6         	movff	srand@x,_randx
  2244  007010  C0B5  F0D7         	movff	srand@x+1,_randx+1
  2245  007014  0100               	movlb	0	; () banked
  2246  007016  6BD8               	clrf	(_randx+2)& (0+255),b
  2247  007018  6BD9               	clrf	(_randx+3)& (0+255),b
  2248  00701A                     
  2249                           ; BSR set to: 0
  2250  00701A  0012               	return		;funcret
  2251  00701C                     __end_of_srand:
  2252                           	opt callstack 0
  2253                           
  2254 ;; *************** function _initTabVue *****************
  2255 ;; Defined at:
  2256 ;;		line 102 in file "main.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;		None
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  j               1    2[BANK0 ] unsigned char 
  2261 ;;  i               1    3[BANK0 ] unsigned char 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2271 ;;      Params:         0       0       0       0       0       0       0
  2272 ;;      Locals:         0       2       0       0       0       0       0
  2273 ;;      Temps:          0       2       0       0       0       0       0
  2274 ;;      Totals:         0       4       0       0       0       0       0
  2275 ;;Total ram usage:        4 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_main
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           	psect	text14
  2285  00760C                     __ptext14:
  2286                           	opt callstack 0
  2287  00760C                     _initTabVue:
  2288                           	opt callstack 30
  2289  00760C                     
  2290                           ;main.c: 104: for (char i = 0; i < 4; i++) {
  2291  00760C  0E00               	movlw	0
  2292  00760E  0100               	movlb	0	; force () banked
  2293  007610  6FB7               	movwf	initTabVue@i& (0+255),b
  2294  007612                     
  2295                           ; BSR set to: 0
  2296  007612  0E03               	movlw	3
  2297  007614  0100               	movlb	0	; force () banked
  2298  007616  65B7               	cpfsgt	initTabVue@i& (0+255),b
  2299  007618  EF10  F03B         	goto	u901
  2300  00761C  EF12  F03B         	goto	u900
  2301  007620                     u901:
  2302  007620  EF14  F03B         	goto	l1988
  2303  007624                     u900:
  2304  007624  EF5B  F03B         	goto	l76
  2305  007628                     l1988:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;main.c: 105: for (char j = 0; j < 20; j++) {
  2309  007628  0E00               	movlw	0
  2310  00762A  0100               	movlb	0	; force () banked
  2311  00762C  6FB6               	movwf	initTabVue@j& (0+255),b
  2312  00762E                     
  2313                           ; BSR set to: 0
  2314  00762E  0E13               	movlw	19
  2315  007630  0100               	movlb	0	; force () banked
  2316  007632  65B6               	cpfsgt	initTabVue@j& (0+255),b
  2317  007634  EF1E  F03B         	goto	u911
  2318  007638  EF20  F03B         	goto	u910
  2319  00763C                     u911:
  2320  00763C  EF22  F03B         	goto	l1994
  2321  007640                     u910:
  2322  007640  EF45  F03B         	goto	l2000
  2323  007644                     l1994:
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;main.c: 106: m_tabVue[i][j] = 1;
  2327  007644  0100               	movlb	0	; force () banked
  2328  007646  51B7               	movf	initTabVue@i& (0+255),w,b
  2329  007648  0D15               	mullw	21
  2330  00764A  0E00               	movlw	low _m_tabVue
  2331  00764C  0100               	movlb	0	; force () banked
  2332  00764E  6FB4               	movwf	??_initTabVue& (0+255),b
  2333  007650  0E01               	movlw	high _m_tabVue
  2334  007652  6FB5               	movwf	(??_initTabVue+1)& (0+255),b
  2335  007654  50F3               	movf	243,w,c
  2336  007656  27B4               	addwf	??_initTabVue& (0+255),f,b
  2337  007658  50F4               	movf	244,w,c
  2338  00765A  23B5               	addwfc	(??_initTabVue+1)& (0+255),f,b
  2339  00765C  0100               	movlb	0	; force () banked
  2340  00765E  51B6               	movf	initTabVue@j& (0+255),w,b
  2341  007660  0100               	movlb	0	; force () banked
  2342  007662  25B4               	addwf	??_initTabVue& (0+255),w,b
  2343  007664  6ED9               	movwf	fsr2l,c
  2344  007666  0100               	movlb	0	; force () banked
  2345  007668  0E00               	movlw	0
  2346  00766A  0100               	movlb	0	; force () banked
  2347  00766C  21B5               	addwfc	(??_initTabVue+1)& (0+255),w,b
  2348  00766E  6EDA               	movwf	fsr2h,c
  2349  007670  0E01               	movlw	1
  2350  007672  6EDF               	movwf	indf2,c
  2351  007674                     
  2352                           ; BSR set to: 0
  2353  007674  0100               	movlb	0	; force () banked
  2354  007676  2BB6               	incf	initTabVue@j& (0+255),f,b
  2355  007678                     
  2356                           ; BSR set to: 0
  2357  007678  0E13               	movlw	19
  2358  00767A  0100               	movlb	0	; force () banked
  2359  00767C  65B6               	cpfsgt	initTabVue@j& (0+255),b
  2360  00767E  EF43  F03B         	goto	u921
  2361  007682  EF45  F03B         	goto	u920
  2362  007686                     u921:
  2363  007686  EF22  F03B         	goto	l1994
  2364  00768A                     u920:
  2365  00768A                     l2000:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;main.c: 107: };main.c: 108: m_tabVue[i][20] = 0;
  2369  00768A  0100               	movlb	0	; force () banked
  2370  00768C  51B7               	movf	initTabVue@i& (0+255),w,b
  2371  00768E  0D15               	mullw	21
  2372  007690  0E14               	movlw	low (_m_tabVue+20)
  2373  007692  24F3               	addwf	243,w,c
  2374  007694  6ED9               	movwf	fsr2l,c
  2375  007696  0E01               	movlw	high (_m_tabVue+20)
  2376  007698  20F4               	addwfc	prodh,w,c
  2377  00769A  6EDA               	movwf	fsr2h,c
  2378  00769C  0E00               	movlw	0
  2379  00769E  6EDF               	movwf	indf2,c
  2380  0076A0                     
  2381                           ; BSR set to: 0
  2382  0076A0  0100               	movlb	0	; force () banked
  2383  0076A2  2BB7               	incf	initTabVue@i& (0+255),f,b
  2384  0076A4                     
  2385                           ; BSR set to: 0
  2386  0076A4  0E03               	movlw	3
  2387  0076A6  0100               	movlb	0	; force () banked
  2388  0076A8  65B7               	cpfsgt	initTabVue@i& (0+255),b
  2389  0076AA  EF59  F03B         	goto	u931
  2390  0076AE  EF5B  F03B         	goto	u930
  2391  0076B2                     u931:
  2392  0076B2  EF14  F03B         	goto	l1988
  2393  0076B6                     u930:
  2394  0076B6                     l76:
  2395                           
  2396                           ; BSR set to: 0
  2397  0076B6  0012               	return		;funcret
  2398  0076B8                     __end_of_initTabVue:
  2399                           	opt callstack 0
  2400                           
  2401 ;; *************** function _deplace *****************
  2402 ;; Defined at:
  2403 ;;		line 190 in file "main.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  x               2    5[BANK0 ] PTR unsigned char 
  2406 ;;		 -> main@posX(2), 
  2407 ;;  y               2    7[BANK0 ] PTR unsigned char 
  2408 ;;		 -> main@posY(2), 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  analogY         1   11[BANK0 ] unsigned char 
  2411 ;;  analogX         1   10[BANK0 ] unsigned char 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2421 ;;      Params:         0       4       0       0       0       0       0
  2422 ;;      Locals:         0       2       0       0       0       0       0
  2423 ;;      Temps:          0       1       0       0       0       0       0
  2424 ;;      Totals:         0       7       0       0       0       0       0
  2425 ;;Total ram usage:        7 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    4
  2428 ;; This function calls:
  2429 ;;		_getAnalog
  2430 ;;		_lcd_gotoXY
  2431 ;; This function is called by:
  2432 ;;		_main
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           	psect	text15
  2437  007A24                     __ptext15:
  2438                           	opt callstack 0
  2439  007A24                     _deplace:
  2440                           	opt callstack 26
  2441  007A24                     
  2442                           ;main.c: 192: unsigned char analogX = getAnalog(7);
  2443  007A24  0E07               	movlw	7
  2444  007A26  EC44  F038         	call	_getAnalog
  2445  007A2A  0100               	movlb	0	; force () banked
  2446  007A2C  6FBE               	movwf	deplace@analogX& (0+255),b
  2447                           
  2448                           ;main.c: 195: if (0 <= analogX && analogX <= 80)
  2449  007A2E  0E06               	movlw	6
  2450  007A30  EC44  F038         	call	_getAnalog
  2451  007A34  0100               	movlb	0	; force () banked
  2452  007A36  6FBF               	movwf	deplace@analogY& (0+255),b
  2453  007A38                     
  2454                           ; BSR set to: 0
  2455  007A38  0E51               	movlw	81
  2456  007A3A  0100               	movlb	0	; force () banked
  2457  007A3C  61BE               	cpfslt	deplace@analogX& (0+255),b
  2458  007A3E  EF23  F03D         	goto	u1081
  2459  007A42  EF25  F03D         	goto	u1080
  2460  007A46                     u1081:
  2461  007A46  EF46  F03D         	goto	l2090
  2462  007A4A                     u1080:
  2463  007A4A                     
  2464                           ; BSR set to: 0
  2465                           ;main.c: 196: {;main.c: 197: *x = (*x) - 1;
  2466  007A4A  C0B9  FFD9         	movff	deplace@x,fsr2l
  2467  007A4E  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2468  007A52  50DF               	movf	indf2,w,c
  2469  007A54  0100               	movlb	0	; force () banked
  2470  007A56  6FBD               	movwf	??_deplace& (0+255),b
  2471  007A58  05BD               	decf	??_deplace& (0+255),w,b
  2472  007A5A  C0B9  FFD9         	movff	deplace@x,fsr2l
  2473  007A5E  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2474  007A62  6EDF               	movwf	indf2,c
  2475  007A64                     
  2476                           ; BSR set to: 0
  2477                           ;main.c: 198: if ((*x) <= 0)
  2478  007A64  C0B9  FFD9         	movff	deplace@x,fsr2l
  2479  007A68  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2480  007A6C  50DF               	movf	indf2,w,c
  2481  007A6E  A4D8               	btfss	status,2,c
  2482  007A70  EF3C  F03D         	goto	u1091
  2483  007A74  EF3E  F03D         	goto	u1090
  2484  007A78                     u1091:
  2485  007A78  EF6E  F03D         	goto	l2096
  2486  007A7C                     u1090:
  2487  007A7C                     
  2488                           ; BSR set to: 0
  2489                           ;main.c: 199: *x = 20;
  2490  007A7C  C0B9  FFD9         	movff	deplace@x,fsr2l
  2491  007A80  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2492  007A84  0E14               	movlw	20
  2493  007A86  6EDF               	movwf	indf2,c
  2494  007A88  EF6E  F03D         	goto	l2096
  2495  007A8C                     l2090:
  2496                           
  2497                           ; BSR set to: 0
  2498  007A8C  0EAE               	movlw	174
  2499  007A8E  0100               	movlb	0	; force () banked
  2500  007A90  65BE               	cpfsgt	deplace@analogX& (0+255),b
  2501  007A92  EF4D  F03D         	goto	u1101
  2502  007A96  EF4F  F03D         	goto	u1100
  2503  007A9A                     u1101:
  2504  007A9A  EF6E  F03D         	goto	l2096
  2505  007A9E                     u1100:
  2506  007A9E                     
  2507                           ; BSR set to: 0
  2508                           ;main.c: 201: {;main.c: 202: *x = (*x) + 1;
  2509  007A9E  C0B9  FFD9         	movff	deplace@x,fsr2l
  2510  007AA2  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2511  007AA6  50DF               	movf	indf2,w,c
  2512  007AA8  0100               	movlb	0	; force () banked
  2513  007AAA  6FBD               	movwf	??_deplace& (0+255),b
  2514  007AAC  29BD               	incf	??_deplace& (0+255),w,b
  2515  007AAE  C0B9  FFD9         	movff	deplace@x,fsr2l
  2516  007AB2  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2517  007AB6  6EDF               	movwf	indf2,c
  2518                           
  2519                           ;main.c: 203: if ((*x) >= 21)
  2520  007AB8  C0B9  FFD9         	movff	deplace@x,fsr2l
  2521  007ABC  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2522  007AC0  0E14               	movlw	20
  2523  007AC2  64DF               	cpfsgt	indf2,c
  2524  007AC4  EF66  F03D         	goto	u1111
  2525  007AC8  EF68  F03D         	goto	u1110
  2526  007ACC                     u1111:
  2527  007ACC  EF6E  F03D         	goto	l2096
  2528  007AD0                     u1110:
  2529  007AD0                     
  2530                           ; BSR set to: 0
  2531                           ;main.c: 204: *x = 1;
  2532  007AD0  C0B9  FFD9         	movff	deplace@x,fsr2l
  2533  007AD4  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2534  007AD8  0E01               	movlw	1
  2535  007ADA  6EDF               	movwf	indf2,c
  2536  007ADC                     l2096:
  2537                           
  2538                           ; BSR set to: 0
  2539  007ADC  0E51               	movlw	81
  2540  007ADE  0100               	movlb	0	; force () banked
  2541  007AE0  61BF               	cpfslt	deplace@analogY& (0+255),b
  2542  007AE2  EF75  F03D         	goto	u1121
  2543  007AE6  EF77  F03D         	goto	u1120
  2544  007AEA                     u1121:
  2545  007AEA  EF98  F03D         	goto	l2104
  2546  007AEE                     u1120:
  2547  007AEE                     
  2548                           ; BSR set to: 0
  2549                           ;main.c: 208: {;main.c: 209: *y = (*y) - 1;
  2550  007AEE  C0BB  FFD9         	movff	deplace@y,fsr2l
  2551  007AF2  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2552  007AF6  50DF               	movf	indf2,w,c
  2553  007AF8  0100               	movlb	0	; force () banked
  2554  007AFA  6FBD               	movwf	??_deplace& (0+255),b
  2555  007AFC  05BD               	decf	??_deplace& (0+255),w,b
  2556  007AFE  C0BB  FFD9         	movff	deplace@y,fsr2l
  2557  007B02  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2558  007B06  6EDF               	movwf	indf2,c
  2559  007B08                     
  2560                           ; BSR set to: 0
  2561                           ;main.c: 210: if ((*y) <= 0)
  2562  007B08  C0BB  FFD9         	movff	deplace@y,fsr2l
  2563  007B0C  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2564  007B10  50DF               	movf	indf2,w,c
  2565  007B12  A4D8               	btfss	status,2,c
  2566  007B14  EF8E  F03D         	goto	u1131
  2567  007B18  EF90  F03D         	goto	u1130
  2568  007B1C                     u1131:
  2569  007B1C  EFC0  F03D         	goto	l2110
  2570  007B20                     u1130:
  2571  007B20                     
  2572                           ; BSR set to: 0
  2573                           ;main.c: 211: *y = 4;
  2574  007B20  C0BB  FFD9         	movff	deplace@y,fsr2l
  2575  007B24  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2576  007B28  0E04               	movlw	4
  2577  007B2A  6EDF               	movwf	indf2,c
  2578  007B2C  EFC0  F03D         	goto	l2110
  2579  007B30                     l2104:
  2580                           
  2581                           ; BSR set to: 0
  2582  007B30  0EAE               	movlw	174
  2583  007B32  0100               	movlb	0	; force () banked
  2584  007B34  65BF               	cpfsgt	deplace@analogY& (0+255),b
  2585  007B36  EF9F  F03D         	goto	u1141
  2586  007B3A  EFA1  F03D         	goto	u1140
  2587  007B3E                     u1141:
  2588  007B3E  EFC0  F03D         	goto	l2110
  2589  007B42                     u1140:
  2590  007B42                     
  2591                           ; BSR set to: 0
  2592                           ;main.c: 213: {;main.c: 214: *y = (*y) + 1;
  2593  007B42  C0BB  FFD9         	movff	deplace@y,fsr2l
  2594  007B46  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2595  007B4A  50DF               	movf	indf2,w,c
  2596  007B4C  0100               	movlb	0	; force () banked
  2597  007B4E  6FBD               	movwf	??_deplace& (0+255),b
  2598  007B50  29BD               	incf	??_deplace& (0+255),w,b
  2599  007B52  C0BB  FFD9         	movff	deplace@y,fsr2l
  2600  007B56  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2601  007B5A  6EDF               	movwf	indf2,c
  2602                           
  2603                           ;main.c: 215: if ((*y) >= 5)
  2604  007B5C  C0BB  FFD9         	movff	deplace@y,fsr2l
  2605  007B60  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2606  007B64  0E04               	movlw	4
  2607  007B66  64DF               	cpfsgt	indf2,c
  2608  007B68  EFB8  F03D         	goto	u1151
  2609  007B6C  EFBA  F03D         	goto	u1150
  2610  007B70                     u1151:
  2611  007B70  EFC0  F03D         	goto	l2110
  2612  007B74                     u1150:
  2613  007B74                     
  2614                           ; BSR set to: 0
  2615                           ;main.c: 216: *y = 1;
  2616  007B74  C0BB  FFD9         	movff	deplace@y,fsr2l
  2617  007B78  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2618  007B7C  0E01               	movlw	1
  2619  007B7E  6EDF               	movwf	indf2,c
  2620  007B80                     l2110:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;main.c: 217: };main.c: 218: lcd_gotoXY(*x, *y);
  2624  007B80  C0BB  FFD9         	movff	deplace@y,fsr2l
  2625  007B84  C0BC  FFDA         	movff	deplace@y+1,fsr2h
  2626  007B88  50DF               	movf	indf2,w,c
  2627  007B8A  0100               	movlb	0	; force () banked
  2628  007B8C  6FB7               	movwf	lcd_gotoXY@y& (0+255),b
  2629  007B8E  C0B9  FFD9         	movff	deplace@x,fsr2l
  2630  007B92  C0BA  FFDA         	movff	deplace@x+1,fsr2h
  2631  007B96  50DF               	movf	indf2,w,c
  2632  007B98  EC7C  F03A         	call	_lcd_gotoXY
  2633  007B9C  0012               	return		;funcret
  2634  007B9E                     __end_of_deplace:
  2635                           	opt callstack 0
  2636                           
  2637 ;; *************** function _getAnalog *****************
  2638 ;; Defined at:
  2639 ;;		line 280 in file "main.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  canal           1    wreg     unsigned char 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  canal           1    1[BANK0 ] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      unsigned char 
  2646 ;; Registers used:
  2647 ;;		wreg, status,2, status,0
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2653 ;;      Params:         0       0       0       0       0       0       0
  2654 ;;      Locals:         0       1       0       0       0       0       0
  2655 ;;      Temps:          0       1       0       0       0       0       0
  2656 ;;      Totals:         0       2       0       0       0       0       0
  2657 ;;Total ram usage:        2 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_deplace
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text16
  2667  007088                     __ptext16:
  2668                           	opt callstack 0
  2669  007088                     _getAnalog:
  2670                           	opt callstack 29
  2671                           
  2672                           ;incstack = 0
  2673                           ;getAnalog@canal stored from wreg
  2674  007088  0100               	movlb	0	; force () banked
  2675  00708A  6FB5               	movwf	getAnalog@canal& (0+255),b
  2676  00708C                     
  2677                           ;main.c: 282: ADCON0bits.CHS = canal;
  2678  00708C  C0B5  F0B4         	movff	getAnalog@canal,??_getAnalog
  2679  007090  0100               	movlb	0	; force () banked
  2680  007092  47B4               	rlncf	??_getAnalog& (0+255),f,b
  2681  007094  47B4               	rlncf	??_getAnalog& (0+255),f,b
  2682  007096  50C2               	movf	194,w,c	;volatile
  2683  007098  19B4               	xorwf	??_getAnalog& (0+255),w,b
  2684  00709A  0BC3               	andlw	-61
  2685  00709C  19B4               	xorwf	??_getAnalog& (0+255),w,b
  2686  00709E  6EC2               	movwf	194,c	;volatile
  2687  0070A0                     
  2688                           ;main.c: 284: ADCON0bits.GO_DONE = 1;
  2689  0070A0  82C2               	bsf	194,1,c	;volatile
  2690  0070A2                     l152:
  2691  0070A2  B2C2               	btfsc	194,1,c	;volatile
  2692  0070A4  EF56  F038         	goto	u131
  2693  0070A8  EF58  F038         	goto	u130
  2694  0070AC                     u131:
  2695  0070AC  EF51  F038         	goto	l152
  2696  0070B0                     u130:
  2697  0070B0                     
  2698                           ;main.c: 286: return ADRESH;
  2699  0070B0  50C4               	movf	196,w,c	;volatile
  2700  0070B2  0012               	return		;funcret
  2701  0070B4                     __end_of_getAnalog:
  2702                           	opt callstack 0
  2703                           
  2704 ;; *************** function _afficheTabVue *****************
  2705 ;; Defined at:
  2706 ;;		line 295 in file "main.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;		None
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;  i               1    8[BANK0 ] unsigned char 
  2711 ;; Return value:  Size  Location     Type
  2712 ;;                  1    wreg      void 
  2713 ;; Registers used:
  2714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2720 ;;      Params:         0       0       0       0       0       0       0
  2721 ;;      Locals:         0       1       0       0       0       0       0
  2722 ;;      Temps:          0       0       0       0       0       0       0
  2723 ;;      Totals:         0       1       0       0       0       0       0
  2724 ;;Total ram usage:        1 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; Hardware stack levels required when called:    5
  2727 ;; This function calls:
  2728 ;;		_lcd_gotoXY
  2729 ;;		_lcd_putMessage
  2730 ;; This function is called by:
  2731 ;;		_main
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text17
  2736  007296                     __ptext17:
  2737                           	opt callstack 0
  2738  007296                     _afficheTabVue:
  2739                           	opt callstack 25
  2740  007296                     
  2741                           ;main.c: 297: for (char i = 0; i < 4; i++) {
  2742  007296  0E00               	movlw	0
  2743  007298  0100               	movlb	0	; force () banked
  2744  00729A  6FBC               	movwf	afficheTabVue@i& (0+255),b
  2745  00729C                     
  2746                           ; BSR set to: 0
  2747  00729C  0E03               	movlw	3
  2748  00729E  0100               	movlb	0	; force () banked
  2749  0072A0  65BC               	cpfsgt	afficheTabVue@i& (0+255),b
  2750  0072A2  EF55  F039         	goto	u1061
  2751  0072A6  EF57  F039         	goto	u1060
  2752  0072AA                     u1061:
  2753  0072AA  EF59  F039         	goto	l2072
  2754  0072AE                     u1060:
  2755  0072AE  EF77  F039         	goto	l160
  2756  0072B2                     l2072:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;main.c: 298: lcd_gotoXY(1, i + 1);
  2760  0072B2  0100               	movlb	0	; force () banked
  2761  0072B4  29BC               	incf	afficheTabVue@i& (0+255),w,b
  2762  0072B6  0100               	movlb	0	; force () banked
  2763  0072B8  6FB7               	movwf	lcd_gotoXY@y& (0+255),b
  2764  0072BA  0E01               	movlw	1
  2765  0072BC  EC7C  F03A         	call	_lcd_gotoXY
  2766  0072C0                     
  2767                           ;main.c: 299: lcd_putMessage(m_tabVue[i]);
  2768  0072C0  0100               	movlb	0	; force () banked
  2769  0072C2  51BC               	movf	afficheTabVue@i& (0+255),w,b
  2770  0072C4  0D15               	mullw	21
  2771  0072C6  0E00               	movlw	low _m_tabVue
  2772  0072C8  24F3               	addwf	243,w,c
  2773  0072CA  0100               	movlb	0	; force () banked
  2774  0072CC  6FB9               	movwf	lcd_putMessage@chaine& (0+255),b
  2775  0072CE  0E01               	movlw	high _m_tabVue
  2776  0072D0  20F4               	addwfc	prodh,w,c
  2777  0072D2  6FBA               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
  2778  0072D4  ECCF  F038         	call	_lcd_putMessage	;wreg free
  2779  0072D8  0100               	movlb	0	; force () banked
  2780  0072DA  2BBC               	incf	afficheTabVue@i& (0+255),f,b
  2781  0072DC                     
  2782                           ; BSR set to: 0
  2783  0072DC  0E03               	movlw	3
  2784  0072DE  0100               	movlb	0	; force () banked
  2785  0072E0  65BC               	cpfsgt	afficheTabVue@i& (0+255),b
  2786  0072E2  EF75  F039         	goto	u1071
  2787  0072E6  EF77  F039         	goto	u1070
  2788  0072EA                     u1071:
  2789  0072EA  EF59  F039         	goto	l2072
  2790  0072EE                     u1070:
  2791  0072EE                     l160:
  2792                           
  2793                           ; BSR set to: 0
  2794  0072EE  0012               	return		;funcret
  2795  0072F0                     __end_of_afficheTabVue:
  2796                           	opt callstack 0
  2797                           
  2798 ;; *************** function _lcd_putMessage *****************
  2799 ;; Defined at:
  2800 ;;		line 387 in file "Lcd4Lignes.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  chaine          2    5[BANK0 ] PTR const unsigned char 
  2803 ;;		 -> m_tabMines(84), m_tabVue(84), 
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  j               1    7[BANK0 ] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2815 ;;      Params:         0       2       0       0       0       0       0
  2816 ;;      Locals:         0       1       0       0       0       0       0
  2817 ;;      Temps:          0       0       0       0       0       0       0
  2818 ;;      Totals:         0       3       0       0       0       0       0
  2819 ;;Total ram usage:        3 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    4
  2822 ;; This function calls:
  2823 ;;		_lcd_ecritChar
  2824 ;; This function is called by:
  2825 ;;		_afficheTabVue
  2826 ;;		_afficheTabMines
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text18
  2831  00719E                     __ptext18:
  2832                           	opt callstack 0
  2833  00719E                     _lcd_putMessage:
  2834                           	opt callstack 25
  2835  00719E                     
  2836                           ;Lcd4Lignes.c: 389: unsigned char j;;Lcd4Lignes.c: 391: for(j = 0; chaine[j] != 0; j++)
  2837  00719E  0E00               	movlw	0
  2838  0071A0  0100               	movlb	0	; force () banked
  2839  0071A2  6FBB               	movwf	lcd_putMessage@j& (0+255),b
  2840  0071A4  EFE3  F038         	goto	l1860
  2841  0071A8                     l1856:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;Lcd4Lignes.c: 392: lcd_ecritChar(chaine[j]);
  2845  0071A8  0100               	movlb	0	; force () banked
  2846  0071AA  51BB               	movf	lcd_putMessage@j& (0+255),w,b
  2847  0071AC  0100               	movlb	0	; force () banked
  2848  0071AE  25B9               	addwf	lcd_putMessage@chaine& (0+255),w,b
  2849  0071B0  6ED9               	movwf	fsr2l,c
  2850  0071B2  0100               	movlb	0	; force () banked
  2851  0071B4  0E00               	movlw	0
  2852  0071B6  0100               	movlb	0	; force () banked
  2853  0071B8  21BA               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  2854  0071BA  6EDA               	movwf	fsr2h,c
  2855  0071BC  50DF               	movf	indf2,w,c
  2856  0071BE  ECF6  F038         	call	_lcd_ecritChar
  2857  0071C2  0100               	movlb	0	; force () banked
  2858  0071C4  2BBB               	incf	lcd_putMessage@j& (0+255),f,b
  2859  0071C6                     l1860:
  2860                           
  2861                           ; BSR set to: 0
  2862  0071C6  0100               	movlb	0	; force () banked
  2863  0071C8  51BB               	movf	lcd_putMessage@j& (0+255),w,b
  2864  0071CA  0100               	movlb	0	; force () banked
  2865  0071CC  25B9               	addwf	lcd_putMessage@chaine& (0+255),w,b
  2866  0071CE  6ED9               	movwf	fsr2l,c
  2867  0071D0  0100               	movlb	0	; force () banked
  2868  0071D2  0E00               	movlw	0
  2869  0071D4  0100               	movlb	0	; force () banked
  2870  0071D6  21BA               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  2871  0071D8  6EDA               	movwf	fsr2h,c
  2872  0071DA  50DF               	movf	indf2,w,c
  2873  0071DC  A4D8               	btfss	status,2,c
  2874  0071DE  EFF3  F038         	goto	u791
  2875  0071E2  EFF5  F038         	goto	u790
  2876  0071E6                     u791:
  2877  0071E6  EFD4  F038         	goto	l1856
  2878  0071EA                     u790:
  2879  0071EA                     
  2880                           ; BSR set to: 0
  2881  0071EA  0012               	return		;funcret
  2882  0071EC                     __end_of_lcd_putMessage:
  2883                           	opt callstack 0
  2884                           
  2885 ;; *************** function _lcd_ecritChar *****************
  2886 ;; Defined at:
  2887 ;;		line 359 in file "Lcd4Lignes.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  car             1    wreg     unsigned char 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  car             1    3[BANK0 ] unsigned char 
  2892 ;;  posRam          1    4[BANK0 ] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2902 ;;      Params:         0       0       0       0       0       0       0
  2903 ;;      Locals:         0       2       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0
  2905 ;;      Totals:         0       2       0       0       0       0       0
  2906 ;;Total ram usage:        2 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    3
  2909 ;; This function calls:
  2910 ;;		_lcd_wrCom
  2911 ;;		_lcd_wrData
  2912 ;; This function is called by:
  2913 ;;		_lcd_putMessage
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text19
  2918  0071EC                     __ptext19:
  2919                           	opt callstack 0
  2920  0071EC                     _lcd_ecritChar:
  2921                           	opt callstack 25
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;incstack = 0
  2925                           ;lcd_ecritChar@car stored from wreg
  2926  0071EC  0100               	movlb	0	; force () banked
  2927  0071EE  6FB7               	movwf	lcd_ecritChar@car& (0+255),b
  2928  0071F0                     
  2929                           ;Lcd4Lignes.c: 361: unsigned char posRam;;Lcd4Lignes.c: 363: posRam = lcd_wrData(car);
  2930  0071F0  0100               	movlb	0	; force () banked
  2931  0071F2  51B7               	movf	lcd_ecritChar@car& (0+255),w,b
  2932  0071F4  EC5A  F038         	call	_lcd_wrData
  2933  0071F8  0100               	movlb	0	; force () banked
  2934  0071FA  6FB8               	movwf	lcd_ecritChar@posRam& (0+255),b
  2935                           
  2936                           ;Lcd4Lignes.c: 364: switch(posRam)
  2937  0071FC  EF0F  F039         	goto	l1780
  2938  007200                     l1772:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;Lcd4Lignes.c: 367: lcd_wrCom(0xC0|0x80);
  2942  007200  0EC0               	movlw	192
  2943  007202  EC10  F03A         	call	_lcd_wrCom
  2944                           
  2945                           ;Lcd4Lignes.c: 368: break;
  2946  007206  EF1F  F039         	goto	l239
  2947  00720A                     l1774:
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;Lcd4Lignes.c: 370: lcd_wrCom(0x94|0x80);
  2951  00720A  0E94               	movlw	148
  2952  00720C  EC10  F03A         	call	_lcd_wrCom
  2953                           
  2954                           ;Lcd4Lignes.c: 371: break;
  2955  007210  EF1F  F039         	goto	l239
  2956  007214                     l1776:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;Lcd4Lignes.c: 373: lcd_wrCom(0xD4|0x80);
  2960  007214  0ED4               	movlw	212
  2961  007216  EC10  F03A         	call	_lcd_wrCom
  2962                           
  2963                           ;Lcd4Lignes.c: 374: break;
  2964  00721A  EF1F  F039         	goto	l239
  2965  00721E                     l1780:
  2966                           
  2967                           ; BSR set to: 0
  2968  00721E  0100               	movlb	0	; force () banked
  2969  007220  51B8               	movf	lcd_ecritChar@posRam& (0+255),w,b
  2970                           
  2971                           ; Switch size 1, requested type "simple"
  2972                           ; Number of cases is 3, Range of values is 148 to 212
  2973                           ; switch strategies available:
  2974                           ; Name         Instructions Cycles
  2975                           ; simple_byte           10     6 (average)
  2976                           ;	Chosen strategy is simple_byte
  2977  007222  0A94               	xorlw	148	; case 148
  2978  007224  B4D8               	btfsc	status,2,c
  2979  007226  EF00  F039         	goto	l1772
  2980  00722A  0A54               	xorlw	84	; case 192
  2981  00722C  B4D8               	btfsc	status,2,c
  2982  00722E  EF0A  F039         	goto	l1776
  2983  007232  0A14               	xorlw	20	; case 212
  2984  007234  B4D8               	btfsc	status,2,c
  2985  007236  EF05  F039         	goto	l1774
  2986  00723A  EF1F  F039         	goto	l239
  2987  00723E                     l239:
  2988  00723E  0012               	return		;funcret
  2989  007240                     __end_of_lcd_ecritChar:
  2990                           	opt callstack 0
  2991                           
  2992 ;; *************** function _lcd_wrData *****************
  2993 ;; Defined at:
  2994 ;;		line 188 in file "Lcd4Lignes.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  caractere       1    wreg     unsigned char 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  caractere       1    2[BANK0 ] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      unsigned char 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3008 ;;      Params:         0       0       0       0       0       0       0
  3009 ;;      Locals:         0       1       0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0
  3011 ;;      Totals:         0       1       0       0       0       0       0
  3012 ;;Total ram usage:        1 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    2
  3015 ;; This function calls:
  3016 ;;		_lcd_busy
  3017 ;;		_lcd_ecrireDonnees
  3018 ;;		_lcd_strobeEnableBit
  3019 ;; This function is called by:
  3020 ;;		_lcd_ecritChar
  3021 ;;		_lcd_initCGRam
  3022 ;;		_lcd_effaceChar
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text20
  3027  0070B4                     __ptext20:
  3028                           	opt callstack 0
  3029  0070B4                     _lcd_wrData:
  3030                           	opt callstack 26
  3031                           
  3032                           ;incstack = 0
  3033                           ;lcd_wrData@caractere stored from wreg
  3034  0070B4  0100               	movlb	0	; force () banked
  3035  0070B6  6FB6               	movwf	lcd_wrData@caractere& (0+255),b
  3036  0070B8                     
  3037                           ;Lcd4Lignes.c: 190: lcd_busy();
  3038  0070B8  ECAE  F038         	call	_lcd_busy	;wreg free
  3039  0070BC                     
  3040                           ;Lcd4Lignes.c: 191: TRISD = 0b00000000;
  3041  0070BC  0E00               	movlw	0
  3042  0070BE  6E95               	movwf	149,c	;volatile
  3043  0070C0                     
  3044                           ;Lcd4Lignes.c: 194: PORTAbits.RA0 = 1;
  3045  0070C0  8080               	bsf	128,0,c	;volatile
  3046  0070C2                     
  3047                           ;Lcd4Lignes.c: 195: PORTAbits.RA1 = 0;
  3048  0070C2  9280               	bcf	128,1,c	;volatile
  3049  0070C4                     
  3050                           ;Lcd4Lignes.c: 197: lcd_ecrireDonnees(caractere >> 4);
  3051  0070C4  0100               	movlb	0	; force () banked
  3052  0070C6  39B6               	swapf	lcd_wrData@caractere& (0+255),w,b
  3053  0070C8  0B0F               	andlw	15
  3054  0070CA  EC0E  F038         	call	_lcd_ecrireDonnees
  3055  0070CE                     
  3056                           ;Lcd4Lignes.c: 198: lcd_strobeEnableBit();
  3057  0070CE  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  3058  0070D2                     
  3059                           ;Lcd4Lignes.c: 201: lcd_ecrireDonnees(caractere);
  3060  0070D2  0100               	movlb	0	; force () banked
  3061  0070D4  51B6               	movf	lcd_wrData@caractere& (0+255),w,b
  3062  0070D6  EC0E  F038         	call	_lcd_ecrireDonnees
  3063  0070DA                     
  3064                           ;Lcd4Lignes.c: 202: lcd_strobeEnableBit();
  3065  0070DA  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  3066  0070DE                     
  3067                           ;Lcd4Lignes.c: 205: TRISD = 0b00001111;
  3068  0070DE  0E0F               	movlw	15
  3069  0070E0  6E95               	movwf	149,c	;volatile
  3070  0070E2                     
  3071                           ;Lcd4Lignes.c: 206: _delay((unsigned long)((2)*(1000000/4000000.0)));
  3072                           ;Lcd4Lignes.c: 207: return(lcd_busy());
  3073  0070E2  ECAE  F038         	call	_lcd_busy	;wreg free
  3074  0070E6  0012               	return		;funcret
  3075  0070E8                     __end_of_lcd_wrData:
  3076                           	opt callstack 0
  3077                           
  3078 ;; *************** function _lcd_gotoXY *****************
  3079 ;; Defined at:
  3080 ;;		line 314 in file "Lcd4Lignes.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  x               1    wreg     unsigned char 
  3083 ;;  y               1    3[BANK0 ] unsigned char 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  x               1    4[BANK0 ] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0, cstack
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3095 ;;      Params:         0       1       0       0       0       0       0
  3096 ;;      Locals:         0       1       0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0       0       0
  3098 ;;      Totals:         0       2       0       0       0       0       0
  3099 ;;Total ram usage:        2 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		_lcd_wrCom
  3104 ;; This function is called by:
  3105 ;;		_deplace
  3106 ;;		_afficheTabVue
  3107 ;;		_afficheTabMines
  3108 ;;		_lcd_effaceLigne
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           	psect	text21
  3113  0074F8                     __ptext21:
  3114                           	opt callstack 0
  3115  0074F8                     _lcd_gotoXY:
  3116                           	opt callstack 26
  3117                           
  3118                           ;incstack = 0
  3119                           ;lcd_gotoXY@x stored from wreg
  3120  0074F8  0100               	movlb	0	; force () banked
  3121  0074FA  6FB8               	movwf	lcd_gotoXY@x& (0+255),b
  3122  0074FC                     
  3123                           ;Lcd4Lignes.c: 316: switch(y)
  3124  0074FC  EFA0  F03A         	goto	l1852
  3125  007500                     l1842:
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;Lcd4Lignes.c: 319: lcd_wrCom((x-1+0x80)|0x80);
  3129  007500  0100               	movlb	0	; force () banked
  3130  007502  51B8               	movf	lcd_gotoXY@x& (0+255),w,b
  3131  007504  0F7F               	addlw	127
  3132  007506  0980               	iorlw	128
  3133  007508  EC10  F03A         	call	_lcd_wrCom
  3134                           
  3135                           ;Lcd4Lignes.c: 320: break;
  3136  00750C  EFB4  F03A         	goto	l228
  3137  007510                     l1844:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;Lcd4Lignes.c: 322: lcd_wrCom((x-1+0xC0)|0x80);
  3141  007510  0100               	movlb	0	; force () banked
  3142  007512  51B8               	movf	lcd_gotoXY@x& (0+255),w,b
  3143  007514  0FBF               	addlw	191
  3144  007516  0980               	iorlw	128
  3145  007518  EC10  F03A         	call	_lcd_wrCom
  3146                           
  3147                           ;Lcd4Lignes.c: 323: break;
  3148  00751C  EFB4  F03A         	goto	l228
  3149  007520                     l1846:
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;Lcd4Lignes.c: 325: lcd_wrCom((x-1+0x94)|0x80);
  3153  007520  0100               	movlb	0	; force () banked
  3154  007522  51B8               	movf	lcd_gotoXY@x& (0+255),w,b
  3155  007524  0F93               	addlw	147
  3156  007526  0980               	iorlw	128
  3157  007528  EC10  F03A         	call	_lcd_wrCom
  3158                           
  3159                           ;Lcd4Lignes.c: 326: break;
  3160  00752C  EFB4  F03A         	goto	l228
  3161  007530                     l1848:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;Lcd4Lignes.c: 328: lcd_wrCom((x-1+0xD4)|0x80);
  3165  007530  0100               	movlb	0	; force () banked
  3166  007532  51B8               	movf	lcd_gotoXY@x& (0+255),w,b
  3167  007534  0FD3               	addlw	211
  3168  007536  0980               	iorlw	128
  3169  007538  EC10  F03A         	call	_lcd_wrCom
  3170                           
  3171                           ;Lcd4Lignes.c: 329: break;
  3172  00753C  EFB4  F03A         	goto	l228
  3173  007540                     l1852:
  3174  007540  0100               	movlb	0	; force () banked
  3175  007542  51B7               	movf	lcd_gotoXY@y& (0+255),w,b
  3176                           
  3177                           ; Switch size 1, requested type "simple"
  3178                           ; Number of cases is 4, Range of values is 1 to 4
  3179                           ; switch strategies available:
  3180                           ; Name         Instructions Cycles
  3181                           ; simple_byte           13     7 (average)
  3182                           ;	Chosen strategy is simple_byte
  3183  007544  0A01               	xorlw	1	; case 1
  3184  007546  B4D8               	btfsc	status,2,c
  3185  007548  EF80  F03A         	goto	l1842
  3186  00754C  0A03               	xorlw	3	; case 2
  3187  00754E  B4D8               	btfsc	status,2,c
  3188  007550  EF88  F03A         	goto	l1844
  3189  007554  0A01               	xorlw	1	; case 3
  3190  007556  B4D8               	btfsc	status,2,c
  3191  007558  EF90  F03A         	goto	l1846
  3192  00755C  0A07               	xorlw	7	; case 4
  3193  00755E  B4D8               	btfsc	status,2,c
  3194  007560  EF98  F03A         	goto	l1848
  3195  007564  EFB4  F03A         	goto	l228
  3196  007568                     l228:
  3197  007568  0012               	return		;funcret
  3198  00756A                     __end_of_lcd_gotoXY:
  3199                           	opt callstack 0
  3200                           
  3201 ;; *************** function _lcd_wrCom *****************
  3202 ;; Defined at:
  3203 ;;		line 156 in file "Lcd4Lignes.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;  commande        1    wreg     unsigned char 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  commande        1    2[BANK0 ] unsigned char 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  1    wreg      unsigned char 
  3210 ;; Registers used:
  3211 ;;		wreg, status,2, status,0, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3217 ;;      Params:         0       0       0       0       0       0       0
  3218 ;;      Locals:         0       1       0       0       0       0       0
  3219 ;;      Temps:          0       0       0       0       0       0       0
  3220 ;;      Totals:         0       1       0       0       0       0       0
  3221 ;;Total ram usage:        1 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    2
  3224 ;; This function calls:
  3225 ;;		_lcd_busy
  3226 ;;		_lcd_ecrireDonnees
  3227 ;;		_lcd_strobeEnableBit
  3228 ;; This function is called by:
  3229 ;;		_lcd_init
  3230 ;;		_lcd_curseurHome
  3231 ;;		_lcd_gotoXY
  3232 ;;		_lcd_ecritChar
  3233 ;;		_lcd_initCGRam
  3234 ;;		_lcd_effaceAffichage
  3235 ;;		_lcd_cacheCurseur
  3236 ;;		_lcd_montreCurseur
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text22
  3241  007420                     __ptext22:
  3242                           	opt callstack 0
  3243  007420                     _lcd_wrCom:
  3244                           	opt callstack 27
  3245                           
  3246                           ;incstack = 0
  3247                           ;lcd_wrCom@commande stored from wreg
  3248  007420  0100               	movlb	0	; force () banked
  3249  007422  6FB6               	movwf	lcd_wrCom@commande& (0+255),b
  3250  007424                     
  3251                           ;Lcd4Lignes.c: 158: lcd_busy();
  3252  007424  ECAE  F038         	call	_lcd_busy	;wreg free
  3253  007428                     
  3254                           ;Lcd4Lignes.c: 160: TRISD = 0b00000000;
  3255  007428  0E00               	movlw	0
  3256  00742A  6E95               	movwf	149,c	;volatile
  3257  00742C                     
  3258                           ;Lcd4Lignes.c: 163: PORTAbits.RA0 = 0;
  3259  00742C  9080               	bcf	128,0,c	;volatile
  3260  00742E                     
  3261                           ;Lcd4Lignes.c: 164: PORTAbits.RA1 = 0;
  3262  00742E  9280               	bcf	128,1,c	;volatile
  3263  007430                     
  3264                           ;Lcd4Lignes.c: 166: lcd_ecrireDonnees(commande >> 4);
  3265  007430  0100               	movlb	0	; force () banked
  3266  007432  39B6               	swapf	lcd_wrCom@commande& (0+255),w,b
  3267  007434  0B0F               	andlw	15
  3268  007436  EC0E  F038         	call	_lcd_ecrireDonnees
  3269  00743A                     
  3270                           ;Lcd4Lignes.c: 167: lcd_strobeEnableBit();
  3271  00743A  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  3272  00743E                     
  3273                           ;Lcd4Lignes.c: 170: lcd_ecrireDonnees(commande);
  3274  00743E  0100               	movlb	0	; force () banked
  3275  007440  51B6               	movf	lcd_wrCom@commande& (0+255),w,b
  3276  007442  EC0E  F038         	call	_lcd_ecrireDonnees
  3277  007446                     
  3278                           ;Lcd4Lignes.c: 171: lcd_strobeEnableBit();
  3279  007446  ECFE  F037         	call	_lcd_strobeEnableBit	;wreg free
  3280  00744A                     
  3281                           ;Lcd4Lignes.c: 172: _delay((unsigned long)((40)*(1000000/4000000.0)));
  3282  00744A  0E03               	movlw	3
  3283  00744C                     u1337:
  3284  00744C  2EE8               	decfsz	wreg,f,c
  3285  00744E  D7FE               	bra	u1337
  3286  007450  F000               	nop	
  3287  007452                     
  3288                           ;Lcd4Lignes.c: 174: if ((commande == 0x01) || commande == 0x02)
  3289  007452  0100               	movlb	0	; force () banked
  3290  007454  05B6               	decf	lcd_wrCom@commande& (0+255),w,b
  3291  007456  B4D8               	btfsc	status,2,c
  3292  007458  EF30  F03A         	goto	u681
  3293  00745C  EF32  F03A         	goto	u680
  3294  007460                     u681:
  3295  007460  EF3C  F03A         	goto	l1730
  3296  007464                     u680:
  3297  007464                     
  3298                           ; BSR set to: 0
  3299  007464  0E02               	movlw	2
  3300  007466  0100               	movlb	0	; force () banked
  3301  007468  19B6               	xorwf	lcd_wrCom@commande& (0+255),w,b
  3302  00746A  A4D8               	btfss	status,2,c
  3303  00746C  EF3A  F03A         	goto	u691
  3304  007470  EF3C  F03A         	goto	u690
  3305  007474                     u691:
  3306  007474  EF41  F03A         	goto	l1732
  3307  007478                     u690:
  3308  007478                     l1730:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;Lcd4Lignes.c: 175: _delay((unsigned long)((2)*(1000000/4000.0)));
  3312  007478  0EA6               	movlw	166
  3313  00747A                     u1347:
  3314  00747A  2EE8               	decfsz	wreg,f,c
  3315  00747C  D7FE               	bra	u1347
  3316  00747E  F000 F000          	nop2	
  3317  007482                     l1732:
  3318                           
  3319                           ;Lcd4Lignes.c: 177: TRISD = 0b00001111;
  3320  007482  0E0F               	movlw	15
  3321  007484  6E95               	movwf	149,c	;volatile
  3322  007486                     
  3323                           ;Lcd4Lignes.c: 179: return(lcd_busy());
  3324  007486  ECAE  F038         	call	_lcd_busy	;wreg free
  3325  00748A  0012               	return		;funcret
  3326  00748C                     __end_of_lcd_wrCom:
  3327                           	opt callstack 0
  3328                           
  3329 ;; *************** function _lcd_strobeEnableBit *****************
  3330 ;; Defined at:
  3331 ;;		line 431 in file "Lcd4Lignes.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;		None
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      void 
  3338 ;; Registers used:
  3339 ;;		None
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3345 ;;      Params:         0       0       0       0       0       0       0
  3346 ;;      Locals:         0       0       0       0       0       0       0
  3347 ;;      Temps:          0       0       0       0       0       0       0
  3348 ;;      Totals:         0       0       0       0       0       0       0
  3349 ;;Total ram usage:        0 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_lcd_wrCom
  3355 ;;		_lcd_wrData
  3356 ;;		_lcd_resetSequence
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text23
  3361  006FFC                     __ptext23:
  3362                           	opt callstack 0
  3363  006FFC                     _lcd_strobeEnableBit:
  3364                           	opt callstack 28
  3365  006FFC                     
  3366                           ;Lcd4Lignes.c: 433: PORTAbits.RA2 = 1;
  3367  006FFC  8480               	bsf	128,2,c	;volatile
  3368                           
  3369                           ;Lcd4Lignes.c: 434: __nop();
  3370  006FFE  F000               	nop	
  3371                           
  3372                           ;Lcd4Lignes.c: 435: PORTAbits.RA2 = 0;
  3373  007000  9480               	bcf	128,2,c	;volatile
  3374  007002  0012               	return		;funcret
  3375  007004                     __end_of_lcd_strobeEnableBit:
  3376                           	opt callstack 0
  3377                           
  3378 ;; *************** function _lcd_ecrireDonnees *****************
  3379 ;; Defined at:
  3380 ;;		line 107 in file "Lcd4Lignes.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  donnee          1    wreg     unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  donnee          1    1[BANK0 ] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3394 ;;      Params:         0       0       0       0       0       0       0
  3395 ;;      Locals:         0       1       0       0       0       0       0
  3396 ;;      Temps:          0       1       0       0       0       0       0
  3397 ;;      Totals:         0       2       0       0       0       0       0
  3398 ;;Total ram usage:        2 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_lcd_wrCom
  3404 ;;		_lcd_wrData
  3405 ;;		_lcd_resetSequence
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text24
  3410  00701C                     __ptext24:
  3411                           	opt callstack 0
  3412  00701C                     _lcd_ecrireDonnees:
  3413                           	opt callstack 28
  3414                           
  3415                           ;incstack = 0
  3416                           ;lcd_ecrireDonnees@donnee stored from wreg
  3417  00701C  0100               	movlb	0	; force () banked
  3418  00701E  6FB5               	movwf	lcd_ecrireDonnees@donnee& (0+255),b
  3419  007020                     
  3420                           ;Lcd4Lignes.c: 110: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  3421  007020  CF83 F0B4          	movff	3971,??_lcd_ecrireDonnees	;volatile
  3422  007024  0EF0               	movlw	240
  3423  007026  0100               	movlb	0	; force () banked
  3424  007028  17B4               	andwf	??_lcd_ecrireDonnees& (0+255),f,b
  3425  00702A  0100               	movlb	0	; force () banked
  3426  00702C  51B5               	movf	lcd_ecrireDonnees@donnee& (0+255),w,b
  3427  00702E  0B0F               	andlw	15
  3428  007030  0100               	movlb	0	; force () banked
  3429  007032  11B4               	iorwf	??_lcd_ecrireDonnees& (0+255),w,b
  3430  007034  6E83               	movwf	131,c	;volatile
  3431  007036                     
  3432                           ; BSR set to: 0
  3433  007036  0012               	return		;funcret
  3434  007038                     __end_of_lcd_ecrireDonnees:
  3435                           	opt callstack 0
  3436                           
  3437 ;; *************** function _lcd_busy *****************
  3438 ;; Defined at:
  3439 ;;		line 124 in file "Lcd4Lignes.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  adresse         1    1[BANK0 ] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      unsigned char 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3453 ;;      Params:         0       0       0       0       0       0       0
  3454 ;;      Locals:         0       1       0       0       0       0       0
  3455 ;;      Temps:          0       1       0       0       0       0       0
  3456 ;;      Totals:         0       2       0       0       0       0       0
  3457 ;;Total ram usage:        2 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    1
  3460 ;; This function calls:
  3461 ;;		_lcd_lireDonnees
  3462 ;; This function is called by:
  3463 ;;		_lcd_wrCom
  3464 ;;		_lcd_wrData
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text25
  3469  00715C                     __ptext25:
  3470                           	opt callstack 0
  3471  00715C                     _lcd_busy:
  3472                           	opt callstack 27
  3473  00715C                     
  3474                           ;Lcd4Lignes.c: 126: unsigned char adresse;;Lcd4Lignes.c: 128: PORTAbits.RA0 = 0;
  3475  00715C  9080               	bcf	128,0,c	;volatile
  3476                           
  3477                           ;Lcd4Lignes.c: 129: PORTAbits.RA1 = 1;
  3478  00715E  8280               	bsf	128,1,c	;volatile
  3479  007160                     l190:
  3480                           
  3481                           ;Lcd4Lignes.c: 132: {;Lcd4Lignes.c: 133: PORTAbits.RA2 = 1;
  3482  007160  8480               	bsf	128,2,c	;volatile
  3483                           
  3484                           ;Lcd4Lignes.c: 134: __nop();
  3485  007162  F000               	nop	
  3486  007164                     
  3487                           ;Lcd4Lignes.c: 135: adresse = lcd_lireDonnees() << 4;
  3488  007164  ECFB  F037         	call	_lcd_lireDonnees	;wreg free
  3489  007168  0100               	movlb	0	; force () banked
  3490  00716A  6FB4               	movwf	??_lcd_busy& (0+255),b
  3491  00716C  39B4               	swapf	??_lcd_busy& (0+255),w,b
  3492  00716E  0BF0               	andlw	240
  3493  007170  0100               	movlb	0	; force () banked
  3494  007172  6FB5               	movwf	lcd_busy@adresse& (0+255),b
  3495  007174                     
  3496                           ; BSR set to: 0
  3497                           ;Lcd4Lignes.c: 136: PORTAbits.RA2 = 0;
  3498  007174  9480               	bcf	128,2,c	;volatile
  3499  007176                     
  3500                           ;Lcd4Lignes.c: 138: PORTAbits.RA2 = 1;
  3501  007176  8480               	bsf	128,2,c	;volatile
  3502  007178                     
  3503                           ;Lcd4Lignes.c: 139: __nop();
  3504  007178  F000               	nop	
  3505                           
  3506                           ;Lcd4Lignes.c: 140: adresse |= lcd_lireDonnees();
  3507  00717A  ECFB  F037         	call	_lcd_lireDonnees	;wreg free
  3508  00717E  0100               	movlb	0	; force () banked
  3509  007180  13B5               	iorwf	lcd_busy@adresse& (0+255),f,b
  3510  007182                     
  3511                           ; BSR set to: 0
  3512                           ;Lcd4Lignes.c: 141: PORTAbits.RA2 = 0;
  3513  007182  9480               	bcf	128,2,c	;volatile
  3514  007184                     
  3515                           ;Lcd4Lignes.c: 143: };Lcd4Lignes.c: 144: while(adresse&0x80);
  3516  007184  0100               	movlb	0	; force () banked
  3517  007186  BFB5               	btfsc	lcd_busy@adresse& (0+255),7,b
  3518  007188  EFC8  F038         	goto	u671
  3519  00718C  EFCA  F038         	goto	u670
  3520  007190                     u671:
  3521  007190  EFB0  F038         	goto	l190
  3522  007194                     u670:
  3523  007194                     
  3524                           ; BSR set to: 0
  3525                           ;Lcd4Lignes.c: 146: PORTAbits.RA1 = 0;
  3526  007194  9280               	bcf	128,1,c	;volatile
  3527  007196                     
  3528                           ; BSR set to: 0
  3529                           ;Lcd4Lignes.c: 147: return(adresse&0x7f);
  3530  007196  0100               	movlb	0	; force () banked
  3531  007198  51B5               	movf	lcd_busy@adresse& (0+255),w,b
  3532  00719A  0B7F               	andlw	127
  3533  00719C                     
  3534                           ; BSR set to: 0
  3535  00719C  0012               	return		;funcret
  3536  00719E                     __end_of_lcd_busy:
  3537                           	opt callstack 0
  3538                           
  3539 ;; *************** function _lcd_lireDonnees *****************
  3540 ;; Defined at:
  3541 ;;		line 93 in file "Lcd4Lignes.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      unsigned char 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3555 ;;      Params:         0       0       0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0
  3558 ;;      Totals:         0       0       0       0       0       0       0
  3559 ;;Total ram usage:        0 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_lcd_busy
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text26
  3569  006FF6                     __ptext26:
  3570                           	opt callstack 0
  3571  006FF6                     _lcd_lireDonnees:
  3572                           	opt callstack 27
  3573  006FF6                     
  3574                           ;Lcd4Lignes.c: 96: return (PORTD & 0x0f);
  3575  006FF6  5083               	movf	131,w,c	;volatile
  3576  006FF8  0B0F               	andlw	15
  3577  006FFA  0012               	return		;funcret
  3578  006FFC                     __end_of_lcd_lireDonnees:
  3579                           	opt callstack 0
  3580  0000                     
  3581                           	psect	param0
  3582  0000                     tosu	equ	0xFFF
  3583                           tosh	equ	0xFFE
  3584                           tosl	equ	0xFFD
  3585                           stkptr	equ	0xFFC
  3586                           pclatu	equ	0xFFB
  3587                           pclath	equ	0xFFA
  3588                           pcl	equ	0xFF9
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           indf0	equ	0xFEF
  3596                           postinc0	equ	0xFEE
  3597                           postdec0	equ	0xFED
  3598                           preinc0	equ	0xFEC
  3599                           plusw0	equ	0xFEB
  3600                           fsr0h	equ	0xFEA
  3601                           fsr0l	equ	0xFE9
  3602                           wreg	equ	0xFE8
  3603                           indf1	equ	0xFE7
  3604                           postinc1	equ	0xFE6
  3605                           postdec1	equ	0xFE5
  3606                           preinc1	equ	0xFE4
  3607                           plusw1	equ	0xFE3
  3608                           fsr1h	equ	0xFE2
  3609                           fsr1l	equ	0xFE1
  3610                           bsr	equ	0xFE0
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           preinc2	equ	0xFDC
  3615                           plusw2	equ	0xFDB
  3616                           fsr2h	equ	0xFDA
  3617                           fsr2l	equ	0xFD9
  3618                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        68
    BSS         168
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160     34     122
    BANK1           256      0     148
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    lcd_putMessage@chaine	PTR const unsigned char  size(2) Largest target is 84
		 -> m_tabMines(BANK0[84]), m_tabVue(BANK1[84]), 

    deplace@y	PTR unsigned char  size(2) Largest target is 2
		 -> main@posY(BANK0[2]), 

    deplace@x	PTR unsigned char  size(2) Largest target is 2
		 -> main@posX(BANK0[2]), 

    main@posY	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    main@posX	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_rempliMines
    _rempliMines->___awmod
    _rand->___lmul
    ___awmod->_rand
    _metToucheCombien->_calculToucheCombien
    _calculToucheCombien->___wmul
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_curseurHome->_lcd_wrCom
    _initialisation->_srand
    _deplace->_lcd_gotoXY
    _afficheTabVue->_lcd_putMessage
    _lcd_putMessage->_lcd_ecritChar
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_gotoXY->_lcd_wrCom
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    6448
                                             29 BANK0      5     5      0
                      _afficheTabVue
                            _deplace
                         _initTabVue
                     _initialisation
                           _lcd_init
                   _metToucheCombien
                        _rempliMines
 ---------------------------------------------------------------------------------
 (1) _rempliMines                                          9     7      2    1143
                                             20 BANK0      9     7      2
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     370
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _metToucheCombien                                     5     5      0    1649
                                             18 BANK0      5     5      0
                _calculToucheCombien
 ---------------------------------------------------------------------------------
 (2) _calculToucheCombien                                 12     8      4    1337
                                              6 BANK0     12     8      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     867
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     738
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      22
                                              2 BANK0      1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     560
                                              3 BANK0      4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0      98
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initTabVue                                           4     4      0     158
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _deplace                                              7     3      4    1299
                                              5 BANK0      7     3      4
                          _getAnalog
                         _lcd_gotoXY
 ---------------------------------------------------------------------------------
 (2) _getAnalog                                            2     2      0      15
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _afficheTabVue                                        1     1      0    1291
                                              8 BANK0      1     1      0
                         _lcd_gotoXY
                     _lcd_putMessage
 ---------------------------------------------------------------------------------
 (2) _lcd_putMessage                                       3     1      2     555
                                              5 BANK0      3     1      2
                      _lcd_ecritChar
 ---------------------------------------------------------------------------------
 (3) _lcd_ecritChar                                        2     2      0     313
                                              3 BANK0      2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0     112
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoXY                                           2     1      1     646
                                              3 BANK0      2     1      1
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_wrCom                                            1     1      0     156
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (3) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_ecrireDonnees                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             2     2      0      46
                                              0 BANK0      2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (4) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _afficheTabVue
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_putMessage
       _lcd_ecritChar
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
         _lcd_wrData
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
   _deplace
     _getAnalog
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
   _initTabVue
   _initialisation
     _srand
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _metToucheCombien
     _calculToucheCombien
       ___wmul
   _rempliMines
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      94       6       57.8%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     22      7A       4       76.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10E      14        0.0%
DATA                 0      0     10E      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Nov 30 20:07:19 2019

 __end_of_calculToucheCombien 7D40                            l76 76B6                            l69 711A  
                          l87 78C4                            l96 7A22           ___wmul@multiplicand 00B6  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000  __size_of_lcd_strobeEnableBit 0008                           l112 7D3E  
                         l201 70E6                           l105 7C7E                           l204 741E  
                         l125 7B9C                           l213 700A                           l207 705E  
                         l311 7086                           l160 72EE                           l152 70A2  
                         l322 74E6                           l155 70B2                           l323 74F6  
                         l228 7568                           l261 7002                           l245 71EA  
                         l190 7160                           l191 7194                           l239 723E  
                         l184 6FFA                           l192 719C                           l258 760A  
                         l187 7036                           l198 748A                           l555 7768  
                         l975 701A                           l978 7294                  __CFG_CPB$OFF 000000  
                         u130 70B0                           u131 70AC                  __CFG_CPD$OFF 000000  
                         u700 74AC                           u701 74A8                           u710 74E6  
                         u711 74E2                           u800 7588                           u720 7BDC  
                         u801 7584                           u721 7BD8                           u810 75A4  
                         u730 7BF6                           u811 75A0                           u731 7BF2  
                         u900 7624                           u820 75F0                           u740 7C7A  
                         u901 7620                           u821 75EC                           u741 7C76  
                         u670 7194                           u910 7640                           u830 7606  
                         u750 7CBE                           u671 7190                           u911 763C  
                         u831 7602                           u751 7CBA                           u680 7464  
                         u920 768A                           u760 7CDC                           u840 76CC  
                         u681 7460                           u921 7686                           u761 7CD8  
                         u841 76C8                           u690 7478                           u930 76B6  
                         u770 7D1C                           u850 76E6                           u691 7474  
                         u931 76B2                           u771 7D18                           u851 76E2  
                         u780 7D3A                           u860 7700                           u940 7782  
                         u781 7D36                           u861 76FC                           u941 777E  
                         u790 71EA                           u870 771E                           u950 779E  
                         u791 71E6                           u871 771A                           u951 779A  
                         u880 7734                           u960 77E8                           u881 7730  
                         u961 77E4                           u890 7758                           u970 77FE  
                         u891 7754                           u971 77FA                           u980 7870  
                         u981 786C                           u990 78C4                           u991 78C0  
                __CFG_BORV$18 000000                  ___awmod@sign 00C7                           prod 000FF3  
                 lcd_gotoXY@x 00B8                           wreg 000FE8                   lcd_gotoXY@y 00B7  
                __CFG_LVP$OFF 000000                          l2000 768A                          l2002 76A0  
                        l2100 7B08                          l2004 76A4                          l2020 77D2  
                        l2012 7786                          l2102 7B20                          l2110 7B80  
                        l2030 7832                          l2022 77D6                          l2014 778C  
                        l2006 776A                          l2104 7B30                          l2040 78CC  
                        l2032 7870                          l2024 77E8                          l2008 7770  
                        l2120 734E                          l2106 7B42                          l2050 78FE  
                        l2034 78A0                          l2026 77EC                          l2018 77A2  
                        l2130 737C                          l2122 7362                          l2108 7B74  
                        l2060 79FA                          l2052 793C                          l2044 78E2  
                        l2028 7802                          l2036 78A8                          l2132 7380  
                        l2124 7366                          l1270 708C                          l2054 7988  
                        l2062 7A0C                          l2046 78E8                          l2038 78C6  
                        l2134 7384                          l2126 736A                          l2072 72B2  
                        l1272 70A0                          l2080 7A24                          l2064 7A10  
                        l2056 79C6                          l2136 739C                          l2128 736E  
                        l2074 72C0                          l2066 7296                          l1274 70A0  
                        l2090 7A8C                          l2082 7A38                          l2058 79F6  
                        l2076 72D8                          l2068 729C                          l1276 70B0  
                        l2092 7A9E                          l2084 7A4A                          l1702 6FFC  
                        l1710 742C                          l2078 72DC                          l2094 7AD0  
                        l2086 7A64                          l1720 743E                          l1712 742E  
                        l1704 7424                          l2088 7A7C                          l2096 7ADC  
                        l1800 7240                          l1730 7478                          l1722 7446  
                        l1714 7430                          l1706 7428                          l2098 7AEE  
                        l1810 7BC6                          l1802 7276                          l1732 7482  
                        l1724 744A                          l1716 743A                          l1708 742C  
                        l1740 70B8                          l1900 7576                          l1820 7C04  
                        l1812 7BCC                          l1804 7288                          l1734 7486  
                        l1726 7452                          l1718 743E                          l1750 70C4  
                        l1742 70BC                          l1910 75A8                          l1830 7CDC  
                        l1822 7C24                          l1814 7BDC                          l1680 715C  
                        l1736 7486                          l1728 7464                          l1840 74FC  
                        l1760 70DE                          l1752 70CE                          l1744 70C0  
                        l1912 75DA                          l1920 7606                          l1904 758C  
                        l1824 7C7A                          l1832 7CE2                          l1816 7BE6  
                        l1808 7B9E                          l1674 6FF6                          l1690 7178  
                        l1682 7164                          l1842 7500                          l1762 70DE  
                        l1754 70D2                          l1746 70C0                          l1770 71F0  
                        l1914 75DE                          l1906 7592                          l1834 7D1C  
                        l1826 7C84                          l1818 7BF6                          l1930 76D8  
                        l1922 76B8                          l1692 7182                          l1684 7174  
                        l1844 7510                          l1852 7540                          l1764 70E2  
                        l1756 70D2                          l1748 70C2                          l1772 7200  
                        l1780 721E                          l1860 71C6                          l1916 75F0  
                        l1836 7D3A                          l1828 7CBE                          l1940 7710  
                        l1932 76E6                          l1924 76BE                          l1694 7184  
                        l1686 7176                          l1678 7020                          l1846 7520  
                        l1758 70DA                          l1774 720A                          l1854 719E  
                        l1918 75F4                          l1870 73D2                          l1862 73B6  
                        l1782 7060                          l1942 771E                          l1950 7748  
                        l1934 76EE                          l1926 76CC                          l1790 749E  
                        l1696 7184                          l1688 7176                          l1848 7530  
                        l1776 7214                          l1856 71A8                          l1960 70F0  
                        l1768 7004                          l1880 73EE                          l1872 73D8  
                        l1864 73BA                          l1784 707E                          l1952 7758  
                        l1944 7734                          l1936 7700                          l1928 76D4  
                        l1792 74AC                          l1698 7196                          l1858 71C2  
                        l1970 710C                          l1962 70FA                          l1890 740E  
                        l1882 73F6                          l1874 73DC                          l1866 73CE  
                        l1954 7760                          l1946 773C                          l1938 7708  
                        l1794 74BC                          l1972 7110                          l1964 70FC  
                        l1892 7412                          l1884 73FC                          l1876 73E4  
                        l1868 73D0                          l1980 705A                          l1948 7742  
                        l1796 74C6                          l1788 748C                          l1990 762E  
                        l1982 760C                          l1798 700C                          l1974 7112  
                        l1966 7108                          l1958 70E8                          l1894 741A  
                        l1886 7400                          l1878 73EA                          l1984 7612  
                        l1976 7116                          l1968 710A                          l1896 756A  
                        l1888 7408                          l1994 7644                          l1898 7570  
                        l1978 7038                          l1996 7674                          l1988 7628  
                        l1998 7678                          u1000 78DE                          u1001 78DA  
                        u1010 78FA                          u1011 78F6                          u1100 7A9E  
                        u1020 793C                          u1101 7A9A                          u1021 7938  
                        u1110 7AD0                          u1030 79C6                          u1111 7ACC  
                        u1031 79C2                          u1120 7AEE                          u1040 7A0C  
                        u1121 7AEA                          u1041 7A08                          u1130 7B20  
                        u1050 7A22                          u1131 7B1C                          u1051 7A1E  
                        u1060 72AE                          u1140 7B42                          u1061 72AA  
                        u1141 7B3E                          u1070 72EE                          u1150 7B74  
                        u1071 72EA                          u1151 7B70                          u1080 7A4A  
                        u1081 7A46                          u1090 7A7C                          u1091 7A78  
                        u1307 73F0                          u1317 7402                          u1327 7414  
                        u1337 744C                          u1347 747A                          u1277 73A4  
                        u1287 73C2                          u1297 73DE                          _RCIF 007CF5  
                        _TMR1 000FCE              ??_initialisation 00B6                          _main 734E  
                        _rand 7240                          fsr2h 000FDA                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          prodh 000FF4  
                        prodl 000FF3                          start 0000               ?_lcd_putMessage 00B9  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             ??_lcd_ecritChar 00B7                         ?_main 00B4                         ?_rand 00C0  
             __end_of___awmod 776A                         _ANSEL 000F7E                         _RCREG 000FAE  
                       _SPBRG 000FAF                         _PORTD 000F83                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISD 000F95                         _TXREG 000FAD  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000               __end_of_deplace 7B9E           ___lmul@multiplicand 00B8  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               ??_lcd_initCGRam 00B7                         _randx 00D6  
                       _srand 700C                         tablat 000FF5                         status 000FD8  
              __CFG_HFOFST$ON 000000                __CFG_PBADEN$ON 000000              _metToucheCombien 78C6  
             __initialization 72F0                  __end_of_main 73B6                  __end_of_rand 7296  
  calculToucheCombien@nbMines 00C1          lcd_putMessage@chaine 00B9    calculToucheCombien@colonne 00BC  
                      ??_main 00D1                        ??_rand 00C2                 __activetblptr 000003  
                      _ADCON1 000FC1                        _ADRESH 000FC4                        ?_srand 00B4  
                      _ANSELH 000F7F                   initTabVue@i 00B7                   initTabVue@j 00B6  
              __CFG_WDTEN$OFF 000000                  ?_rempliMines 00C8                        _SPBRGH 000FB0  
              __CFG_XINST$OFF 000000                lcd_initCGRam@i 00B9                lcd_initCGRam@j 00BA  
              getAnalog@canal 00B5              __end_of_lcd_busy 719E              __end_of_lcd_init 7060  
                      ___lmul 748C                        ___wmul 7060                __CFG_STVREN$ON 000000  
                   ??___awmod 00C6                        clear_0 7336                        clear_1 7342  
             ___awmod@divisor 00C4                     ??_deplace 00BD               ___awmod@counter 00C6  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                      srand@x 00B4        __size_of_afficheTabVue 005A             _lcd_resetSequence 73B6  
                  __accesstop 0060       __end_of__initialization 7348           _lcd_strobeEnableBit 6FFC  
          ?_lcd_resetSequence 00B4                 ___rparam_used 000000                deplace@analogX 00BE  
              deplace@analogY 00BF                  __pidataBANK0 6FF2                  __pidataBANK1 711C  
         ??_lcd_resetSequence 00B6                 __end_of_srand 701C          ?_lcd_strobeEnableBit 00B4  
          __size_of_getAnalog 002C            __size_of_lcd_wrCom 006C     __end_of_lcd_resetSequence 7420  
                     ??_srand 00B6      __size_of_lcd_lireDonnees 0006             _lcd_ecrireDonnees 701C  
                  __pbssBANK0 0060                    __pbssBANK1 0100              ??_lcd_putMessage 00BB  
          ?_lcd_ecrireDonnees 00B4      __size_of_lcd_curseurHome 0008           ??_lcd_ecrireDonnees 00B4  
                     ?___lmul 00B4                       ?___wmul 00B4                 _afficheTabVue 7296  
              ___lmul@product 00BC         ??_lcd_strobeEnableBit 00B4  __size_of_calculToucheCombien 01A2  
    __end_of_metToucheCombien 7A24                    _lcd_gotoXY 74F8                    _lcd_wrData 70B4  
   __end_of_lcd_ecrireDonnees 7038                     ?_lcd_busy 00B4                     ?_lcd_init 00B4  
     lcd_ecrireDonnees@donnee 00B5                    _m_tabMines 0060             __end_of_getAnalog 70B4  
        __size_of_rempliMines 015C                       __Hparam 0000                       __Lparam 0000  
                  _initTabVue 760C             __end_of_lcd_wrCom 748C                ?_afficheTabVue 00B4  
             __size_of___lmul 006C                       ___awmod 76B8               __size_of___wmul 0028  
                     __pcinit 72F0                     _ANSELbits 000F7E                       __ramtop 0600  
                     _deplace 7A24                       __ptext0 734E                       __ptext1 776A  
                     __ptext2 7240                       __ptext3 748C                       __ptext4 76B8  
                     __ptext5 78C6                       __ptext6 7B9E                       __ptext7 7060  
                     __ptext8 7038                       __ptext9 73B6         __end_of_lcd_ecritChar 7240  
             lcd_busy@adresse 00B5                     _T1CONbits 000FCD              ___awmod@dividend 00C2  
            lcd_ecritChar@car 00B7                    ??_lcd_busy 00B4                    ??_lcd_init 00BB  
  __size_of_lcd_resetSequence 006A          end_of_initialization 7348         __end_of_lcd_initCGRam 760C  
           ??_lcd_lireDonnees 00B4                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postinc0 000FEE                       postinc2 000FDE       __size_of_initialisation 0034  
           ??_lcd_curseurHome 00B7           lcd_ecritChar@posRam 00B8                     _PORTAbits 000F80  
                 ?_lcd_gotoXY 00B7                     _TRISCbits 000F94                   ?_lcd_wrData 00B4  
  __size_of_lcd_ecrireDonnees 001C                     _TXSTAbits 000FAC               ??_afficheTabVue 00BC  
                 ?_initTabVue 00B4                __end_of___lmul 74F8                __end_of___wmul 7088  
                 _BAUDCONbits 000FB8           start_initialization 72F0           _calculToucheCombien 7B9E  
         __size_of_lcd_gotoXY 0072                      ??___lmul 00BC                      ??___wmul 00B8  
               rempliMines@nb 00C8           __size_of_lcd_wrData 0034                   __pdataBANK0 00D6  
                 __pdataBANK1 0154              __CFG_LPT1OSC$OFF 000000          ?_calculToucheCombien 00BA  
               __pcstackBANK0 00B4             ?_metToucheCombien 00B4           __size_of_initTabVue 00AC  
          ??_metToucheCombien 00C6             __size_of_lcd_busy 0042             __size_of_lcd_init 0028  
           __CFG_CCP2MX$PORTC 000000                     _getAnalog 7088   __end_of_lcd_strobeEnableBit 7004  
              _initialisation 70E8                      ?___awmod 00C2                      ?_deplace 00B9  
                   _lcd_wrCom 7420         ??_calculToucheCombien 00BE               _lcd_lireDonnees 6FF6  
         lcd_wrData@caractere 00B6                __size_of_srand 0010                 ??_rempliMines 00CA  
             _lcd_curseurHome 7004                ___wmul@product 00B8        __end_of_initialisation 711C  
                  ?_getAnalog 00B4              __CFG_WDTPS$32768 000000       __size_of_lcd_putMessage 004E  
                  ?_lcd_wrCom 00B4                    _ADCON0bits 000FC2                    _ADCON2bits 000FC0  
           ___wmul@multiplier 00B4                  ??_lcd_gotoXY 00B8                  ??_lcd_wrData 00B6  
           lcd_wrCom@commande 00B6             ___lmul@multiplier 00B4                     copy_data0 7304  
                   copy_data1 7324                      __Hparam0 0000        __size_of_lcd_ecritChar 0054  
                    __Lparam0 0000               ?_initialisation 00B4           __end_of_rempliMines 78C6  
                ??_initTabVue 00B4            __CFG_BOREN$SBORDIS 000000                  rempliMines@i 00CF  
                rempliMines@j 00D0                  rempliMines@x 00CD                  rempliMines@y 00CE  
          __end_of_lcd_gotoXY 756A            __end_of_lcd_wrData 70E8              __size_of___awmod 00B2  
      __size_of_lcd_initCGRam 00A2               lcd_putMessage@j 00BB              __size_of_deplace 017A  
     __end_of_lcd_lireDonnees 6FFC                      _matCGRAM 0154       __end_of_lcd_curseurHome 700C  
                    __ptext10 756A                      __ptext11 7004                      __ptext20 70B4  
                    __ptext12 70E8                      __ptext21 74F8                      __ptext13 700C  
                    __ptext22 7420                      __ptext14 760C                      __ptext23 6FFC  
                    __ptext15 7A24                      __ptext24 701C                      __ptext16 7088  
                    __ptext25 715C                      __ptext17 7296                      __ptext26 6FF6  
                    __ptext18 719E                      __ptext19 71EC             metToucheCombien@i 00C9  
           metToucheCombien@j 00CA                      _lcd_busy 715C                      _lcd_init 7038  
          __end_of_initTabVue 76B8      calculToucheCombien@ligne 00BA                      _m_tabVue 0100  
               __size_of_main 0068                 __size_of_rand 0056                      deplace@x 00B9  
                    deplace@y 00BB                   ??_getAnalog 00B4         __end_of_afficheTabVue 72F0  
                    main@posX 00D2                      main@posY 00D4                   ??_lcd_wrCom 00B6  
               _lcd_ecritChar 71EC                afficheTabVue@i 00BC                 _lcd_initCGRam 756A  
                 _rempliMines 776A          calculToucheCombien@i 00C2          calculToucheCombien@j 00C4  
   __size_of_metToucheCombien 015E                _lcd_putMessage 719E                ?_lcd_ecritChar 00B4  
            ?_lcd_lireDonnees 00B4              ?_lcd_curseurHome 00B4                ?_lcd_initCGRam 00B4  
           __CFG_FOSC$INTIO67 000000        __end_of_lcd_putMessage 71EC  
