

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Nov 29 13:28:50 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec,minocg
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,minocg
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,minocg
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,minocg
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2,minocg
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 2.10
    31                           ; Generated 31/07/2019 GMT
    32                           ; 
    33                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F45K20 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataBANK0
    66  0008F8                     __pidataBANK0:
    67                           	opt callstack 0
    68                           
    69                           ;initializer for _matCGRAM
    70  0008F8  08                 	db	8
    71  0008F9  04                 	db	4
    72  0008FA  04                 	db	4
    73  0008FB  0A                 	db	10
    74  0008FC  11                 	db	17
    75  0008FD  1F                 	db	31
    76  0008FE  11                 	db	17
    77  0008FF  00                 	db	0
    78  000900  1F                 	db	31
    79  000901  1B                 	db	27
    80  000902  11                 	db	17
    81  000903  11                 	db	17
    82  000904  11                 	db	17
    83  000905  11                 	db	17
    84  000906  1B                 	db	27
    85  000907  1F                 	db	31
    86  000908  00                 	db	0
    87  000909  15                 	db	21
    88  00090A  0E                 	db	14
    89  00090B  1F                 	db	31
    90  00090C  1F                 	db	31
    91  00090D  0E                 	db	14
    92  00090E  15                 	db	21
    93  00090F  00                 	db	0
    94  000910  0E                 	db	14
    95  000911  11                 	db	17
    96  000912  15                 	db	21
    97  000913  15                 	db	21
    98  000914  15                 	db	21
    99  000915  0E                 	db	14
   100  000916  15                 	db	21
   101  000917  04                 	db	4
   102  000918  04                 	db	4
   103  000919  04                 	db	4
   104  00091A  04                 	db	4
   105  00091B  04                 	db	4
   106  00091C  0E                 	db	14
   107  00091D  0E                 	db	14
   108  00091E  1B                 	db	27
   109  00091F  11                 	db	17
   110  000920  04                 	db	4
   111  000921  0A                 	db	10
   112  000922  0E                 	db	14
   113  000923  11                 	db	17
   114  000924  1F                 	db	31
   115  000925  10                 	db	16
   116  000926  0E                 	db	14
   117  000927  00                 	db	0
   118  000928  08                 	db	8
   119  000929  04                 	db	4
   120  00092A  0E                 	db	14
   121  00092B  01                 	db	1
   122  00092C  0F                 	db	15
   123  00092D  11                 	db	17
   124  00092E  0F                 	db	15
   125  00092F  00                 	db	0
   126  000930  04                 	db	4
   127  000931  0A                 	db	10
   128  000932  0E                 	db	14
   129  000933  01                 	db	1
   130  000934  0F                 	db	15
   131  000935  11                 	db	17
   132  000936  0F                 	db	15
   133  000937  00                 	db	0
   134                           
   135                           ;initializer for _randx
   136  000938  0001               	dw	1
   137  00093A  0000               	dw	0
   138  0000                     _TRISCbits	set	3988
   139  0000                     _PORTAbits	set	3968
   140  0000                     _PORTD	set	3971
   141  0000                     _ANSELbits	set	3966
   142  0000                     _TRISA	set	3986
   143  0000                     _ANSEL	set	3966
   144  0000                     _TRISB	set	3987
   145  0000                     _ANSELH	set	3967
   146  0000                     _TRISD	set	3989
   147  0000                     _TMR1	set	4046
   148  0000                     _RCREG	set	4014
   149  0000                     _TXREG	set	4013
   150  0000                     _RCSTAbits	set	4011
   151  0000                     _TXSTAbits	set	4012
   152  0000                     _BAUDCONbits	set	4024
   153  0000                     _SPBRG	set	4015
   154  0000                     _SPBRGH	set	4016
   155  0000                     _ADCON2bits	set	4032
   156  0000                     _ADCON1	set	4033
   157  0000                     _ADCON0bits	set	4034
   158  0000                     _T1CONbits	set	4045
   159  0000                     _RCIF	set	31989
   160                           
   161                           	psect	smallconst
   162  000600                     __psmallconst:
   163                           	opt callstack 0
   164  000600  00                 	db	0
   165  000601                     STR_1:
   166                           
   167                           ; BSR set to: 0
   168  000601  4C                 	db	76	;'L'
   169  000602  41                 	db	65	;'A'
   170  000603  42                 	db	66	;'B'
   171  000604  36                 	db	54	;'6'
   172  000605  20                 	db	32
   173  000606  49                 	db	73	;'I'
   174  000607  73                 	db	115	;'s'
   175  000608  61                 	db	97	;'a'
   176  000609  6B                 	db	107	;'k'
   177  00060A  20                 	db	32
   178  00060B  42                 	db	66	;'B'
   179  00060C  65                 	db	101	;'e'
   180  00060D  64                 	db	100	;'d'
   181  00060E  61                 	db	97	;'a'
   182  00060F  72                 	db	114	;'r'
   183  000610  64                 	db	100	;'d'
   184  000611  00                 	db	0
   185                           
   186                           ; #config settings
   187  000612  00                 	db	0	; dummy byte at the end
   188  0000                     
   189                           	psect	cinit
   190  000A1A                     __pcinit:
   191                           	opt callstack 0
   192  000A1A                     start_initialization:
   193                           	opt callstack 0
   194  000A1A                     __initialization:
   195                           	opt callstack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (68 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199  000A1A  0EF8               	movlw	low __pidataBANK0
   200  000A1C  6EF6               	movwf	tblptrl,c
   201  000A1E  0E08               	movlw	high __pidataBANK0
   202  000A20  6EF7               	movwf	tblptrh,c
   203  000A22  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204  000A24  6EF8               	movwf	tblptru,c
   205  000A26  EE00  F060         	lfsr	0,__pdataBANK0
   206  000A2A  EE10 F044          	lfsr	1,68
   207  000A2E                     copy_data0:
   208  000A2E  0009               	tblrd		*+
   209  000A30  CFF5 FFEE          	movff	tablat,postinc0
   210  000A34  50E5               	movf	postdec1,w,c
   211  000A36  50E1               	movf	fsr1l,w,c
   212  000A38  E1FA               	bnz	copy_data0
   213                           
   214                           ; Clear objects allocated to BANK1 (168 bytes)
   215  000A3A  EE01  F000         	lfsr	0,__pbssBANK1
   216  000A3E  0EA8               	movlw	168
   217  000A40                     clear_0:
   218  000A40  6AEE               	clrf	postinc0,c
   219  000A42  06E8               	decf	wreg,f,c
   220  000A44  E1FD               	bnz	clear_0
   221  000A46                     end_of_initialization:
   222                           	opt callstack 0
   223  000A46                     __end_of__initialization:
   224                           	opt callstack 0
   225  000A46  0100               	movlb	0
   226  000A48  EFBF  F004         	goto	_main	;jump to C main() function
   227                           
   228                           	psect	dataBANK0
   229  000060                     __pdataBANK0:
   230                           	opt callstack 0
   231  000060                     _matCGRAM:
   232                           	opt callstack 0
   233  000060                     	ds	64
   234  0000A0                     _randx:
   235                           	opt callstack 0
   236  0000A0                     	ds	4
   237                           
   238                           	psect	bssBANK1
   239  000100                     __pbssBANK1:
   240                           	opt callstack 0
   241  000100                     _m_tabMines:
   242                           	opt callstack 0
   243  000100                     	ds	84
   244  000154                     _m_tabVue:
   245                           	opt callstack 0
   246  000154                     	ds	84
   247                           
   248                           	psect	cstackBANK0
   249  0000A4                     __pcstackBANK0:
   250                           	opt callstack 0
   251  0000A4                     ??_initTabVue:
   252  0000A4                     ??_lcd_ecrireDonnees:
   253  0000A4                     ??_lcd_busy:
   254  0000A4                     srand@x:
   255                           	opt callstack 0
   256                           
   257                           ; 2 bytes @ 0x0
   258  0000A4                     	ds	1
   259  0000A5                     lcd_ecrireDonnees@donnee:
   260                           	opt callstack 0
   261  0000A5                     lcd_busy@adresse:
   262                           	opt callstack 0
   263                           
   264                           ; 1 bytes @ 0x1
   265  0000A5                     	ds	1
   266  0000A6                     ??_lcd_resetSequence:
   267  0000A6                     initTabVue@j:
   268                           	opt callstack 0
   269  0000A6                     lcd_wrCom@commande:
   270                           	opt callstack 0
   271  0000A6                     lcd_wrData@caractere:
   272                           	opt callstack 0
   273                           
   274                           ; 1 bytes @ 0x2
   275  0000A6                     	ds	1
   276  0000A7                     ??_lcd_initCGRam:
   277  0000A7                     initTabVue@i:
   278                           	opt callstack 0
   279  0000A7                     lcd_ecritChar@car:
   280                           	opt callstack 0
   281                           
   282                           ; 1 bytes @ 0x3
   283  0000A7                     	ds	1
   284  0000A8                     lcd_ecritChar@posRam:
   285                           	opt callstack 0
   286                           
   287                           ; 1 bytes @ 0x4
   288  0000A8                     	ds	1
   289  0000A9                     lcd_initCGRam@i:
   290                           	opt callstack 0
   291  0000A9                     lcd_putMessage@chaine:
   292                           	opt callstack 0
   293                           
   294                           ; 2 bytes @ 0x5
   295  0000A9                     	ds	1
   296  0000AA                     lcd_initCGRam@j:
   297                           	opt callstack 0
   298                           
   299                           ; 1 bytes @ 0x6
   300  0000AA                     	ds	1
   301  0000AB                     ??_lcd_putMessage:
   302                           
   303                           ; 1 bytes @ 0x7
   304  0000AB                     	ds	2
   305  0000AD                     lcd_putMessage@j:
   306                           	opt callstack 0
   307                           
   308                           ; 1 bytes @ 0x9
   309  0000AD                     	ds	1
   310  0000AE                     ??_main:
   311                           
   312                           ; 1 bytes @ 0xA
   313  0000AE                     	ds	1
   314                           
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 46 in file "main.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;		None
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   334 ;;      Params:         0       0       0       0       0       0       0
   335 ;;      Locals:         0       0       0       0       0       0       0
   336 ;;      Temps:          0       1       0       0       0       0       0
   337 ;;      Totals:         0       1       0       0       0       0       0
   338 ;;Total ram usage:        1 bytes
   339 ;; Hardware stack levels required when called:    6
   340 ;; This function calls:
   341 ;;		_initTabVue
   342 ;;		_initialisation
   343 ;;		_lcd_init
   344 ;;		_lcd_putMessage
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351  00097E                     __ptext0:
   352                           	opt callstack 0
   353  00097E                     _main:
   354                           	opt callstack 25
   355  00097E                     
   356                           ;main.c: 48: initialisation();
   357  00097E  ECF3  F004         	call	_initialisation	;wreg free
   358  000982                     
   359                           ;main.c: 49: lcd_init();
   360  000982  EC26  F005         	call	_lcd_init	;wreg free
   361  000986                     
   362                           ;main.c: 50: lcd_putMessage("LAB6 Isak Bedard");
   363  000986  0E01               	movlw	low STR_1
   364  000988  0100               	movlb	0	; force () banked
   365  00098A  6FA9               	movwf	lcd_putMessage@chaine& (0+255),b
   366  00098C  0E06               	movlw	high STR_1
   367  00098E  6FAA               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
   368  000990  ECB1  F003         	call	_lcd_putMessage	;wreg free
   369  000994                     
   370                           ;main.c: 51: initTabVue();
   371  000994  EC0A  F003         	call	_initTabVue	;wreg free
   372  000998                     l1384:
   373                           
   374                           ;main.c: 53: {;main.c: 54: _delay((unsigned long)((100)*(1000000/4000.0)));
   375  000998  0E21               	movlw	33
   376  00099A  0100               	movlb	0	; force () banked
   377  00099C  6FAE               	movwf	??_main& (0+255),b
   378  00099E  0E76               	movlw	118
   379  0009A0                     u247:
   380  0009A0  2EE8               	decfsz	wreg,f,c
   381  0009A2  D7FE               	bra	u247
   382  0009A4  2FAE               	decfsz	??_main& (0+255),f,b
   383  0009A6  D7FC               	bra	u247
   384  0009A8  F000               	nop	
   385  0009AA  EFCC  F004         	goto	l1384
   386  0009AE  EF00  F000         	goto	start
   387  0009B2                     __end_of_main:
   388                           	opt callstack 0
   389                           
   390 ;; *************** function _lcd_putMessage *****************
   391 ;; Defined at:
   392 ;;		line 387 in file "Lcd4Lignes.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;  chaine          2    5[BANK0 ] PTR const unsigned char 
   395 ;;		 -> STR_1(17), 
   396 ;; Auto vars:     Size  Location     Type
   397 ;;  j               1    9[BANK0 ] unsigned char 
   398 ;; Return value:  Size  Location     Type
   399 ;;                  1    wreg      void 
   400 ;; Registers used:
   401 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   407 ;;      Params:         0       2       0       0       0       0       0
   408 ;;      Locals:         0       1       0       0       0       0       0
   409 ;;      Temps:          0       2       0       0       0       0       0
   410 ;;      Totals:         0       5       0       0       0       0       0
   411 ;;Total ram usage:        5 bytes
   412 ;; Hardware stack levels used:    1
   413 ;; Hardware stack levels required when called:    4
   414 ;; This function calls:
   415 ;;		_lcd_ecritChar
   416 ;; This function is called by:
   417 ;;		_main
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           	psect	text1
   422  000762                     __ptext1:
   423                           	opt callstack 0
   424  000762                     _lcd_putMessage:
   425                           	opt callstack 26
   426  000762                     
   427                           ;Lcd4Lignes.c: 389: unsigned char j;;Lcd4Lignes.c: 391: for(j = 0; chaine[j] != 0; j++)
   428  000762  0E00               	movlw	0
   429  000764  0100               	movlb	0	; force () banked
   430  000766  6FAD               	movwf	lcd_putMessage@j& (0+255),b
   431  000768  EFCC  F003         	goto	l1350
   432  00076C                     l1346:
   433                           
   434                           ; BSR set to: 0
   435                           ;Lcd4Lignes.c: 392: lcd_ecritChar(chaine[j]);
   436  00076C  0100               	movlb	0	; force () banked
   437  00076E  51AD               	movf	lcd_putMessage@j& (0+255),w,b
   438  000770  0100               	movlb	0	; force () banked
   439  000772  25A9               	addwf	lcd_putMessage@chaine& (0+255),w,b
   440  000774  0100               	movlb	0	; force () banked
   441  000776  6FAB               	movwf	??_lcd_putMessage& (0+255),b
   442  000778  0E00               	movlw	0
   443  00077A  0100               	movlb	0	; force () banked
   444  00077C  21AA               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
   445  00077E  0100               	movlb	0	; force () banked
   446  000780  6FAC               	movwf	(??_lcd_putMessage+1)& (0+255),b
   447  000782  C0AB  FFF6         	movff	??_lcd_putMessage,tblptrl
   448  000786  C0AC  FFF7         	movff	??_lcd_putMessage+1,tblptrh
   449  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   450  00078A  6AF8               	clrf	tblptru,c
   451  00078C                     	endif
   452  00078C                     	if	0	;tblptru may be non-zero
   453  00078C                     	endif
   454  00078C  0008               	tblrd		*
   455  00078E  50F5               	movf	tablat,w,c
   456  000790  EC52  F004         	call	_lcd_ecritChar
   457  000794  0100               	movlb	0	; force () banked
   458  000796  2BAD               	incf	lcd_putMessage@j& (0+255),f,b
   459  000798                     l1350:
   460                           
   461                           ; BSR set to: 0
   462  000798  0100               	movlb	0	; force () banked
   463  00079A  51AD               	movf	lcd_putMessage@j& (0+255),w,b
   464  00079C  0100               	movlb	0	; force () banked
   465  00079E  25A9               	addwf	lcd_putMessage@chaine& (0+255),w,b
   466  0007A0  0100               	movlb	0	; force () banked
   467  0007A2  6FAB               	movwf	??_lcd_putMessage& (0+255),b
   468  0007A4  0E00               	movlw	0
   469  0007A6  0100               	movlb	0	; force () banked
   470  0007A8  21AA               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
   471  0007AA  0100               	movlb	0	; force () banked
   472  0007AC  6FAC               	movwf	(??_lcd_putMessage+1)& (0+255),b
   473  0007AE  C0AB  FFF6         	movff	??_lcd_putMessage,tblptrl
   474  0007B2  C0AC  FFF7         	movff	??_lcd_putMessage+1,tblptrh
   475  0007B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   476  0007B6  6AF8               	clrf	tblptru,c
   477  0007B8                     	endif
   478  0007B8                     	if	0	;tblptru may be non-zero
   479  0007B8                     	endif
   480  0007B8  0008               	tblrd		*
   481  0007BA  50F5               	movf	tablat,w,c
   482  0007BC  0900               	iorlw	0
   483  0007BE  A4D8               	btfss	status,2,c
   484  0007C0  EFE4  F003         	goto	u191
   485  0007C4  EFE6  F003         	goto	u190
   486  0007C8                     u191:
   487  0007C8  EFB6  F003         	goto	l1346
   488  0007CC                     u190:
   489  0007CC                     
   490                           ; BSR set to: 0
   491  0007CC  0012               	return		;funcret
   492  0007CE                     __end_of_lcd_putMessage:
   493                           	opt callstack 0
   494                           
   495 ;; *************** function _lcd_ecritChar *****************
   496 ;; Defined at:
   497 ;;		line 359 in file "Lcd4Lignes.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;  car             1    wreg     unsigned char 
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  car             1    3[BANK0 ] unsigned char 
   502 ;;  posRam          1    4[BANK0 ] unsigned char 
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, status,2, status,0, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : 0/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   512 ;;      Params:         0       0       0       0       0       0       0
   513 ;;      Locals:         0       2       0       0       0       0       0
   514 ;;      Temps:          0       0       0       0       0       0       0
   515 ;;      Totals:         0       2       0       0       0       0       0
   516 ;;Total ram usage:        2 bytes
   517 ;; Hardware stack levels used:    1
   518 ;; Hardware stack levels required when called:    3
   519 ;; This function calls:
   520 ;;		_lcd_wrCom
   521 ;;		_lcd_wrData
   522 ;; This function is called by:
   523 ;;		_lcd_putMessage
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           	psect	text2
   528  0008A4                     __ptext2:
   529                           	opt callstack 0
   530  0008A4                     _lcd_ecritChar:
   531                           	opt callstack 26
   532                           
   533                           ; BSR set to: 0
   534                           ;incstack = 0
   535                           ;lcd_ecritChar@car stored from wreg
   536  0008A4  0100               	movlb	0	; force () banked
   537  0008A6  6FA7               	movwf	lcd_ecritChar@car& (0+255),b
   538  0008A8                     
   539                           ;Lcd4Lignes.c: 361: unsigned char posRam;;Lcd4Lignes.c: 363: posRam = lcd_wrData(car);
   540  0008A8  0100               	movlb	0	; force () banked
   541  0008AA  51A7               	movf	lcd_ecritChar@car& (0+255),w,b
   542  0008AC  ECD9  F004         	call	_lcd_wrData
   543  0008B0  0100               	movlb	0	; force () banked
   544  0008B2  6FA8               	movwf	lcd_ecritChar@posRam& (0+255),b
   545                           
   546                           ;Lcd4Lignes.c: 364: switch(posRam)
   547  0008B4  EF6B  F004         	goto	l1184
   548  0008B8                     l1176:
   549                           
   550                           ; BSR set to: 0
   551                           ;Lcd4Lignes.c: 367: lcd_wrCom(0xC0|0x80);
   552  0008B8  0EC0               	movlw	192
   553  0008BA  ECE7  F003         	call	_lcd_wrCom
   554                           
   555                           ;Lcd4Lignes.c: 368: break;
   556  0008BE  EF7B  F004         	goto	l151
   557  0008C2                     l1178:
   558                           
   559                           ; BSR set to: 0
   560                           ;Lcd4Lignes.c: 370: lcd_wrCom(0x94|0x80);
   561  0008C2  0E94               	movlw	148
   562  0008C4  ECE7  F003         	call	_lcd_wrCom
   563                           
   564                           ;Lcd4Lignes.c: 371: break;
   565  0008C8  EF7B  F004         	goto	l151
   566  0008CC                     l1180:
   567                           
   568                           ; BSR set to: 0
   569                           ;Lcd4Lignes.c: 373: lcd_wrCom(0xD4|0x80);
   570  0008CC  0ED4               	movlw	212
   571  0008CE  ECE7  F003         	call	_lcd_wrCom
   572                           
   573                           ;Lcd4Lignes.c: 374: break;
   574  0008D2  EF7B  F004         	goto	l151
   575  0008D6                     l1184:
   576                           
   577                           ; BSR set to: 0
   578  0008D6  0100               	movlb	0	; force () banked
   579  0008D8  51A8               	movf	lcd_ecritChar@posRam& (0+255),w,b
   580                           
   581                           ; Switch size 1, requested type "simple"
   582                           ; Number of cases is 3, Range of values is 148 to 212
   583                           ; switch strategies available:
   584                           ; Name         Instructions Cycles
   585                           ; simple_byte           10     6 (average)
   586                           ;	Chosen strategy is simple_byte
   587  0008DA  0A94               	xorlw	148	; case 148
   588  0008DC  B4D8               	btfsc	status,2,c
   589  0008DE  EF5C  F004         	goto	l1176
   590  0008E2  0A54               	xorlw	84	; case 192
   591  0008E4  B4D8               	btfsc	status,2,c
   592  0008E6  EF66  F004         	goto	l1180
   593  0008EA  0A14               	xorlw	20	; case 212
   594  0008EC  B4D8               	btfsc	status,2,c
   595  0008EE  EF61  F004         	goto	l1178
   596  0008F2  EF7B  F004         	goto	l151
   597  0008F6                     l151:
   598  0008F6  0012               	return		;funcret
   599  0008F8                     __end_of_lcd_ecritChar:
   600                           	opt callstack 0
   601                           
   602 ;; *************** function _lcd_init *****************
   603 ;; Defined at:
   604 ;;		line 258 in file "Lcd4Lignes.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;		None
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      void 
   611 ;; Registers used:
   612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   618 ;;      Params:         0       0       0       0       0       0       0
   619 ;;      Locals:         0       0       0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0       0       0
   621 ;;      Totals:         0       0       0       0       0       0       0
   622 ;;Total ram usage:        0 bytes
   623 ;; Hardware stack levels used:    1
   624 ;; Hardware stack levels required when called:    5
   625 ;; This function calls:
   626 ;;		_lcd_initCGRam
   627 ;;		_lcd_resetSequence
   628 ;;		_lcd_wrCom
   629 ;; This function is called by:
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text3
   635  000A4C                     __ptext3:
   636                           	opt callstack 0
   637  000A4C                     _lcd_init:
   638                           	opt callstack 25
   639  000A4C                     
   640                           ;Lcd4Lignes.c: 261: lcd_resetSequence();
   641  000A4C  EC1D  F004         	call	_lcd_resetSequence	;wreg free
   642                           
   643                           ;Lcd4Lignes.c: 262: lcd_wrCom(0x28);
   644  000A50  0E28               	movlw	40
   645  000A52  ECE7  F003         	call	_lcd_wrCom
   646                           
   647                           ;Lcd4Lignes.c: 263: lcd_wrCom(0x0F);
   648  000A56  0E0F               	movlw	15
   649  000A58  ECE7  F003         	call	_lcd_wrCom
   650                           
   651                           ;Lcd4Lignes.c: 264: lcd_wrCom(0x01);
   652  000A5C  0E01               	movlw	1
   653  000A5E  ECE7  F003         	call	_lcd_wrCom
   654                           
   655                           ;Lcd4Lignes.c: 265: lcd_wrCom(0x06);
   656  000A62  0E06               	movlw	6
   657  000A64  ECE7  F003         	call	_lcd_wrCom
   658                           
   659                           ;Lcd4Lignes.c: 266: lcd_wrCom(0x80);
   660  000A68  0E80               	movlw	128
   661  000A6A  ECE7  F003         	call	_lcd_wrCom
   662  000A6E                     
   663                           ;Lcd4Lignes.c: 267: lcd_initCGRam();
   664  000A6E  EC60  F003         	call	_lcd_initCGRam	;wreg free
   665  000A72  0012               	return		;funcret
   666  000A74                     __end_of_lcd_init:
   667                           	opt callstack 0
   668                           
   669 ;; *************** function _lcd_resetSequence *****************
   670 ;; Defined at:
   671 ;;		line 221 in file "Lcd4Lignes.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   685 ;;      Params:         0       0       0       0       0       0       0
   686 ;;      Locals:         0       0       0       0       0       0       0
   687 ;;      Temps:          0       1       0       0       0       0       0
   688 ;;      Totals:         0       1       0       0       0       0       0
   689 ;;Total ram usage:        1 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; Hardware stack levels required when called:    1
   692 ;; This function calls:
   693 ;;		_lcd_ecrireDonnees
   694 ;;		_lcd_strobeEnableBit
   695 ;; This function is called by:
   696 ;;		_lcd_init
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text4
   701  00083A                     __ptext4:
   702                           	opt callstack 0
   703  00083A                     _lcd_resetSequence:
   704                           	opt callstack 28
   705  00083A                     
   706                           ;Lcd4Lignes.c: 226: TRISD = 0b00000000;
   707  00083A  0E00               	movlw	0
   708  00083C  6E95               	movwf	149,c	;volatile
   709  00083E                     
   710                           ;Lcd4Lignes.c: 228: _delay((unsigned long)((40)*(1000000/4000.0)));
   711  00083E  0E0D               	movlw	13
   712  000840  0100               	movlb	0	; force () banked
   713  000842  6FA6               	movwf	??_lcd_resetSequence& (0+255),b
   714  000844  0EFB               	movlw	251
   715  000846                     u257:
   716  000846  2EE8               	decfsz	wreg,f,c
   717  000848  D7FE               	bra	u257
   718  00084A  2FA6               	decfsz	??_lcd_resetSequence& (0+255),f,b
   719  00084C  D7FC               	bra	u257
   720  00084E  F000 F000          	nop2	
   721  000852                     
   722                           ;Lcd4Lignes.c: 229: PORTAbits.RA0 = 0;
   723  000852  9080               	bcf	128,0,c	;volatile
   724  000854                     
   725                           ;Lcd4Lignes.c: 230: PORTAbits.RA1 = 0;
   726  000854  9280               	bcf	128,1,c	;volatile
   727  000856                     
   728                           ;Lcd4Lignes.c: 232: lcd_ecrireDonnees(0x03);
   729  000856  0E03               	movlw	3
   730  000858  EC3A  F005         	call	_lcd_ecrireDonnees
   731  00085C                     
   732                           ;Lcd4Lignes.c: 233: lcd_strobeEnableBit();
   733  00085C  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
   734  000860                     
   735                           ;Lcd4Lignes.c: 234: _delay((unsigned long)((40)*(1000000/4000000.0)));
   736  000860  0E03               	movlw	3
   737  000862                     u267:
   738  000862  2EE8               	decfsz	wreg,f,c
   739  000864  D7FE               	bra	u267
   740  000866  F000               	nop	
   741  000868                     
   742                           ;Lcd4Lignes.c: 237: lcd_ecrireDonnees(0x03);
   743  000868  0E03               	movlw	3
   744  00086A  EC3A  F005         	call	_lcd_ecrireDonnees
   745  00086E                     
   746                           ;Lcd4Lignes.c: 238: lcd_strobeEnableBit();
   747  00086E  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
   748  000872                     
   749                           ;Lcd4Lignes.c: 239: _delay((unsigned long)((40)*(1000000/4000000.0)));
   750  000872  0E03               	movlw	3
   751  000874                     u277:
   752  000874  2EE8               	decfsz	wreg,f,c
   753  000876  D7FE               	bra	u277
   754  000878  F000               	nop	
   755  00087A                     
   756                           ;Lcd4Lignes.c: 241: lcd_ecrireDonnees(0x03);
   757  00087A  0E03               	movlw	3
   758  00087C  EC3A  F005         	call	_lcd_ecrireDonnees
   759  000880                     
   760                           ;Lcd4Lignes.c: 242: lcd_strobeEnableBit();
   761  000880  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
   762  000884                     
   763                           ;Lcd4Lignes.c: 243: _delay((unsigned long)((40)*(1000000/4000000.0)));
   764  000884  0E03               	movlw	3
   765  000886                     u287:
   766  000886  2EE8               	decfsz	wreg,f,c
   767  000888  D7FE               	bra	u287
   768  00088A  F000               	nop	
   769  00088C                     
   770                           ;Lcd4Lignes.c: 245: lcd_ecrireDonnees(0x02);
   771  00088C  0E02               	movlw	2
   772  00088E  EC3A  F005         	call	_lcd_ecrireDonnees
   773  000892                     
   774                           ;Lcd4Lignes.c: 246: lcd_strobeEnableBit();
   775  000892  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
   776  000896                     
   777                           ;Lcd4Lignes.c: 247: _delay((unsigned long)((40)*(1000000/4000000.0)));
   778  000896  0E03               	movlw	3
   779  000898                     u297:
   780  000898  2EE8               	decfsz	wreg,f,c
   781  00089A  D7FE               	bra	u297
   782  00089C  F000               	nop	
   783  00089E                     
   784                           ;Lcd4Lignes.c: 249: TRISD = 0b00001111;
   785  00089E  0E0F               	movlw	15
   786  0008A0  6E95               	movwf	149,c	;volatile
   787  0008A2  0012               	return		;funcret
   788  0008A4                     __end_of_lcd_resetSequence:
   789                           	opt callstack 0
   790                           
   791 ;; *************** function _lcd_initCGRam *****************
   792 ;; Defined at:
   793 ;;		line 417 in file "Lcd4Lignes.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  j               1    6[BANK0 ] unsigned char 
   798 ;;  i               1    5[BANK0 ] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   808 ;;      Params:         0       0       0       0       0       0       0
   809 ;;      Locals:         0       2       0       0       0       0       0
   810 ;;      Temps:          0       2       0       0       0       0       0
   811 ;;      Totals:         0       4       0       0       0       0       0
   812 ;;Total ram usage:        4 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    4
   815 ;; This function calls:
   816 ;;		_lcd_curseurHome
   817 ;;		_lcd_wrCom
   818 ;;		_lcd_wrData
   819 ;; This function is called by:
   820 ;;		_lcd_init
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text5
   825  0006C0                     __ptext5:
   826                           	opt callstack 0
   827  0006C0                     _lcd_initCGRam:
   828                           	opt callstack 25
   829  0006C0                     
   830                           ;Lcd4Lignes.c: 419: char i,j;;Lcd4Lignes.c: 421: lcd_wrCom(0x40);
   831  0006C0  0E40               	movlw	64
   832  0006C2  ECE7  F003         	call	_lcd_wrCom
   833  0006C6                     
   834                           ;Lcd4Lignes.c: 422: for(i=0;i<8;i++)
   835  0006C6  0E00               	movlw	0
   836  0006C8  0100               	movlb	0	; force () banked
   837  0006CA  6FA9               	movwf	lcd_initCGRam@i& (0+255),b
   838  0006CC                     
   839                           ; BSR set to: 0
   840  0006CC  0E07               	movlw	7
   841  0006CE  0100               	movlb	0	; force () banked
   842  0006D0  65A9               	cpfsgt	lcd_initCGRam@i& (0+255),b
   843  0006D2  EF6D  F003         	goto	u41
   844  0006D6  EF6F  F003         	goto	u40
   845  0006DA                     u41:
   846  0006DA  EF71  F003         	goto	l1156
   847  0006DE                     u40:
   848  0006DE  EFAE  F003         	goto	l1172
   849  0006E2                     l1156:
   850                           
   851                           ; BSR set to: 0
   852                           ;Lcd4Lignes.c: 423: {;Lcd4Lignes.c: 424: for(j=0;j<8;j++)
   853  0006E2  0E00               	movlw	0
   854  0006E4  0100               	movlb	0	; force () banked
   855  0006E6  6FAA               	movwf	lcd_initCGRam@j& (0+255),b
   856  0006E8                     
   857                           ; BSR set to: 0
   858  0006E8  0E07               	movlw	7
   859  0006EA  0100               	movlb	0	; force () banked
   860  0006EC  65AA               	cpfsgt	lcd_initCGRam@j& (0+255),b
   861  0006EE  EF7B  F003         	goto	u51
   862  0006F2  EF7D  F003         	goto	u50
   863  0006F6                     u51:
   864  0006F6  EF7F  F003         	goto	l1162
   865  0006FA                     u50:
   866  0006FA  EFA3  F003         	goto	l1168
   867  0006FE                     l1162:
   868                           
   869                           ; BSR set to: 0
   870                           ;Lcd4Lignes.c: 425: lcd_wrData(matCGRAM[i][j]);
   871  0006FE  0100               	movlb	0	; force () banked
   872  000700  51A9               	movf	lcd_initCGRam@i& (0+255),w,b
   873  000702  0D08               	mullw	8
   874  000704  0E60               	movlw	low _matCGRAM
   875  000706  0100               	movlb	0	; force () banked
   876  000708  6FA7               	movwf	??_lcd_initCGRam& (0+255),b
   877  00070A  0E00               	movlw	high _matCGRAM
   878  00070C  6FA8               	movwf	(??_lcd_initCGRam+1)& (0+255),b
   879  00070E  50F3               	movf	243,w,c
   880  000710  27A7               	addwf	??_lcd_initCGRam& (0+255),f,b
   881  000712  50F4               	movf	244,w,c
   882  000714  23A8               	addwfc	(??_lcd_initCGRam+1)& (0+255),f,b
   883  000716  0100               	movlb	0	; force () banked
   884  000718  51AA               	movf	lcd_initCGRam@j& (0+255),w,b
   885  00071A  0100               	movlb	0	; force () banked
   886  00071C  25A7               	addwf	??_lcd_initCGRam& (0+255),w,b
   887  00071E  6ED9               	movwf	fsr2l,c
   888  000720  0100               	movlb	0	; force () banked
   889  000722  0E00               	movlw	0
   890  000724  0100               	movlb	0	; force () banked
   891  000726  21A8               	addwfc	(??_lcd_initCGRam+1)& (0+255),w,b
   892  000728  6EDA               	movwf	fsr2h,c
   893  00072A  50DF               	movf	indf2,w,c
   894  00072C  ECD9  F004         	call	_lcd_wrData
   895  000730  0100               	movlb	0	; force () banked
   896  000732  2BAA               	incf	lcd_initCGRam@j& (0+255),f,b
   897  000734                     
   898                           ; BSR set to: 0
   899  000734  0E07               	movlw	7
   900  000736  0100               	movlb	0	; force () banked
   901  000738  65AA               	cpfsgt	lcd_initCGRam@j& (0+255),b
   902  00073A  EFA1  F003         	goto	u61
   903  00073E  EFA3  F003         	goto	u60
   904  000742                     u61:
   905  000742  EF7F  F003         	goto	l1162
   906  000746                     u60:
   907  000746                     l1168:
   908                           
   909                           ; BSR set to: 0
   910  000746  0100               	movlb	0	; force () banked
   911  000748  2BA9               	incf	lcd_initCGRam@i& (0+255),f,b
   912  00074A                     
   913                           ; BSR set to: 0
   914  00074A  0E07               	movlw	7
   915  00074C  0100               	movlb	0	; force () banked
   916  00074E  65A9               	cpfsgt	lcd_initCGRam@i& (0+255),b
   917  000750  EFAC  F003         	goto	u71
   918  000754  EFAE  F003         	goto	u70
   919  000758                     u71:
   920  000758  EF71  F003         	goto	l1156
   921  00075C                     u70:
   922  00075C                     l1172:
   923                           
   924                           ; BSR set to: 0
   925                           ;Lcd4Lignes.c: 426: };Lcd4Lignes.c: 427: lcd_curseurHome();
   926  00075C  EC50  F005         	call	_lcd_curseurHome	;wreg free
   927  000760  0012               	return		;funcret
   928  000762                     __end_of_lcd_initCGRam:
   929                           	opt callstack 0
   930                           
   931 ;; *************** function _lcd_wrData *****************
   932 ;; Defined at:
   933 ;;		line 188 in file "Lcd4Lignes.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  caractere       1    wreg     unsigned char 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  caractere       1    2[BANK0 ] unsigned char 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      unsigned char 
   940 ;; Registers used:
   941 ;;		wreg, status,2, status,0, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   947 ;;      Params:         0       0       0       0       0       0       0
   948 ;;      Locals:         0       1       0       0       0       0       0
   949 ;;      Temps:          0       0       0       0       0       0       0
   950 ;;      Totals:         0       1       0       0       0       0       0
   951 ;;Total ram usage:        1 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    2
   954 ;; This function calls:
   955 ;;		_lcd_busy
   956 ;;		_lcd_ecrireDonnees
   957 ;;		_lcd_strobeEnableBit
   958 ;; This function is called by:
   959 ;;		_lcd_ecritChar
   960 ;;		_lcd_initCGRam
   961 ;;		_lcd_effaceChar
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text6
   966  0009B2                     __ptext6:
   967                           	opt callstack 0
   968  0009B2                     _lcd_wrData:
   969                           	opt callstack 26
   970                           
   971                           ;incstack = 0
   972                           ;lcd_wrData@caractere stored from wreg
   973  0009B2  0100               	movlb	0	; force () banked
   974  0009B4  6FA6               	movwf	lcd_wrData@caractere& (0+255),b
   975  0009B6                     
   976                           ;Lcd4Lignes.c: 190: lcd_busy();
   977  0009B6  EC9E  F004         	call	_lcd_busy	;wreg free
   978  0009BA                     
   979                           ;Lcd4Lignes.c: 191: TRISD = 0b00000000;
   980  0009BA  0E00               	movlw	0
   981  0009BC  6E95               	movwf	149,c	;volatile
   982  0009BE                     
   983                           ;Lcd4Lignes.c: 194: PORTAbits.RA0 = 1;
   984  0009BE  8080               	bsf	128,0,c	;volatile
   985  0009C0                     
   986                           ;Lcd4Lignes.c: 195: PORTAbits.RA1 = 0;
   987  0009C0  9280               	bcf	128,1,c	;volatile
   988  0009C2                     
   989                           ;Lcd4Lignes.c: 197: lcd_ecrireDonnees(caractere >> 4);
   990  0009C2  0100               	movlb	0	; force () banked
   991  0009C4  39A6               	swapf	lcd_wrData@caractere& (0+255),w,b
   992  0009C6  0B0F               	andlw	15
   993  0009C8  EC3A  F005         	call	_lcd_ecrireDonnees
   994  0009CC                     
   995                           ;Lcd4Lignes.c: 198: lcd_strobeEnableBit();
   996  0009CC  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
   997  0009D0                     
   998                           ;Lcd4Lignes.c: 201: lcd_ecrireDonnees(caractere);
   999  0009D0  0100               	movlb	0	; force () banked
  1000  0009D2  51A6               	movf	lcd_wrData@caractere& (0+255),w,b
  1001  0009D4  EC3A  F005         	call	_lcd_ecrireDonnees
  1002  0009D8                     
  1003                           ;Lcd4Lignes.c: 202: lcd_strobeEnableBit();
  1004  0009D8  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
  1005  0009DC                     
  1006                           ;Lcd4Lignes.c: 205: TRISD = 0b00001111;
  1007  0009DC  0E0F               	movlw	15
  1008  0009DE  6E95               	movwf	149,c	;volatile
  1009  0009E0                     
  1010                           ;Lcd4Lignes.c: 206: _delay((unsigned long)((2)*(1000000/4000000.0)));
  1011                           ;Lcd4Lignes.c: 207: return(lcd_busy());
  1012  0009E0  EC9E  F004         	call	_lcd_busy	;wreg free
  1013  0009E4  0012               	return		;funcret
  1014  0009E6                     __end_of_lcd_wrData:
  1015                           	opt callstack 0
  1016                           
  1017 ;; *************** function _lcd_curseurHome *****************
  1018 ;; Defined at:
  1019 ;;		line 288 in file "Lcd4Lignes.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1033 ;;      Params:         0       0       0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0       0       0
  1036 ;;      Totals:         0       0       0       0       0       0       0
  1037 ;;Total ram usage:        0 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    3
  1040 ;; This function calls:
  1041 ;;		_lcd_wrCom
  1042 ;; This function is called by:
  1043 ;;		_lcd_initCGRam
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text7
  1048  000AA0                     __ptext7:
  1049                           	opt callstack 0
  1050  000AA0                     _lcd_curseurHome:
  1051                           	opt callstack 25
  1052  000AA0                     
  1053                           ;Lcd4Lignes.c: 290: lcd_wrCom(0x02);
  1054  000AA0  0E02               	movlw	2
  1055  000AA2  ECE7  F003         	call	_lcd_wrCom
  1056  000AA6  0012               	return		;funcret
  1057  000AA8                     __end_of_lcd_curseurHome:
  1058                           	opt callstack 0
  1059                           
  1060 ;; *************** function _lcd_wrCom *****************
  1061 ;; Defined at:
  1062 ;;		line 156 in file "Lcd4Lignes.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;  commande        1    wreg     unsigned char 
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;  commande        1    2[BANK0 ] unsigned char 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      unsigned char 
  1069 ;; Registers used:
  1070 ;;		wreg, status,2, status,0, cstack
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1076 ;;      Params:         0       0       0       0       0       0       0
  1077 ;;      Locals:         0       1       0       0       0       0       0
  1078 ;;      Temps:          0       0       0       0       0       0       0
  1079 ;;      Totals:         0       1       0       0       0       0       0
  1080 ;;Total ram usage:        1 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    2
  1083 ;; This function calls:
  1084 ;;		_lcd_busy
  1085 ;;		_lcd_ecrireDonnees
  1086 ;;		_lcd_strobeEnableBit
  1087 ;; This function is called by:
  1088 ;;		_lcd_init
  1089 ;;		_lcd_curseurHome
  1090 ;;		_lcd_ecritChar
  1091 ;;		_lcd_initCGRam
  1092 ;;		_lcd_effaceAffichage
  1093 ;;		_lcd_gotoXY
  1094 ;;		_lcd_cacheCurseur
  1095 ;;		_lcd_montreCurseur
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text8
  1100  0007CE                     __ptext8:
  1101                           	opt callstack 0
  1102  0007CE                     _lcd_wrCom:
  1103                           	opt callstack 26
  1104                           
  1105                           ;incstack = 0
  1106                           ;lcd_wrCom@commande stored from wreg
  1107  0007CE  0100               	movlb	0	; force () banked
  1108  0007D0  6FA6               	movwf	lcd_wrCom@commande& (0+255),b
  1109  0007D2                     
  1110                           ;Lcd4Lignes.c: 158: lcd_busy();
  1111  0007D2  EC9E  F004         	call	_lcd_busy	;wreg free
  1112  0007D6                     
  1113                           ;Lcd4Lignes.c: 160: TRISD = 0b00000000;
  1114  0007D6  0E00               	movlw	0
  1115  0007D8  6E95               	movwf	149,c	;volatile
  1116  0007DA                     
  1117                           ;Lcd4Lignes.c: 163: PORTAbits.RA0 = 0;
  1118  0007DA  9080               	bcf	128,0,c	;volatile
  1119  0007DC                     
  1120                           ;Lcd4Lignes.c: 164: PORTAbits.RA1 = 0;
  1121  0007DC  9280               	bcf	128,1,c	;volatile
  1122  0007DE                     
  1123                           ;Lcd4Lignes.c: 166: lcd_ecrireDonnees(commande >> 4);
  1124  0007DE  0100               	movlb	0	; force () banked
  1125  0007E0  39A6               	swapf	lcd_wrCom@commande& (0+255),w,b
  1126  0007E2  0B0F               	andlw	15
  1127  0007E4  EC3A  F005         	call	_lcd_ecrireDonnees
  1128  0007E8                     
  1129                           ;Lcd4Lignes.c: 167: lcd_strobeEnableBit();
  1130  0007E8  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
  1131  0007EC                     
  1132                           ;Lcd4Lignes.c: 170: lcd_ecrireDonnees(commande);
  1133  0007EC  0100               	movlb	0	; force () banked
  1134  0007EE  51A6               	movf	lcd_wrCom@commande& (0+255),w,b
  1135  0007F0  EC3A  F005         	call	_lcd_ecrireDonnees
  1136  0007F4                     
  1137                           ;Lcd4Lignes.c: 171: lcd_strobeEnableBit();
  1138  0007F4  EC54  F005         	call	_lcd_strobeEnableBit	;wreg free
  1139  0007F8                     
  1140                           ;Lcd4Lignes.c: 172: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1141  0007F8  0E03               	movlw	3
  1142  0007FA                     u307:
  1143  0007FA  2EE8               	decfsz	wreg,f,c
  1144  0007FC  D7FE               	bra	u307
  1145  0007FE  F000               	nop	
  1146  000800                     
  1147                           ;Lcd4Lignes.c: 174: if ((commande == 0x01) || commande == 0x02)
  1148  000800  0100               	movlb	0	; force () banked
  1149  000802  05A6               	decf	lcd_wrCom@commande& (0+255),w,b
  1150  000804  B4D8               	btfsc	status,2,c
  1151  000806  EF07  F004         	goto	u21
  1152  00080A  EF09  F004         	goto	u20
  1153  00080E                     u21:
  1154  00080E  EF13  F004         	goto	l1072
  1155  000812                     u20:
  1156  000812                     
  1157                           ; BSR set to: 0
  1158  000812  0E02               	movlw	2
  1159  000814  0100               	movlb	0	; force () banked
  1160  000816  19A6               	xorwf	lcd_wrCom@commande& (0+255),w,b
  1161  000818  A4D8               	btfss	status,2,c
  1162  00081A  EF11  F004         	goto	u31
  1163  00081E  EF13  F004         	goto	u30
  1164  000822                     u31:
  1165  000822  EF18  F004         	goto	l1074
  1166  000826                     u30:
  1167  000826                     l1072:
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;Lcd4Lignes.c: 175: _delay((unsigned long)((2)*(1000000/4000.0)));
  1171  000826  0EA6               	movlw	166
  1172  000828                     u317:
  1173  000828  2EE8               	decfsz	wreg,f,c
  1174  00082A  D7FE               	bra	u317
  1175  00082C  F000 F000          	nop2	
  1176  000830                     l1074:
  1177                           
  1178                           ;Lcd4Lignes.c: 177: TRISD = 0b00001111;
  1179  000830  0E0F               	movlw	15
  1180  000832  6E95               	movwf	149,c	;volatile
  1181  000834                     
  1182                           ;Lcd4Lignes.c: 179: return(lcd_busy());
  1183  000834  EC9E  F004         	call	_lcd_busy	;wreg free
  1184  000838  0012               	return		;funcret
  1185  00083A                     __end_of_lcd_wrCom:
  1186                           	opt callstack 0
  1187                           
  1188 ;; *************** function _lcd_strobeEnableBit *****************
  1189 ;; Defined at:
  1190 ;;		line 431 in file "Lcd4Lignes.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;		None
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;		None
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		None
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1204 ;;      Params:         0       0       0       0       0       0       0
  1205 ;;      Locals:         0       0       0       0       0       0       0
  1206 ;;      Temps:          0       0       0       0       0       0       0
  1207 ;;      Totals:         0       0       0       0       0       0       0
  1208 ;;Total ram usage:        0 bytes
  1209 ;; Hardware stack levels used:    1
  1210 ;; This function calls:
  1211 ;;		Nothing
  1212 ;; This function is called by:
  1213 ;;		_lcd_wrCom
  1214 ;;		_lcd_wrData
  1215 ;;		_lcd_resetSequence
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text9
  1220  000AA8                     __ptext9:
  1221                           	opt callstack 0
  1222  000AA8                     _lcd_strobeEnableBit:
  1223                           	opt callstack 27
  1224  000AA8                     
  1225                           ;Lcd4Lignes.c: 433: PORTAbits.RA2 = 1;
  1226  000AA8  8480               	bsf	128,2,c	;volatile
  1227                           
  1228                           ;Lcd4Lignes.c: 434: __nop();
  1229  000AAA  F000               	nop	
  1230                           
  1231                           ;Lcd4Lignes.c: 435: PORTAbits.RA2 = 0;
  1232  000AAC  9480               	bcf	128,2,c	;volatile
  1233  000AAE  0012               	return		;funcret
  1234  000AB0                     __end_of_lcd_strobeEnableBit:
  1235                           	opt callstack 0
  1236                           
  1237 ;; *************** function _lcd_ecrireDonnees *****************
  1238 ;; Defined at:
  1239 ;;		line 107 in file "Lcd4Lignes.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;  donnee          1    wreg     unsigned char 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  donnee          1    1[BANK0 ] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1253 ;;      Params:         0       0       0       0       0       0       0
  1254 ;;      Locals:         0       1       0       0       0       0       0
  1255 ;;      Temps:          0       1       0       0       0       0       0
  1256 ;;      Totals:         0       2       0       0       0       0       0
  1257 ;;Total ram usage:        2 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; This function calls:
  1260 ;;		Nothing
  1261 ;; This function is called by:
  1262 ;;		_lcd_wrCom
  1263 ;;		_lcd_wrData
  1264 ;;		_lcd_resetSequence
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text10
  1269  000A74                     __ptext10:
  1270                           	opt callstack 0
  1271  000A74                     _lcd_ecrireDonnees:
  1272                           	opt callstack 27
  1273                           
  1274                           ;incstack = 0
  1275                           ;lcd_ecrireDonnees@donnee stored from wreg
  1276  000A74  0100               	movlb	0	; force () banked
  1277  000A76  6FA5               	movwf	lcd_ecrireDonnees@donnee& (0+255),b
  1278  000A78                     
  1279                           ;Lcd4Lignes.c: 110: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  1280  000A78  CF83 F0A4          	movff	3971,??_lcd_ecrireDonnees	;volatile
  1281  000A7C  0EF0               	movlw	240
  1282  000A7E  0100               	movlb	0	; force () banked
  1283  000A80  17A4               	andwf	??_lcd_ecrireDonnees& (0+255),f,b
  1284  000A82  0100               	movlb	0	; force () banked
  1285  000A84  51A5               	movf	lcd_ecrireDonnees@donnee& (0+255),w,b
  1286  000A86  0B0F               	andlw	15
  1287  000A88  0100               	movlb	0	; force () banked
  1288  000A8A  11A4               	iorwf	??_lcd_ecrireDonnees& (0+255),w,b
  1289  000A8C  6E83               	movwf	131,c	;volatile
  1290  000A8E                     
  1291                           ; BSR set to: 0
  1292  000A8E  0012               	return		;funcret
  1293  000A90                     __end_of_lcd_ecrireDonnees:
  1294                           	opt callstack 0
  1295                           
  1296 ;; *************** function _lcd_busy *****************
  1297 ;; Defined at:
  1298 ;;		line 124 in file "Lcd4Lignes.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  adresse         1    1[BANK0 ] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      unsigned char 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1312 ;;      Params:         0       0       0       0       0       0       0
  1313 ;;      Locals:         0       1       0       0       0       0       0
  1314 ;;      Temps:          0       1       0       0       0       0       0
  1315 ;;      Totals:         0       2       0       0       0       0       0
  1316 ;;Total ram usage:        2 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    1
  1319 ;; This function calls:
  1320 ;;		_lcd_lireDonnees
  1321 ;; This function is called by:
  1322 ;;		_lcd_wrCom
  1323 ;;		_lcd_wrData
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text11
  1328  00093C                     __ptext11:
  1329                           	opt callstack 0
  1330  00093C                     _lcd_busy:
  1331                           	opt callstack 26
  1332  00093C                     
  1333                           ;Lcd4Lignes.c: 126: unsigned char adresse;;Lcd4Lignes.c: 128: PORTAbits.RA0 = 0;
  1334  00093C  9080               	bcf	128,0,c	;volatile
  1335                           
  1336                           ;Lcd4Lignes.c: 129: PORTAbits.RA1 = 1;
  1337  00093E  8280               	bsf	128,1,c	;volatile
  1338  000940                     l102:
  1339                           
  1340                           ;Lcd4Lignes.c: 132: {;Lcd4Lignes.c: 133: PORTAbits.RA2 = 1;
  1341  000940  8480               	bsf	128,2,c	;volatile
  1342                           
  1343                           ;Lcd4Lignes.c: 134: __nop();
  1344  000942  F000               	nop	
  1345  000944                     
  1346                           ;Lcd4Lignes.c: 135: adresse = lcd_lireDonnees() << 4;
  1347  000944  EC58  F005         	call	_lcd_lireDonnees	;wreg free
  1348  000948  0100               	movlb	0	; force () banked
  1349  00094A  6FA4               	movwf	??_lcd_busy& (0+255),b
  1350  00094C  39A4               	swapf	??_lcd_busy& (0+255),w,b
  1351  00094E  0BF0               	andlw	240
  1352  000950  0100               	movlb	0	; force () banked
  1353  000952  6FA5               	movwf	lcd_busy@adresse& (0+255),b
  1354  000954                     
  1355                           ; BSR set to: 0
  1356                           ;Lcd4Lignes.c: 136: PORTAbits.RA2 = 0;
  1357  000954  9480               	bcf	128,2,c	;volatile
  1358  000956                     
  1359                           ;Lcd4Lignes.c: 138: PORTAbits.RA2 = 1;
  1360  000956  8480               	bsf	128,2,c	;volatile
  1361  000958                     
  1362                           ;Lcd4Lignes.c: 139: __nop();
  1363  000958  F000               	nop	
  1364                           
  1365                           ;Lcd4Lignes.c: 140: adresse |= lcd_lireDonnees();
  1366  00095A  EC58  F005         	call	_lcd_lireDonnees	;wreg free
  1367  00095E  0100               	movlb	0	; force () banked
  1368  000960  13A5               	iorwf	lcd_busy@adresse& (0+255),f,b
  1369  000962                     
  1370                           ; BSR set to: 0
  1371                           ;Lcd4Lignes.c: 141: PORTAbits.RA2 = 0;
  1372  000962  9480               	bcf	128,2,c	;volatile
  1373  000964                     
  1374                           ;Lcd4Lignes.c: 143: };Lcd4Lignes.c: 144: while(adresse&0x80);
  1375  000964  0100               	movlb	0	; force () banked
  1376  000966  BFA5               	btfsc	lcd_busy@adresse& (0+255),7,b
  1377  000968  EFB8  F004         	goto	u11
  1378  00096C  EFBA  F004         	goto	u10
  1379  000970                     u11:
  1380  000970  EFA0  F004         	goto	l102
  1381  000974                     u10:
  1382  000974                     
  1383                           ; BSR set to: 0
  1384                           ;Lcd4Lignes.c: 146: PORTAbits.RA1 = 0;
  1385  000974  9280               	bcf	128,1,c	;volatile
  1386  000976                     
  1387                           ; BSR set to: 0
  1388                           ;Lcd4Lignes.c: 147: return(adresse&0x7f);
  1389  000976  0100               	movlb	0	; force () banked
  1390  000978  51A5               	movf	lcd_busy@adresse& (0+255),w,b
  1391  00097A  0B7F               	andlw	127
  1392  00097C                     
  1393                           ; BSR set to: 0
  1394  00097C  0012               	return		;funcret
  1395  00097E                     __end_of_lcd_busy:
  1396                           	opt callstack 0
  1397                           
  1398 ;; *************** function _lcd_lireDonnees *****************
  1399 ;; Defined at:
  1400 ;;		line 93 in file "Lcd4Lignes.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;		None
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      unsigned char 
  1407 ;; Registers used:
  1408 ;;		wreg, status,2, status,0
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1414 ;;      Params:         0       0       0       0       0       0       0
  1415 ;;      Locals:         0       0       0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0
  1417 ;;      Totals:         0       0       0       0       0       0       0
  1418 ;;Total ram usage:        0 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_lcd_busy
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text12
  1428  000AB0                     __ptext12:
  1429                           	opt callstack 0
  1430  000AB0                     _lcd_lireDonnees:
  1431                           	opt callstack 26
  1432  000AB0                     
  1433                           ;Lcd4Lignes.c: 96: return (PORTD & 0x0f);
  1434  000AB0  5083               	movf	131,w,c	;volatile
  1435  000AB2  0B0F               	andlw	15
  1436  000AB4  0012               	return		;funcret
  1437  000AB6                     __end_of_lcd_lireDonnees:
  1438                           	opt callstack 0
  1439                           
  1440 ;; *************** function _initialisation *****************
  1441 ;; Defined at:
  1442 ;;		line 63 in file "main.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;		None
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;		None
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1456 ;;      Params:         0       0       0       0       0       0       0
  1457 ;;      Locals:         0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0
  1459 ;;      Totals:         0       0       0       0       0       0       0
  1460 ;;Total ram usage:        0 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    1
  1463 ;; This function calls:
  1464 ;;		_srand
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text13
  1471  0009E6                     __ptext13:
  1472                           	opt callstack 0
  1473  0009E6                     _initialisation:
  1474                           	opt callstack 29
  1475  0009E6                     
  1476                           ;main.c: 65: TRISD = 0;
  1477  0009E6  0E00               	movlw	0
  1478  0009E8  6E95               	movwf	149,c	;volatile
  1479                           
  1480                           ;main.c: 66: ANSELH = 0;
  1481  0009EA  0E00               	movlw	0
  1482  0009EC  6E7F               	movwf	127,c	;volatile
  1483  0009EE                     
  1484                           ;main.c: 67: TRISB = 0xFF;
  1485  0009EE  6893               	setf	147,c	;volatile
  1486                           
  1487                           ;main.c: 68: ANSEL = 0;
  1488  0009F0  0E00               	movlw	0
  1489  0009F2  6E7E               	movwf	126,c	;volatile
  1490                           
  1491                           ;main.c: 69: TRISA = 0;
  1492  0009F4  0E00               	movlw	0
  1493  0009F6  6E92               	movwf	146,c	;volatile
  1494  0009F8                     
  1495                           ;main.c: 73: T1CONbits.TMR1ON = 1;
  1496  0009F8  80CD               	bsf	205,0,c	;volatile
  1497  0009FA                     
  1498                           ;main.c: 74: srand(TMR1);
  1499  0009FA  CFCE F0A4          	movff	4046,srand@x	;volatile
  1500  0009FE  CFCF F0A5          	movff	4047,srand@x+1	;volatile
  1501  000A02  EC48  F005         	call	_srand	;wreg free
  1502  000A06                     
  1503                           ;main.c: 76: ANSELbits.ANS7 = 1;
  1504  000A06  8E7E               	bsf	126,7,c	;volatile
  1505  000A08                     
  1506                           ;main.c: 77: ADCON0bits.ADON = 1;
  1507  000A08  80C2               	bsf	194,0,c	;volatile
  1508  000A0A                     
  1509                           ;main.c: 78: ADCON1 = 0;
  1510  000A0A  0E00               	movlw	0
  1511  000A0C  6EC1               	movwf	193,c	;volatile
  1512  000A0E                     
  1513                           ;main.c: 79: ADCON2bits.ADFM = 0;
  1514  000A0E  9EC0               	bcf	192,7,c	;volatile
  1515  000A10                     
  1516                           ;main.c: 80: ADCON2bits.ACQT = 0;
  1517  000A10  0EC7               	movlw	-57
  1518  000A12  16C0               	andwf	192,f,c	;volatile
  1519  000A14                     
  1520                           ;main.c: 81: ADCON2bits.ADCS = 0;
  1521  000A14  0EF8               	movlw	-8
  1522  000A16  16C0               	andwf	192,f,c	;volatile
  1523  000A18  0012               	return		;funcret
  1524  000A1A                     __end_of_initialisation:
  1525                           	opt callstack 0
  1526                           
  1527 ;; *************** function _srand *****************
  1528 ;; Defined at:
  1529 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  x               2    0[BANK0 ] unsigned int 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;		None
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		status,2
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1543 ;;      Params:         0       2       0       0       0       0       0
  1544 ;;      Locals:         0       0       0       0       0       0       0
  1545 ;;      Temps:          0       0       0       0       0       0       0
  1546 ;;      Totals:         0       2       0       0       0       0       0
  1547 ;;Total ram usage:        2 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_initialisation
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text14
  1557  000A90                     __ptext14:
  1558                           	opt callstack 0
  1559  000A90                     _srand:
  1560                           	opt callstack 29
  1561  000A90  C0A4  F0A0         	movff	srand@x,_randx
  1562  000A94  C0A5  F0A1         	movff	srand@x+1,_randx+1
  1563  000A98  0100               	movlb	0	; () banked
  1564  000A9A  6BA2               	clrf	(_randx+2)& (0+255),b
  1565  000A9C  6BA3               	clrf	(_randx+3)& (0+255),b
  1566  000A9E                     
  1567                           ; BSR set to: 0
  1568  000A9E  0012               	return		;funcret
  1569  000AA0                     __end_of_srand:
  1570                           	opt callstack 0
  1571                           
  1572 ;; *************** function _initTabVue *****************
  1573 ;; Defined at:
  1574 ;;		line 91 in file "main.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  j               1    2[BANK0 ] unsigned char 
  1579 ;;  i               1    3[BANK0 ] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1589 ;;      Params:         0       0       0       0       0       0       0
  1590 ;;      Locals:         0       2       0       0       0       0       0
  1591 ;;      Temps:          0       2       0       0       0       0       0
  1592 ;;      Totals:         0       4       0       0       0       0       0
  1593 ;;Total ram usage:        4 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text15
  1603  000614                     __ptext15:
  1604                           	opt callstack 0
  1605  000614                     _initTabVue:
  1606                           	opt callstack 30
  1607  000614                     
  1608                           ;main.c: 93: for (char i = 0; i < 4; i++)
  1609  000614  0E00               	movlw	0
  1610  000616  0100               	movlb	0	; force () banked
  1611  000618  6FA7               	movwf	initTabVue@i& (0+255),b
  1612  00061A                     
  1613                           ; BSR set to: 0
  1614  00061A  0E03               	movlw	3
  1615  00061C  0100               	movlb	0	; force () banked
  1616  00061E  65A7               	cpfsgt	initTabVue@i& (0+255),b
  1617  000620  EF14  F003         	goto	u201
  1618  000624  EF16  F003         	goto	u200
  1619  000628                     u201:
  1620  000628  EF18  F003         	goto	l1358
  1621  00062C                     u200:
  1622  00062C  EF5F  F003         	goto	l56
  1623  000630                     l1358:
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;main.c: 94: {;main.c: 95: for(char j=0;j<(20);j++)
  1627  000630  0E00               	movlw	0
  1628  000632  0100               	movlb	0	; force () banked
  1629  000634  6FA6               	movwf	initTabVue@j& (0+255),b
  1630  000636                     
  1631                           ; BSR set to: 0
  1632  000636  0E13               	movlw	19
  1633  000638  0100               	movlb	0	; force () banked
  1634  00063A  65A6               	cpfsgt	initTabVue@j& (0+255),b
  1635  00063C  EF22  F003         	goto	u211
  1636  000640  EF24  F003         	goto	u210
  1637  000644                     u211:
  1638  000644  EF26  F003         	goto	l1364
  1639  000648                     u210:
  1640  000648  EF49  F003         	goto	l1370
  1641  00064C                     l1364:
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;main.c: 96: {;main.c: 97: m_tabVue[i][j]=1;
  1645  00064C  0100               	movlb	0	; force () banked
  1646  00064E  51A7               	movf	initTabVue@i& (0+255),w,b
  1647  000650  0D15               	mullw	21
  1648  000652  0E54               	movlw	low _m_tabVue
  1649  000654  0100               	movlb	0	; force () banked
  1650  000656  6FA4               	movwf	??_initTabVue& (0+255),b
  1651  000658  0E01               	movlw	high _m_tabVue
  1652  00065A  6FA5               	movwf	(??_initTabVue+1)& (0+255),b
  1653  00065C  50F3               	movf	243,w,c
  1654  00065E  27A4               	addwf	??_initTabVue& (0+255),f,b
  1655  000660  50F4               	movf	244,w,c
  1656  000662  23A5               	addwfc	(??_initTabVue+1)& (0+255),f,b
  1657  000664  0100               	movlb	0	; force () banked
  1658  000666  51A6               	movf	initTabVue@j& (0+255),w,b
  1659  000668  0100               	movlb	0	; force () banked
  1660  00066A  25A4               	addwf	??_initTabVue& (0+255),w,b
  1661  00066C  6ED9               	movwf	fsr2l,c
  1662  00066E  0100               	movlb	0	; force () banked
  1663  000670  0E00               	movlw	0
  1664  000672  0100               	movlb	0	; force () banked
  1665  000674  21A5               	addwfc	(??_initTabVue+1)& (0+255),w,b
  1666  000676  6EDA               	movwf	fsr2h,c
  1667  000678  0E01               	movlw	1
  1668  00067A  6EDF               	movwf	indf2,c
  1669  00067C                     
  1670                           ; BSR set to: 0
  1671  00067C  0100               	movlb	0	; force () banked
  1672  00067E  2BA6               	incf	initTabVue@j& (0+255),f,b
  1673  000680                     
  1674                           ; BSR set to: 0
  1675  000680  0E13               	movlw	19
  1676  000682  0100               	movlb	0	; force () banked
  1677  000684  65A6               	cpfsgt	initTabVue@j& (0+255),b
  1678  000686  EF47  F003         	goto	u221
  1679  00068A  EF49  F003         	goto	u220
  1680  00068E                     u221:
  1681  00068E  EF26  F003         	goto	l1364
  1682  000692                     u220:
  1683  000692                     l1370:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;main.c: 98: };main.c: 99: m_tabVue[i][20]=0;
  1687  000692  0100               	movlb	0	; force () banked
  1688  000694  51A7               	movf	initTabVue@i& (0+255),w,b
  1689  000696  0D15               	mullw	21
  1690  000698  0E68               	movlw	low (_m_tabVue+20)
  1691  00069A  24F3               	addwf	243,w,c
  1692  00069C  6ED9               	movwf	fsr2l,c
  1693  00069E  0E01               	movlw	high (_m_tabVue+20)
  1694  0006A0  20F4               	addwfc	prodh,w,c
  1695  0006A2  6EDA               	movwf	fsr2h,c
  1696  0006A4  0E00               	movlw	0
  1697  0006A6  6EDF               	movwf	indf2,c
  1698  0006A8                     
  1699                           ; BSR set to: 0
  1700  0006A8  0100               	movlb	0	; force () banked
  1701  0006AA  2BA7               	incf	initTabVue@i& (0+255),f,b
  1702  0006AC                     
  1703                           ; BSR set to: 0
  1704  0006AC  0E03               	movlw	3
  1705  0006AE  0100               	movlb	0	; force () banked
  1706  0006B0  65A7               	cpfsgt	initTabVue@i& (0+255),b
  1707  0006B2  EF5D  F003         	goto	u231
  1708  0006B6  EF5F  F003         	goto	u230
  1709  0006BA                     u231:
  1710  0006BA  EF18  F003         	goto	l1358
  1711  0006BE                     u230:
  1712  0006BE                     l56:
  1713                           
  1714                           ; BSR set to: 0
  1715  0006BE  0012               	return		;funcret
  1716  0006C0                     __end_of_initTabVue:
  1717                           	opt callstack 0
  1718                           
  1719                           	psect	param0
  1720  0000                     tosu	equ	0xFFF
  1721                           tosh	equ	0xFFE
  1722                           tosl	equ	0xFFD
  1723                           stkptr	equ	0xFFC
  1724                           pclatu	equ	0xFFB
  1725                           pclath	equ	0xFFA
  1726                           pcl	equ	0xFF9
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           indf0	equ	0xFEF
  1734                           postinc0	equ	0xFEE
  1735                           postdec0	equ	0xFED
  1736                           preinc0	equ	0xFEC
  1737                           plusw0	equ	0xFEB
  1738                           fsr0h	equ	0xFEA
  1739                           fsr0l	equ	0xFE9
  1740                           wreg	equ	0xFE8
  1741                           indf1	equ	0xFE7
  1742                           postinc1	equ	0xFE6
  1743                           postdec1	equ	0xFE5
  1744                           preinc1	equ	0xFE4
  1745                           plusw1	equ	0xFE3
  1746                           fsr1h	equ	0xFE2
  1747                           fsr1l	equ	0xFE1
  1748                           bsr	equ	0xFE0
  1749                           indf2	equ	0xFDF
  1750                           postinc2	equ	0xFDE
  1751                           postdec2	equ	0xFDD
  1752                           preinc2	equ	0xFDC
  1753                           plusw2	equ	0xFDB
  1754                           fsr2h	equ	0xFDA
  1755                           fsr2l	equ	0xFD9
  1756                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        68
    BSS         168
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160     11      79
    BANK1           256      0     168
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    lcd_putMessage@chaine	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_lcd_putMessage
    _lcd_putMessage->_lcd_ecritChar
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_curseurHome->_lcd_wrCom
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees
    _initialisation->_srand

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1127
                                             10 BANK0      1     1      0
                         _initTabVue
                     _initialisation
                           _lcd_init
                     _lcd_putMessage
 ---------------------------------------------------------------------------------
 (1) _lcd_putMessage                                       5     3      2     376
                                              5 BANK0      5     3      2
                      _lcd_ecritChar
 ---------------------------------------------------------------------------------
 (2) _lcd_ecritChar                                        2     2      0     210
                                              3 BANK0      2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     495
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      15
                                              2 BANK0      1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     375
                                              3 BANK0      4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0      75
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     105
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (3) _lcd_wrCom                                            1     1      0     105
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (4) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _lcd_ecrireDonnees                                    2     2      0      15
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _lcd_busy                                             2     2      0      30
                                              0 BANK0      2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (5) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0      98
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initTabVue                                           4     4      0     158
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initTabVue
   _initialisation
     _srand
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_putMessage
     _lcd_ecritChar
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      A8       6       65.6%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      B      4F       4       49.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7      14        0.0%
DATA                 0      0      F7      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Nov 29 13:28:50 2019

                          l56 06BE                            l49 0A18                            l96 0AB4  
                          l99 0A8E                            u10 0974                            u11 0970  
                          u20 0812                            u21 080E                            u30 0826  
                          u31 0822                            u40 06DE                            u41 06DA  
                          u50 06FA                            u51 06F6                            u60 0746  
                          u61 0742                            u70 075C                            u71 0758  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000  __size_of_lcd_strobeEnableBit 0008                           l102 0940  
                         l110 0838                           l103 0974                           l104 097C  
                         l113 09E4                           l116 08A2                           l125 0AA6  
                         l119 0A72                           l151 08F6                           l170 0760  
                         l173 0AAE                           l157 07CC                           l887 0A9E  
                __CFG_CPB$OFF 000000                           u200 062C                           u201 0628  
                         u210 0648                           u211 0644                           u220 0692  
                         u221 068E                           u230 06BE                           u231 06BA  
                         u307 07FA                           u317 0828                           u190 07CC  
                         u191 07C8                           u247 09A0                           u257 0846  
                __CFG_CPD$OFF 000000                           u267 0862                           u277 0874  
                         u287 0886                           u297 0898                  __CFG_BORV$18 000000  
                         prod 000FF3                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                        l1020 0A78                          l1100 09D8                          l1030 0956  
                        l1022 093C                          l1110 0AA0                          l1102 09DC  
                        l1016 0AB0                          l1040 0976                          l1032 0958  
                        l1024 0944                          l1104 09DC                          l1120 0854  
                        l1034 0962                          l1026 0954                          l1050 07DA  
                        l1106 09E0                          l1130 086E                          l1122 0856  
                        l1114 083A                          l1036 0964                          l1028 0956  
                        l1044 0AA8                          l1060 07EC                          l1052 07DA  
                        l1140 088C                          l1132 0872                          l1124 085C  
                        l1116 083E                          l1038 0964                          l1070 0812  
                        l1062 07EC                          l1054 07DC                          l1046 07D2  
                        l1150 06C6                          l1142 0892                          l1134 087A  
                        l1126 0860                          l1118 0852                          l1206 0A4C  
                        l1072 0826                          l1064 07F4                          l1056 07DE  
                        l1048 07D6                          l1152 06CC                          l1144 0896  
                        l1136 0880                          l1128 0868                          l1208 0A6E  
                        l1322 0A90                          l1330 09FA                          l1074 0830  
                        l1066 07F8                          l1058 07E8                          l1090 09C0  
                        l1082 09B6                          l1170 074A                          l1162 06FE  
                        l1146 089E                          l1138 0884                          l1340 0A10  
                        l1332 0A06                          l1324 09E6                          l1076 0834  
                        l1068 0800                          l1092 09C2                          l1084 09BA  
                        l1164 0730                          l1172 075C                          l1156 06E2  
                        l1148 06C0                          l1180 08CC                          l1342 0A14  
                        l1334 0A08                          l1326 09EE                          l1078 0834  
                        l1094 09CC                          l1086 09BE                          l1166 0734  
                        l1158 06E8                          l1174 08A8                          l1350 0798  
                        l1360 0636                          l1352 0614                          l1336 0A0A  
                        l1328 09F8                          l1096 09D0                          l1088 09BE  
                        l1168 0746                          l1176 08B8                          l1184 08D6  
                        l1344 0762                          l1370 0692                          l1354 061A  
                        l1338 0A0E                          l1098 09D0                          l1178 08C2  
                        l1346 076C                          l1372 06A8                          l1364 064C  
                        l1348 0794                          l1380 0986                          l1374 06AC  
                        l1366 067C                          l1358 0630                          l1382 0994  
                        l1368 0680                          l1384 0998                          l1376 097E  
                        l1378 0982                          STR_1 0601                          _RCIF 007CF5  
                        _TMR1 000FCE              ??_initialisation 00A6                          _main 097E  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        prodh 000FF4                          prodl 000FF3                          start 0000  
             ?_lcd_putMessage 00A9                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000               ??_lcd_ecritChar 00A7                         ?_main 00A4  
                       _ANSEL 000F7E                         _RCREG 000FAE                         _SPBRG 000FAF  
                       _PORTD 000F83                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISD 000F95                         _TXREG 000FAD                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               ??_lcd_initCGRam 00A7                         _randx 00A0  
                       _srand 0A90                         tablat 000FF5                         status 000FD8  
              __CFG_HFOFST$ON 000000                __CFG_PBADEN$ON 000000               __initialization 0A1A  
                __end_of_main 09B2          lcd_putMessage@chaine 00A9                        ??_main 00AE  
               __activetblptr 000003                        _ADCON1 000FC1                        ?_srand 00A4  
                      _ANSELH 000F7F                   initTabVue@i 00A7                   initTabVue@j 00A6  
              __CFG_WDTEN$OFF 000000                        _SPBRGH 000FB0                __CFG_XINST$OFF 000000  
              lcd_initCGRam@i 00A9                lcd_initCGRam@j 00AA              __end_of_lcd_busy 097E  
            __end_of_lcd_init 0A74                __CFG_STVREN$ON 000000                        clear_0 0A40  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                        srand@x 00A4             _lcd_resetSequence 083A  
                  __accesstop 0060       __end_of__initialization 0A46           _lcd_strobeEnableBit 0AA8  
          ?_lcd_resetSequence 00A4                 ___rparam_used 000000                  __pidataBANK0 08F8  
         ??_lcd_resetSequence 00A6                 __end_of_srand 0AA0          ?_lcd_strobeEnableBit 00A4  
          __size_of_lcd_wrCom 006C     __end_of_lcd_resetSequence 08A4                       ??_srand 00A6  
    __size_of_lcd_lireDonnees 0006             _lcd_ecrireDonnees 0A74                    __pbssBANK1 0100  
            ??_lcd_putMessage 00AB            ?_lcd_ecrireDonnees 00A4      __size_of_lcd_curseurHome 0008  
         ??_lcd_ecrireDonnees 00A4         ??_lcd_strobeEnableBit 00A4                    _lcd_wrData 09B2  
   __end_of_lcd_ecrireDonnees 0A90                     ?_lcd_busy 00A4                     ?_lcd_init 00A4  
     lcd_ecrireDonnees@donnee 00A5                    _m_tabMines 0100                       __Hparam 0000  
                     __Lparam 0000                    _initTabVue 0614             __end_of_lcd_wrCom 083A  
                __psmallconst 0600                       __pcinit 0A1A                     _ANSELbits 000F7E  
                     __ramtop 0600                       __ptext0 097E                       __ptext1 0762  
                     __ptext2 08A4                       __ptext3 0A4C                       __ptext4 083A  
                     __ptext5 06C0                       __ptext6 09B2                       __ptext7 0AA0  
                     __ptext8 07CE                       __ptext9 0AA8         __end_of_lcd_ecritChar 08F8  
             lcd_busy@adresse 00A5                     _T1CONbits 000FCD              lcd_ecritChar@car 00A7  
                  ??_lcd_busy 00A4                    ??_lcd_init 00AB    __size_of_lcd_resetSequence 006A  
        end_of_initialization 0A46         __end_of_lcd_initCGRam 0762             ??_lcd_lireDonnees 00A4  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postinc0 000FEE  
     __size_of_initialisation 0034             ??_lcd_curseurHome 00A7           lcd_ecritChar@posRam 00A8  
                   _PORTAbits 000F80                     _TRISCbits 000F94                   ?_lcd_wrData 00A4  
  __size_of_lcd_ecrireDonnees 001C                     _TXSTAbits 000FAC                   ?_initTabVue 00A4  
                 _BAUDCONbits 000FB8           start_initialization 0A1A           __size_of_lcd_wrData 0034  
                 __pdataBANK0 0060              __CFG_LPT1OSC$OFF 000000                 __pcstackBANK0 00A4  
         __size_of_initTabVue 00AC             __size_of_lcd_busy 0042             __size_of_lcd_init 0028  
           __CFG_CCP2MX$PORTC 000000   __end_of_lcd_strobeEnableBit 0AB0                _initialisation 09E6  
                   _lcd_wrCom 07CE                   __smallconst 0600               _lcd_lireDonnees 0AB0  
         lcd_wrData@caractere 00A6                __size_of_srand 0010               _lcd_curseurHome 0AA0  
      __end_of_initialisation 0A1A              __CFG_WDTPS$32768 000000       __size_of_lcd_putMessage 006C  
                  ?_lcd_wrCom 00A4                    _ADCON0bits 000FC2                    _ADCON2bits 000FC0  
                ??_lcd_wrData 00A6             lcd_wrCom@commande 00A6                     copy_data0 0A2E  
                    __Hparam0 0000        __size_of_lcd_ecritChar 0054                      __Lparam0 0000  
             ?_initialisation 00A4                  ??_initTabVue 00A4            __CFG_BOREN$SBORDIS 000000  
          __end_of_lcd_wrData 09E6        __size_of_lcd_initCGRam 00A2               lcd_putMessage@j 00AD  
     __end_of_lcd_lireDonnees 0AB6                      _matCGRAM 0060       __end_of_lcd_curseurHome 0AA8  
                    __ptext10 0A74                      __ptext11 093C                      __ptext12 0AB0  
                    __ptext13 09E6                      __ptext14 0A90                      __ptext15 0614  
                    _lcd_busy 093C                      _lcd_init 0A4C            __end_of_initTabVue 06C0  
                    _m_tabVue 0154                 __size_of_main 0034                   ??_lcd_wrCom 00A6  
               _lcd_ecritChar 08A4                 _lcd_initCGRam 06C0                _lcd_putMessage 0762  
              ?_lcd_ecritChar 00A4              ?_lcd_lireDonnees 00A4              ?_lcd_curseurHome 00A4  
              ?_lcd_initCGRam 00A4             __CFG_FOSC$INTIO67 000000        __end_of_lcd_putMessage 07CE  
